#include "inc/mons.h"
#include "inc/def.h"
#include "inc/flag.h"
#include "inc/se.h"
#include "inc/scr_inc.h"
#include "inc/3dicon.h"
#include "inc/skilldef.h"
#include "inc/vo.h"
#include "inc/efx.h"

//-------------------------------------------
// mp6522m：地下聖堂　階層２　中央封石部屋
//-------------------------------------------
// initスクリプト
function "init"
{
	
	MapAnime("@gate_03","close")
	MapAnime("gate03_lumi2","off")//像光_OFF
	MapAnime("gate03_lumi4","off")//像光_OFF
	SetChrWork( "lever01" , CWK_CHECKRADIUS , 3.0f )	// LP範囲
	SetChrWork( "lever02" , CWK_CHECKRADIUS , 3.0f )	// LP範囲
	
	// イベントエリア設定制御
	if( FLAG[SF_EVENT_ON] )
	{
	}
	
	// イベントエリア設定制御
	//if( FLAG[SF_EVENT_ON] ){

	//イベント発生制御
		// 一般配置ファンクション呼び出し
		CallFunc("mp6522m:NpcPosition")

		SetChrWork(gim_rockmgr, CWK_TEMP_INT1, 2)//有効ゾーン
		
		// 扉
		if( FLAG[GF_MP6521_SWITCH_02] ){
			MapAnime( "@gate_03" , "open" )
			
			MapAnime("gate03_lumi2","off")//像光_OFF
			ChangeAnimation( "lever01" , "ANI_STOP2", -1 , 1 )
			SetChrWork("lever01", CWK_CHECKOFF, 1)
			MapAnime("gate03_lumi4","off")//像光_OFF
			ChangeAnimation( "lever02" , "ANI_STOP2", -1 , 1 )
			SetChrWork("lever02", CWK_CHECKOFF, 1)
		} else {
			// レバー左
			if( FLAG[GF_MP6521_SWITCH_02A] ){
				MapAnime("gate03_lumi2","on")//像光_OFF
				ChangeAnimation( "lever01" , "ANI_STOP2", -1 , 1 )
				SetChrWork("lever01", CWK_CHECKOFF, 1)
			} else {
				ChangeAnimation( "lever01" , "ANI_STOP1", -1 , 1 )
			}
			// レバー右
			if( FLAG[GF_MP6521_SWITCH_02B] ){
				MapAnime("gate03_lumi4","on")//像光_OFF
				ChangeAnimation( "lever02" , "ANI_STOP2", -1 , 1 )
				SetChrWork("lever02", CWK_CHECKOFF, 1)
			} else {
				ChangeAnimation( "lever02" , "ANI_STOP1", -1 , 1 )
			}
		}
	//}

}


//////////////////////////////////////////////////////////////////////
//■配置制御セクション
//////////////////////////////////////////////////////////////////////
function "NpcPosition"
{
	//if( FLAG[GF_SPEEDRUN_SKILL_HUMMEL] &&	// やり込みスキル習得：⑤▼ヒュンメルＶＳマスターコングを勝利した
	//	!FLAG[GF_SPEEDRUN_SKILL_ADOL] )		// やり込みスキル習得：⑥▼アドルＶＳマスターコングを勝利した
	//{
	//}
}

//////////////////////////////////////////////////////////////////////
//■メインイベント
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//■サブイベントセクション
//////////////////////////////////////////////////////////////////////

function "talk_reset02"
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)		// LP操作、ストッパーなどのシンプルイベント
	SetStopFlag(STOPFLAG_SKIPOK)		// ×ボタンスキップを許可する

	SaveCamera()

	ResetMotion( "ALL" , 1 )
	StopEffect(-1,ALL,1)
	StopEmotion( "ALL" )
	TurnToChr("LEADER", "this", 60.0f)
	ExecuteCmd( 1 , TurnToChr("PLAYER2","PLAYER1",60.0f) )
	ExecuteCmd( 1 , TurnToChr("PLAYER3","PLAYER1",60.0f) )
	SetChrInfoFlag( "PLAYER1" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER2" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER3" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER1" , INFOFLAG_NOATARI )
	SetChrInfoFlag( "PLAYER2" , INFOFLAG_NOATARI )
	SetChrInfoFlag( "PLAYER3" , INFOFLAG_NOATARI )
	Wait(15)
	
	SetFlag(TF_MENU_SELECT2, 2)
	CallFunc("mp6522m:talk_reset_common")	

	ResetStopFlag(STOPFLAG_SKIPOK)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
}

function "talk_reset03"
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)		// LP操作、ストッパーなどのシンプルイベント
	SetStopFlag(STOPFLAG_SKIPOK)		// ×ボタンスキップを許可する

	SaveCamera()

	ResetMotion( "ALL" , 1 )
	StopEffect(-1,ALL,1)
	StopEmotion( "ALL" )
	TurnToChr("LEADER", "this", 60.0f)
	ExecuteCmd( 1 , TurnToChr("PLAYER2","PLAYER1",60.0f) )
	ExecuteCmd( 1 , TurnToChr("PLAYER3","PLAYER1",60.0f) )
	SetChrInfoFlag( "PLAYER1" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER2" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER3" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER1" , INFOFLAG_NOATARI )
	SetChrInfoFlag( "PLAYER2" , INFOFLAG_NOATARI )
	SetChrInfoFlag( "PLAYER3" , INFOFLAG_NOATARI )
	Wait(15)
	
	SetFlag(TF_MENU_SELECT2, 3)
	CallFunc("mp6522m:talk_reset_tuto")	

	ResetStopFlag(STOPFLAG_SKIPOK)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
}
function "talk_reset_common"
{
	TalkPopup(UNDEF,0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
	{
		"#7C復元を望む者は此処に理を示せ"
		"示せ2行目"
	}
	WaitPrompt()
	WaitCloseWindow()

		
	//選択肢
	SetFlag(TF_MENU_SELECT,0)
	MenuReset()
	MenuType(MENUTYPE_POPUP)
	MenuAdd(0,"理力を込める")
	MenuAdd(1,"やめる")
	MenuOpen( TF_MENU_SELECT , -1 , SYSTEM_PPOSY , -2 , -2 , 10 , 1)
	WaitMenu(0)
	MenuClose(10,0)
	
	// 押す
	if( 0==FLAG[TF_MENU_SELECT] ){
		FadeOut(FADE_BLACK,FADE_FAST)
		WaitFade()
		
		SetChrWork(gim_rockmgr, CWK_TEMP_INT0, FLAG[TF_MENU_SELECT2])// 指定グループをリセット
		PlaySE(SE_GIM_PAST_POWER, 100, 0, 0, 0, 1.0f, 0)
		Wait(15)
		PlaySE( SE_GIM_PAST_ROCK_RESET , 100 , 0,  0, 0, 1.0f, 0)
		Wait(25)

		FadeIn(FADE_BLACK,FADE_FAST)
		WaitFade()

		Wait(15)
		
		PlaySE(SE_TUTORIAL, 100, 0, 0, 0, 1.0f, 0)		//チュートリアル
		
		TalkPopup(UNDEF,0,5,0,0,0)
		{
			"#8S"
			"#-1W#4C封石の位置が初期状態に戻った！#10W"
			"封石2行目"
			"#8S"
		}
		Wait(10)
		WaitPrompt()
		WaitCloseWindow()
			
	} else {
		ResetChrInfoFlag( "PLAYER1" , INFOFLAG_FIXED )
		ResetChrInfoFlag( "PLAYER2" , INFOFLAG_FIXED )
		ResetChrInfoFlag( "PLAYER3" , INFOFLAG_FIXED )
		ResetChrInfoFlag( "PLAYER1" , INFOFLAG_NOATARI )
		ResetChrInfoFlag( "PLAYER2" , INFOFLAG_NOATARI )
		ResetChrInfoFlag( "PLAYER3" , INFOFLAG_NOATARI )
	}
}

function "talk_reset_tuto"
{
	TalkPopup(UNDEF,0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
	{
		"#7C復元を望む者は此処に理を示せ "
		"示せ2行目2"
	}
	WaitPrompt()
	WaitCloseWindow()

		
	//選択肢
	SetFlag(TF_MENU_SELECT,0)
	MenuReset()
	MenuType(MENUTYPE_POPUP)
	MenuAdd(0,"理力を込める")
	MenuAdd(1,"やめる")
	MenuOpen( TF_MENU_SELECT , -1 , SYSTEM_PPOSY , -2 , -2 , 10 , 1)
	WaitMenu(0)
	MenuClose(10,0)
	
	// 押す
	if( 0==FLAG[TF_MENU_SELECT] ){
		FadeOut(FADE_BLACK,FADE_FAST)
		WaitFade()
		
		SetChrWork(gim_rockmgr, CWK_TEMP_INT0, FLAG[TF_MENU_SELECT2])// 指定グループをリセット
		PlaySE(SE_GIM_PAST_POWER, 100, 0, 0, 0, 1.0f, 0)
		Wait(15)
		PlaySE( SE_GIM_PAST_ROCK_RESET , 100 , 0,  0, 0, 1.0f, 0)
		Wait(25)


		MoveCameraAt( 0 , 0.015f , 147.995f , 5.171f , 0 )	// 注視点
		ChangeCameraDistance( 0 , 24.560f , 0 )		// 基本距離
		ChangeCameraElevation( 0 , -7.596f , 0 )	// 基本仰角
		RotateCamera( 0 , 86.768f , 0 )				// 角度
		ChangeCameraPers( 0 , 60.000f , 0 )			// 視野角
		SetCameraZPlane( 0.100f , 600.000f )			// ZPlane
		RollCamera( 0 , 0.0f , 0 )				// ロール回転
		// ResetCameraZPlane()	// イベント終了時に呼び出して下さい。マップ側の設定に戻します。


		FadeIn(FADE_BLACK,FADE_FAST)
		WaitFade()

		Wait(15)

		ExecuteCmd(1000, MoveCameraAt, INTERPOLATE_SPHERE , 0.015f , 147.995f , 6.734f , 140 )
		ExecuteCmd(1001, ChangeCameraDistance, INTERPOLATE_SPHERE , 22.600f , 140 )
		ExecuteCmd(1002, ChangeCameraElevation, INTERPOLATE_SPHERE , 10.693f , 140 )
		ExecuteCmd(1003, RotateCamera, INTERPOLATE_SPHERE , 94.532f , 140 )

		//MoveCameraAt( 0 , 0.015f , 147.995f , 6.734f , 0 )	// 注視点
		//ChangeCameraDistance( 0 , 22.600f , 0 )		// 基本距離
		//ChangeCameraElevation( 0 , 10.693f , 0 )	// 基本仰角
		//RotateCamera( 0 , 94.532f , 0 )				// 角度
		//ChangeCameraPers( 0 , 60.000f , 0 )			// 視野角
		//SetCameraZPlane( 0.100f , 600.000f )			// ZPlane
		//RollCamera( 0 , 0.0f , 0 )				// ロール回転
		//// ResetCameraZPlane()	// イベント終了時に呼び出して下さい。マップ側の設定に戻します。

		WaitThread(1000)
		WaitThread(1001)
		WaitThread(1002)
		WaitThread(1003)
		
		
		PlaySE(SE_TUTORIAL, 100, 0, 0, 0, 1.0f, 0)		//チュートリアル
		
		TalkPopup(UNDEF,0,5,0,0,0)
		{
			"#8S"
			"#-1W#4C封石の位置が初期状態に戻った！#10W"
			"封石2行目2"
			"#8S"
		}
		Wait(10)
		WaitPrompt()
		WaitCloseWindow()
		Wait(5)

		CrossFade(FADE_FAST)
		RestoreCamera(0,0)

			
	} else {
		ResetChrInfoFlag( "PLAYER1" , INFOFLAG_FIXED )
		ResetChrInfoFlag( "PLAYER2" , INFOFLAG_FIXED )
		ResetChrInfoFlag( "PLAYER3" , INFOFLAG_FIXED )
		ResetChrInfoFlag( "PLAYER1" , INFOFLAG_NOATARI )
		ResetChrInfoFlag( "PLAYER2" , INFOFLAG_NOATARI )
		ResetChrInfoFlag( "PLAYER3" , INFOFLAG_NOATARI )
	}
}

function "lever_l"
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)		// LP操作、ストッパーなどのシンプルイベント
	SetStopFlag(STOPFLAG_SKIPOK)		// ×ボタンスキップを許可する
	SetFlag(TF_MENU_SELECT2, 1)
	CallFunc("mp6522m:switch_01_open")	
	ResetStopFlag(STOPFLAG_SKIPOK)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
	FadeIn(FADE_BLACK,FADE_FAST)
	//WaitFade()
}
function "lever_r"
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)		// LP操作、ストッパーなどのシンプルイベント
	SetStopFlag(STOPFLAG_SKIPOK)		// ×ボタンスキップを許可する
	SetFlag(TF_MENU_SELECT2, 2)
	CallFunc("mp6522m:switch_01_open")	
	ResetStopFlag(STOPFLAG_SKIPOK)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
	FadeIn(FADE_BLACK,FADE_FAST)
	//WaitFade()
}


function "switch_01_open"
{
	//短いものはイベントスキップ不要とのこと

	ResetMotion( "ALL" , 1 )
	StopEffect(-1,ALL,1)
	StopEmotion( "ALL" )
	TurnToChr("LEADER", "this", 60.0f)
	ExecuteCmd( 1 , TurnToChr("PLAYER2","PLAYER1",60.0f) )
	ExecuteCmd( 1 , TurnToChr("PLAYER3","PLAYER1",60.0f) )
	SetChrInfoFlag( "PLAYER1" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER2" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER3" , INFOFLAG_FIXED )
	SetChrInfoFlag( "PLAYER1" , INFOFLAG_NOATARI )
	SetChrInfoFlag( "PLAYER2" , INFOFLAG_NOATARI )
	SetChrInfoFlag( "PLAYER3" , INFOFLAG_NOATARI )
	Wait(15)
	
	if( FLAG[TF_MENU_SELECT2]==1 ) {// 左
		MapAnime( "gate03_lumi2" , "off" )
	} else {// 右
		MapAnime( "gate03_lumi4" , "off" )
	}

	if( FLAG[TF_MENU_SELECT2]==1 ) {// 左
		ChangeAnimation( "lever01" , "ANI_OPEN", -1 , 1 )
		SetChrWork("lever01", CWK_CHECKOFF, 1)
	} else {// 右
		ChangeAnimation( "lever02" , "ANI_OPEN", -1 , 1 )
		SetChrWork("lever02", CWK_CHECKOFF, 1)
	}

	//Wait(35)
	Wait(50) //SE余韻終わるまで少し待つ

	//開始処理ここから----------------------------------------------------
	FadeOut(FADE_BLACK,FADE_FAST)
	WaitFade()
	
	if( FLAG[TF_MENU_SELECT2]==1 ) {// 左
		MapAnime( "gate03_lumi2" , "off" )
	} else {// 右
		MapAnime( "gate03_lumi4" , "off" )
	}

	//イベント開始前情報の保存
	SaveEventState()
	SaveCamera()

	//パーティ状態のリセット
	CallFunc("system:party_reset_nopos")

	//環境の初期化・不要なものを隠す
	ClearDebris()
	ResetChrPos((CHRTYPE_MONS | REMOVE_POS))
//	ResetChrPos((CHRTYPE_NPC | REMOVE_POS))

	//カメラ設定
MoveCameraAt( 0 , 56.043f , 220.132f , 18.183f , 0 )	// 注視点
ChangeCameraDistance( 0 , 36.259f , 0 )		// 基本距離
ChangeCameraElevation( 0 , 13.238f , 0 )	// 基本仰角
RotateCamera( 0 , 359.928f , 0 )				// 角度
ChangeCameraPers( 0 , 60.000f , 0 )			// 視野角
SetCameraZPlane( 0.100f , 600.000f )			// ZPlane
RollCamera( 0 , 0.0f , 0 )				// ロール回転
// ResetCameraZPlane()	// イベント終了時に呼び出して下さい。マップ側の設定に戻します。

	// 被写界深度の設定
	SetDoF(0, LERP_LINEAR, 2.000, 50.000, 1.000, 0.700, 0.500)
	// グレアの設定
	SetGlare(0, LERP_LINEAR, 0.700, 1.300, 1.000, 1.000, 0.600, 0.000, 1.000)

	FadeIn(FADE_BLACK, FADE_FAST)
	WaitFade()

	// 扉見せる
	PlaySE(SE_GIM_PAST_DOOR_PRE, 100, 0, 0, 0, 1.0f, 0)
	if( FLAG[TF_MENU_SELECT2]==1 ) {// 左
		MapAnime( "gate03_lumi2" , "off-on" )
		MapAnimeLast("gate03_lumi2"       , "on" )
		
		SetFlag(GF_MP6521_SWITCH_02A, 1)
		
	} else {// 右
		MapAnime( "gate03_lumi4" , "off-on" )
		MapAnimeLast("gate03_lumi4"       , "on" )
		
		SetFlag(GF_MP6521_SWITCH_02B, 1)
	}
	Wait(40)
	
	if( FLAG[GF_MP6521_SWITCH_02A] && FLAG[GF_MP6521_SWITCH_02B] ) {
		// 扉開く
		PlaySE(SE_GIM_PAST_DOOR, 100, 1, 0, 0, 1.0f, 0)
		MapAnime( "@gate_03" , "close-open" )
		MapAnimeLast("@gate_03"       , "open" )
		Wait(45)
		EarthQuake(0.1f,0.1f,10)
		PlaySE(SE_GIM_PAST_DOOR_STOP, 100, 0, 0, 0, 1.0f, 0)
		StopSE(SE_GIM_PAST_DOOR, 200)
		
		SetFlag(GF_MP6521_SWITCH_02, 1)
	}
	Wait(15)

	FadeOut(FADE_BLACK, FADE_FAST)
	WaitFade()

	if( FLAG[GF_MP6521_SWITCH_02A] && FLAG[GF_MP6521_SWITCH_02B] )
	{
		MapAnime("gate03_lumi2" , "off" )//消す暇なかったのでここで
		MapAnime("gate03_lumi4" , "off" )//消す暇なかったのでここで
	}
	//　　操作許可を戻す。

	//終了処理ここから----------------------------------------------------
	//イベント前のキャラ情報を復帰
	RestoreEventState()

	//隠したものを復帰。
	ResetChrPos((CHRTYPE_MONS | RESET_POS | RESET_AISTATE))

	//キャラモーション初期化
	CallFunc("system:reset_chrmot_ALL_nopos")

	//パーティキャラを解放
	ReleaseEventPartyChr()

	//マップパラメーターリセット
	ResetMapParam(-1)

	//エフェクトの停止
	StopEffect(-1, ALL, 1)

	//フラグ処理

	//イベント後の再配置

	//カメラ位置復帰
	RestoreCamera(0, 0)		//※上記カメラ位置を指定する場合は不要
	CallFunc("system:camera_reset")
}
