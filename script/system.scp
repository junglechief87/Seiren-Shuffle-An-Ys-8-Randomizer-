#include "inc/mons.h"
#include "inc/def.h"
#include "inc/flag.h"
#include "inc/scr_inc.h"
#include "inc/music.h"
#include "inc/3dicon.h"
#include "inc/vo.h"
#include "inc/se.h"
#include "inc/skilldef.h"
#include "inc/temp/mp1201.h"

function hagihagi
{
	//Message("剥ぎ取り処理")
	Hagitori();
}

function hagihagi2
{
	//Message("剥ぎ取り処理")
	Hagitori2();
}

/////////////////////////////////////.
// ギャラリーモードを選んだ時の初期化スクリプト
//	※ここにはシステムセーブのロード前に来る
//	※後続処理までの間に１度しかスクリプト計算を回さないので、Wait系命令は使わないで下さい。
function "GalleryInit"
{
	// ◆仮：何か一つは処理書いていない動作が保証されないので、ダミーでFadeOutを入れています。
	FadeOut(FADE_BLACK,0)
}

/////////////////////////////////////.
// ギャラリーモードを選んだ時に呼ばれるスクリプト
//	※ここにはシステムセーブのロード後に来る
function "Gallery"
{
	SetStopFlag(STOPFLAG_EVENT)
	FadeOut(FADE_BLACK,0)
	Wait(1)

	LoadArg("map/mp9999/mp9999.arg")
	
	FadeOut(FADE_BLACK,0)
	Wait(1)
	
	EventCue("system:gallerymenu")
}

/////////////////////////////////////.
// タイムアタックモードを選んだ時の初期化スクリプト（装備品入手等）
//	※ここにはシステムセーブのロード前に来る
//	※後続処理までの間に１度しかスクリプト計算を回さないので、Wait系命令は使わないで下さい。
function "TimeAttackInit"
{
	// ※ここのアイテムをいじった場合は、TimeAttackの方で現代編と過去編アクセサリの仕分けをしている所も変更する必要があります。
	// Vita版からある分
	GetItem( ICON3D_AC_000, 1) // ボーンネックレス
	GetItem( ICON3D_AC_001, 1) // ボーンネックレスⅡ
	GetItem( ICON3D_AC_002, 1) // ボーンネックレスⅢ
	GetItem( ICON3D_AC_003, 1) // ボーンネックレスⅣ
	GetItem( ICON3D_AC_004, 1) // ブレイドリング
	GetItem( ICON3D_AC_005, 1) // ブレイドリングⅡ
	GetItem( ICON3D_AC_006, 1) // ブレイドリングⅢ
	GetItem( ICON3D_AC_007, 1) // ブレイドリングⅣ
	GetItem( ICON3D_AC_008, 1) // シールドピアス
	GetItem( ICON3D_AC_009, 1) // シールドピアスⅡ
	GetItem( ICON3D_AC_010, 1) // シールドピアスⅢ
	GetItem( ICON3D_AC_011, 1) // シールドピアスⅣ
	GetItem( ICON3D_AC_012, 1) // 白蛇のお守り
	GetItem( ICON3D_AC_013, 1) // 白蛇の守護石
	GetItem( ICON3D_AC_014, 1) // 雷獣のお守り
	GetItem( ICON3D_AC_015, 1) // 雷獣の守護石
	GetItem( ICON3D_AC_016, 1) // 夜鴉のお守り
	GetItem( ICON3D_AC_017, 1) // 夜鴉の守護石
	GetItem( ICON3D_AC_018, 1) // 氷狼の護符
	GetItem( ICON3D_AC_019, 1) // 氷狼の守護石
	GetItem( ICON3D_AC_020, 1) // 炎馬の護符
	GetItem( ICON3D_AC_021, 1) // 炎馬の守護石
	GetItem( ICON3D_AC_022, 1) // 暴竜の肩当て
	GetItem( ICON3D_AC_023, 1) // 暴竜の守護石
	GetItem( ICON3D_AC_024, 1) // 森羅の護符
//タイムアタックでは持たさない	GetItem( ICON3D_AC_025, 1) // 戦士の刻印
//タイムアタックでは持たさない	GetItem( ICON3D_AC_026, 1) // 戦士の刻印Ⅱ
//タイムアタックでは持たさない	GetItem( ICON3D_AC_027, 1) // 戦士の刻印Ⅲ
//タイムアタックでは持たさない	GetItem( ICON3D_AC_028, 1) // 戦士の刻印Ⅳ
	GetItem( ICON3D_AC_029, 1) // レッドケープ
	GetItem( ICON3D_AC_030, 1) // 紅月のタリスマン
	GetItem( ICON3D_AC_031, 1) // ブルーケープ
	GetItem( ICON3D_AC_032, 1) // 蒼月のタリスマン
	GetItem( ICON3D_AC_033, 1) // ゴールドケープ
	GetItem( ICON3D_AC_034, 1) // 太陽のタリスマン
	GetItem( ICON3D_AC_035, 1) // 狩人の帽子
	GetItem( ICON3D_AC_036, 1) // 海賊のバンダナ
	GetItem( ICON3D_AC_037, 1) // 踊り子のショール
	GetItem( ICON3D_AC_038, 1) // 奇術師のスカーフ
	GetItem( ICON3D_AC_039, 1) // ブラッドファング
	GetItem( ICON3D_AC_040, 1) // クリムゾンファング
	GetItem( ICON3D_AC_041, 1) // 業師の指輪
	GetItem( ICON3D_AC_042, 1) // 業師の帯
	GetItem( ICON3D_AC_043, 1) // 賢者の玉帯
	GetItem( ICON3D_AC_044, 1) // 烈士の帯
	GetItem( ICON3D_AC_045, 1) // 覇者の玉帯
//タイムアタックでは持たさない	GetItem( ICON3D_AC_046, 1) // 流浪のマント
//タイムアタックでは持たさない	GetItem( ICON3D_AC_047, 1) // 勇士のマント
	GetItem( ICON3D_AC_048, 1) // タイガークロウ
	GetItem( ICON3D_AC_049, 1) // イーグルフェザー
	GetItem( ICON3D_AC_050, 1) // ホークウィング
	GetItem( ICON3D_AC_051, 1) // フェザーソックス
//タイムアタックでは持たさない	GetItem( ICON3D_AC_052, 1) // 賭博師のコイン
	GetItem( ICON3D_AC_053, 1) // 狂戦士の仮面
	GetItem( ICON3D_AC_054, 1) // 闘士の兜
//タイムアタックでは持たさない	GetItem( ICON3D_AC_055, 1) // 翡翠のペンダント
	GetItem( ICON3D_AC_056, 1) // 貴石のブローチ
	GetItem( ICON3D_AC_057, 1) // 古き封じの指環
	GetItem( ICON3D_AC_058, 1) // 海の宝戟
	GetItem( ICON3D_AC_059, 1) // 大地の宝珠
	GetItem( ICON3D_AC_060, 1) // 空の宝冠
	GetItem( ICON3D_AC_061, 1) // 聖者の指輪
	GetItem( ICON3D_AC_062, 1) // 精霊の首飾り
	GetItem( ICON3D_AC_063, 1) // 鉛色の肩当て
//タイムアタックでは持たさない	GetItem( ICON3D_AC_064, 1) // 名士のマント
//タイムアタックでは持たさない	GetItem( ICON3D_AC_065, 1) // 暴竜の護符
	
	// PS4版追加分
	GetItem( ICON3D_AC_067, 3) // PS4追加：斬撃のタリスマン	// トロフィー対象外
	GetItem( ICON3D_AC_068, 3) // PS4追加：射撃のタリスマン	// トロフィー対象外
	GetItem( ICON3D_AC_069, 3) // PS4追加：打撃のタリスマン	// トロフィー対象外
	GetItem( ICON3D_AC_540, 1) // PS4追加：真珠の勾玉
	GetItem( ICON3D_AC_541, 1) // PS4追加：止水の勾玉
	GetItem( ICON3D_AC_542, 1) // PS4追加：希望の輝石
	GetItem( ICON3D_AC_543, 1) // PS4追加：イルミナスリング
	GetItem( ICON3D_AC_544, 1) // PS4追加：デビルズファング
	GetItem( ICON3D_AC_545, 1) // PS4追加：精霊のツバサ
	GetItem( ICON3D_AC_546, 1) // PS4追加：万世の奉輪
	GetItem( ICON3D_AC_547, 1) // PS4追加：万象の奉冠
	GetItem( ICON3D_AC_548, 1) // PS4追加：万古の奉石
	GetItem( ICON3D_AC_549, 1) // PS4追加：万言の奉袢
	
	// フラグ系の初期化
	SetFlag(GF_TIMEATK_GAMERANK,	-1)
	SetFlag(GF_TIMEATK_GAMEMODE,	-1)
	SetFlag(GF_TIMEATK_STAGENO,		-1)
	SetFlag(GF_TIMEATK_MENUCONTROL,	-1)
	
	SetFlag(SF_DEFEAT_ANCIENT,		1)		// 古代獣を倒せる
	SetFlag(SF_CANTSAVE,			1)		// セーブ不可能！（ボス戦等、メニューが開けないようになる）												// マップ切り替え毎に毎回リセットされる。argのエリアフラグでセットすべし
	SetFlag(SF_ADOL_JOINOK,			1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_LAXIA_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_SAHAD_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_HUMMEL_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_RICOTTA_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_DANA_JOINOK,			1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_ITEMSLOT_NUM,		-1)		// 冒険具スロット数（-1：スロット非表示	1以上：使えるスロット数	※1未満は装備できるスロット数は1扱い。）
	SetFlag(SF_ITEMSLOT_NUMBK,		-1)		// 冒険具スロット数バックアップ
	SetFlag(SF_CAN_EXSKILL,			1)		// EXスキルが使えるようになる（EXメーターが溜まるようになる）
	SetFlag(SF_SPMAX,				200)	// SP最大値（100～200。それ以外は100扱い）
	SetFlag(SF_SPMAXBK,				200)	// SP最大値（100～200。それ以外は100扱い）バックアップ
	SetFlag(SF_USE_TAMEATK,			1)		// ため攻撃で敵にダメージを与えると１が入る
	SetFlag(SF_USE_SKILLATK,		1)		// スキル攻撃で敵にダメージを与えると１が入る
	SetFlag(SF_CANTUSE_MAP,			1)		// 地図使用禁止
	SetFlag(SF_DANA_WATERSTYLE_LV,	1)		// ダーナ編スタイルレベル（※2016/10/24現在は現代編でも有効）	0-デフォルト
	SetFlag(SF_DANA_EARTHSTYLE_LV,	1)		// ダーナ編スタイルレベル（※2016/10/24現在は現代編でも有効）	0-デフォルト
	SetFlag(SF_DANA_LIGHTSTYLE_LV,	1)		// ダーナ編スタイルレベル（※2016/10/24現在は現代編でも有効）	0-デフォルト
	SetFlag(SF_CANTLOAD,			1)		// ロード不可能！											// マップ切り替え毎に毎回リセットされる。argのエリアフラグでセットすべし
	SetFlag(SF_EVENT_ON,			1)		// イベント発生ＯＮ。基本たちっぱ
	SetFlag(SF_WARP_DISABLED,		1)		// ワープ禁止フラグ。ストッパー用。このフラグが立っていると、ワープ先を選択してもワープしません。
	SetFlag(SF_CAN_DASH,			1)		// ダッシュできるようになる
	SetFlag(SF_CHANGEDDIFFICULT,	1)		// 難易度変更した
	SetFlag(SF_CAMP_FORCE_CAN_EQUIP,1)		// 装備メニューを強制許可（セーブ禁止中などでもOK）			// マップ切り替え毎に毎回リセットされる。
	
	SetFlag(SF_CANTUSE_SKILL,		0)		// !スキル使用禁止（SPが溜まらない）
	SetFlag(SF_CANTGAINEXP,			0)		// !経験値入手できない設定
	SetFlag(SF_FORCELEARN_SKILL,	0)		// !スキルを覚えるタイミングでスキルを強制的に覚えさせる。覚えたらフラグは降りる
	SetFlag(SF_CANTLEARN_SKILL,		0)		// !スキル習得禁止
	SetFlag(SF_CAMP_CLOSE_CHECK,	0)		// !キャンプ閉じ時にチュートリアル判定を行う

	// ◆仮：スキルの習得（追加スキル分がまだ未対応）
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_C1, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_C2, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_C3, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_C4, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_B1, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_B2, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_B3, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_B4, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_B5, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_A1, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_A2, 3)
	GetSkill(PARTY_ADOL, SKILL_ADOL_SP_A3, 3)

	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_C1, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_C2, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_C3, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_C4, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_B1, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_B2, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_B3, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_B4, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_B5, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_A1, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_A2, 3)
	GetSkill(PARTY_LAXIA, SKILL_LAXIA_SP_A3, 3)

	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_C1, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_C2, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_C3, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_C4, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_B1, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_B2, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_B3, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_B4, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_B5, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_A1, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_A2, 3)
	GetSkill(PARTY_SAHAD, SKILL_SAHAD_SP_A3, 3)

	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_C1, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_C2, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_C3, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_C4, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_B1, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_B2, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_B3, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_B4, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_B5, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_A1, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_A2, 3)
	GetSkill(PARTY_HUMMEL, SKILL_HUMMEL_SP_A3, 3)

	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_C1, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_C2, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_C3, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_C4, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_B1, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_B2, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_B3, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_B4, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_B5, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_A1, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_A2, 3)
	GetSkill(PARTY_RICOTTA, SKILL_RICOTTA_SP_A3, 3)

	GetSkill(PARTY_DANA, SKILL_DANA_SP_C1, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_C2, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_C3, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_C4, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_B1, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_B2, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_B3, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_B4, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_B5, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_A1, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_A2, 3)
	GetSkill(PARTY_DANA, SKILL_DANA_SP_A3, 3)

	// デフォルトスキルの設定
	SetSkillShortCut(PARTY_ADOL, -1, 0)
	SetSkillShortCut(PARTY_LAXIA, -1, 0)
	SetSkillShortCut(PARTY_SAHAD, -1, 0)
	SetSkillShortCut(PARTY_HUMMEL, -1, 0)
	SetSkillShortCut(PARTY_RICOTTA, -1, 0)
	SetSkillShortCut(PARTY_DANA, -1, 0)
	
	////////////////////////////////////////////
	// エタニアモード用設定
//	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現在のアイテムをバックアップ＆消去
//	CopyStatus("PARTY_DANACOPY", "PARTY_DANA")	// 現在のダーナ―のステータス／装備／スキル設定をバックアップ
//	CopyStatus("PARTY_DANA", "PARTY_DANAOLD")	// 過去のダーナのステータス／装備／スキル設定から読み出す
//	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_DANA)	// アイテムをリストア

	// 過去ダーナアクセサリ
	GetItem(ICON3D_AC_546, 1) //	546		｜万世の奉輪		｜ICON3D_AC_546					｜409					｜過去編地下聖堂１層クリアご褒美。※現代ディナショップに並ぶようになる。（金貨と交換）過去編から出る処理で GF_OLDITEM_GET_01 を立てる
	GetItem(ICON3D_AC_547, 1) //	547		｜万象の奉冠		｜ICON3D_AC_547					｜410					｜過去編地下聖堂２層クリアご褒美。※現代ディナショップに並ぶようになる。（金貨と交換）過去編から出る処理で GF_OLDITEM_GET_02 を立てる
	GetItem(ICON3D_AC_548, 1) //	548		｜万古の奉石		｜ICON3D_AC_548					｜411					｜過去編地下聖堂３層クリアご褒美。※現代ディナショップに並ぶようになる。（金貨と交換）過去編から出る処理で GF_OLDITEM_GET_03 を立てる
	GetItem(ICON3D_AC_549, 1) //	549		｜万言の奉袢		｜ICON3D_AC_549					｜412					｜過去編地下聖堂４層クリアご褒美。※現代ディナショップに並ぶようになる。（金貨と交換）過去編から出る処理で GF_OLDITEM_GET_04 を立てる
	GetItem(ICON3D_AC_066, 1) //	217		｜無間の闇玉		｜ICON3D_AC_066					｜371					｜トロフィー対象外。※旧名・万古の奉珠。現代に持ち帰らないようになった。
	GetItem(ICON3D_AC_720, 1) //	720		｜バトルリストレット｜ICON3D_AC_720					｜375					｜トロフィー対象外
	GetItem(ICON3D_AC_721, 1) //	721		｜護星の耳飾り		｜ICON3D_AC_721					｜376					｜トロフィー対象外
	GetItem(ICON3D_AC_722, 1) //	722		｜竜骨の首飾り		｜ICON3D_AC_722					｜377					｜トロフィー対象外
	GetItem(ICON3D_AC_723, 1) //	723		｜雷神の護符		｜ICON3D_AC_723					｜378					｜トロフィー対象外
	GetItem(ICON3D_AC_724, 1) //	724		｜竜神の護符		｜ICON3D_AC_724					｜379					｜トロフィー対象外
	GetItem(ICON3D_AC_725, 1) //	725		｜武心の簪			｜ICON3D_AC_725					｜380					｜トロフィー対象外
	GetItem(ICON3D_AC_726, 1) //	726		｜フェアリーケープ	｜ICON3D_AC_726					｜381					｜トロフィー対象外
	GetItem(ICON3D_AC_727, 1) //	727		｜巫女のアミュレット｜ICON3D_AC_727					｜384					｜トロフィー対象外
	GetItem(ICON3D_AC_728, 1) //	728		｜精霊の首飾り		｜ICON3D_AC_728					｜385					｜トロフィー対象外
	GetItem(ICON3D_AC_729, 1) //	729		｜理石の冠			｜ICON3D_AC_729					｜386					｜トロフィー対象外
	GetItem(ICON3D_AC_730, 1) //	730		｜蒼翼の古杖		｜ICON3D_AC_730					｜387					｜トロフィー対象外
	GetItem(ICON3D_AC_731, 1) //	731		｜森羅の護符		｜ICON3D_AC_731					｜388					｜トロフィー対象外

	// 過去ダーナスキル
	GetSkill(PARTY_DANAOLD, SKILL_DANA_SP_C3, 3)
	GetSkill(PARTY_DANAOLD, SKILL_DANA_SP_C4, 3)
	GetSkill(PARTY_DANAOLD, SKILL_DANA_SP_B5, 3)
	GetSkill(PARTY_DANAOLD, SKILL_DANA_SP_A2, 3)
	SetSkillShortCut(PARTY_DANAOLD,	ATKSKILL_CIRCLE,	SKILL_DANA_SP_C3)	//ウォーターシュート
	SetSkillShortCut(PARTY_DANAOLD,	ATKSKILL_CROSS,		SKILL_DANA_SP_C4)	//竜気
	SetSkillShortCut(PARTY_DANAOLD,	ATKSKILL_SQUARE,	SKILL_DANA_SP_B5)	//ミストラルエッジ
	SetSkillShortCut(PARTY_DANAOLD,	ATKSKILL_TRIANGLE,	SKILL_DANA_SP_A2)	//蒼輪舞踏

//	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_DANA)	// ダーナ編アイテムをバックアップ
//	CopyStatus("PARTY_DANAOLD", "PARTY_DANA")	// 過去のダーナ―のステータス／装備／スキル設定をバックアップ
//	CopyStatus("PARTY_DANA", "PARTY_DANACOPY")	// 現在のダーナのステータス／装備／スキル設定から読み出す
//	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムをリストア
	////////////////////////////////////////////
}

/////////////////////////////////////.
// タイムアタックモードを選んだ時に呼ばれるスクリプト	※ここにはシステムセーブのロード後に来る
function "TimeAttack"
{
	SetStopFlag(STOPFLAG_EVENT)
	ResetStopFlag(STOPFLAG_AUTOMESSAGE)		// 自動メッセージ送り解除
	ResetStopFlag(STOPFLAG_SKIPOK)			// 高速スキップ解除
	FadeOut(FADE_BLACK,0)
	Wait(1)

	////////////////////////////////////////////////////////////////////////////
	// 現代編と過去編のアクセサリ状況を保存する
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現在のアイテムをバックアップ＆消去
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムをリストア

	// 現代編アクセサリを削除
	DeleteItem( ICON3D_AC_000, 1) // ボーンネックレス
	DeleteItem( ICON3D_AC_001, 1) // ボーンネックレスⅡ
	DeleteItem( ICON3D_AC_002, 1) // ボーンネックレスⅢ
	DeleteItem( ICON3D_AC_003, 1) // ボーンネックレスⅣ
	DeleteItem( ICON3D_AC_004, 1) // ブレイドリング
	DeleteItem( ICON3D_AC_005, 1) // ブレイドリングⅡ
	DeleteItem( ICON3D_AC_006, 1) // ブレイドリングⅢ
	DeleteItem( ICON3D_AC_007, 1) // ブレイドリングⅣ
	DeleteItem( ICON3D_AC_008, 1) // シールドピアス
	DeleteItem( ICON3D_AC_009, 1) // シールドピアスⅡ
	DeleteItem( ICON3D_AC_010, 1) // シールドピアスⅢ
	DeleteItem( ICON3D_AC_011, 1) // シールドピアスⅣ
	DeleteItem( ICON3D_AC_012, 1) // 白蛇のお守り
	DeleteItem( ICON3D_AC_013, 1) // 白蛇の守護石
	DeleteItem( ICON3D_AC_014, 1) // 雷獣のお守り
	DeleteItem( ICON3D_AC_015, 1) // 雷獣の守護石
	DeleteItem( ICON3D_AC_016, 1) // 夜鴉のお守り
	DeleteItem( ICON3D_AC_017, 1) // 夜鴉の守護石
	DeleteItem( ICON3D_AC_018, 1) // 氷狼の護符
	DeleteItem( ICON3D_AC_019, 1) // 氷狼の守護石
	DeleteItem( ICON3D_AC_020, 1) // 炎馬の護符
	DeleteItem( ICON3D_AC_021, 1) // 炎馬の守護石
	DeleteItem( ICON3D_AC_022, 1) // 暴竜の肩当て
	DeleteItem( ICON3D_AC_023, 1) // 暴竜の守護石
	DeleteItem( ICON3D_AC_024, 1) // 森羅の護符
//タイムアタックでは持たさない	GetItem( ICON3D_AC_025, 1) // 戦士の刻印
//タイムアタックでは持たさない	GetItem( ICON3D_AC_026, 1) // 戦士の刻印Ⅱ
//タイムアタックでは持たさない	GetItem( ICON3D_AC_027, 1) // 戦士の刻印Ⅲ
//タイムアタックでは持たさない	GetItem( ICON3D_AC_028, 1) // 戦士の刻印Ⅳ
	DeleteItem( ICON3D_AC_029, 1) // レッドケープ
	DeleteItem( ICON3D_AC_030, 1) // 紅月のタリスマン
	DeleteItem( ICON3D_AC_031, 1) // ブルーケープ
	DeleteItem( ICON3D_AC_032, 1) // 蒼月のタリスマン
	DeleteItem( ICON3D_AC_033, 1) // ゴールドケープ
	DeleteItem( ICON3D_AC_034, 1) // 太陽のタリスマン
	DeleteItem( ICON3D_AC_035, 1) // 狩人の帽子
	DeleteItem( ICON3D_AC_036, 1) // 海賊のバンダナ
	DeleteItem( ICON3D_AC_037, 1) // 踊り子のショール
	DeleteItem( ICON3D_AC_038, 1) // 奇術師のスカーフ
	DeleteItem( ICON3D_AC_039, 1) // ブラッドファング
	DeleteItem( ICON3D_AC_040, 1) // クリムゾンファング
	DeleteItem( ICON3D_AC_041, 1) // 業師の指輪
	DeleteItem( ICON3D_AC_042, 1) // 業師の帯
	DeleteItem( ICON3D_AC_043, 1) // 賢者の玉帯
	DeleteItem( ICON3D_AC_044, 1) // 烈士の帯
	DeleteItem( ICON3D_AC_045, 1) // 覇者の玉帯
//タイムアタックでは持たさない	GetItem( ICON3D_AC_046, 1) // 流浪のマント
//タイムアタックでは持たさない	GetItem( ICON3D_AC_047, 1) // 勇士のマント
	DeleteItem( ICON3D_AC_048, 1) // タイガークロウ
	DeleteItem( ICON3D_AC_049, 1) // イーグルフェザー
	DeleteItem( ICON3D_AC_050, 1) // ホークウィング
	DeleteItem( ICON3D_AC_051, 1) // フェザーソックス
//タイムアタックでは持たさない	GetItem( ICON3D_AC_052, 1) // 賭博師のコイン
	DeleteItem( ICON3D_AC_053, 1) // 狂戦士の仮面
	DeleteItem( ICON3D_AC_054, 1) // 闘士の兜
//タイムアタックでは持たさない	GetItem( ICON3D_AC_055, 1) // 翡翠のペンダント
	DeleteItem( ICON3D_AC_056, 1) // 貴石のブローチ
	DeleteItem( ICON3D_AC_057, 1) // 古き封じの指環
	DeleteItem( ICON3D_AC_058, 1) // 海の宝戟
	DeleteItem( ICON3D_AC_059, 1) // 大地の宝珠
	DeleteItem( ICON3D_AC_060, 1) // 空の宝冠
	DeleteItem( ICON3D_AC_061, 1) // 聖者の指輪
	DeleteItem( ICON3D_AC_062, 1) // 精霊の首飾り
	DeleteItem( ICON3D_AC_063, 1) // 鉛色の肩当て
//タイムアタックでは持たさない	GetItem( ICON3D_AC_064, 1) // 名士のマント
//タイムアタックでは持たさない	GetItem( ICON3D_AC_065, 1) // 暴竜の護符
	
	// PS4版追加分
	DeleteItem( ICON3D_AC_067, 3) // PS4追加：斬撃のタリスマン	// トロフィー対象外
	DeleteItem( ICON3D_AC_068, 3) // PS4追加：射撃のタリスマン	// トロフィー対象外
	DeleteItem( ICON3D_AC_069, 3) // PS4追加：打撃のタリスマン	// トロフィー対象外
	DeleteItem( ICON3D_AC_540, 1) // PS4追加：真珠の勾玉
	DeleteItem( ICON3D_AC_541, 1) // PS4追加：止水の勾玉
	DeleteItem( ICON3D_AC_542, 1) // PS4追加：希望の輝石
	DeleteItem( ICON3D_AC_543, 1) // PS4追加：イルミナスリング
	DeleteItem( ICON3D_AC_544, 1) // PS4追加：デビルズファング
	DeleteItem( ICON3D_AC_545, 1) // PS4追加：精霊のツバサ
	
	if (ALLITEMWORK[ICON3D_AC_546] == ITEMWORK[ICON3D_AC_546])
	{
		DeleteItem( ICON3D_AC_546, 1) // PS4追加：万世の奉輪
	}
	if (ALLITEMWORK[ICON3D_AC_547] == ITEMWORK[ICON3D_AC_547])
	{
		DeleteItem( ICON3D_AC_547, 1) // PS4追加：万象の奉冠
	}
	if (ALLITEMWORK[ICON3D_AC_548] == ITEMWORK[ICON3D_AC_548])
	{
		DeleteItem( ICON3D_AC_548, 1) // PS4追加：万古の奉石
	}
	if (ALLITEMWORK[ICON3D_AC_549] == ITEMWORK[ICON3D_AC_549])
	{
		DeleteItem( ICON3D_AC_549, 1) // PS4追加：万言の奉袢
	}
	CopyStatus("PARTY_DANACOPY", "PARTY_DANA")	// 現在のダーナ―のステータス／装備／スキル設定をバックアップ
	CopyStatus("PARTY_DANA", "PARTY_DANAOLD")	// 過去のダーナのステータス／装備／スキル設定から読み出す
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_DANA)	// ダーナ編用アイテムとしてバックアップ＆消去
	
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムリストア

	// 過去ダーナアクセサリを削除
	SetFlag(SF_ADOL_JOINOK,			0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_LAXIA_JOINOK,		0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_SAHAD_JOINOK,		0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_HUMMEL_JOINOK,		0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_RICOTTA_JOINOK,		0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_DANA_JOINOK,			1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

	if (ALLITEMWORK[ICON3D_AC_546] == ITEMWORK[ICON3D_AC_546])
	{
		DeleteItem( ICON3D_AC_546, 1) // PS4追加：万世の奉輪
	}
	if (ALLITEMWORK[ICON3D_AC_547] == ITEMWORK[ICON3D_AC_547])
	{
		DeleteItem( ICON3D_AC_547, 1) // PS4追加：万象の奉冠
	}
	if (ALLITEMWORK[ICON3D_AC_548] == ITEMWORK[ICON3D_AC_548])
	{
		DeleteItem( ICON3D_AC_548, 1) // PS4追加：万古の奉石
	}
	if (ALLITEMWORK[ICON3D_AC_549] == ITEMWORK[ICON3D_AC_549])
	{
		DeleteItem( ICON3D_AC_549, 1) // PS4追加：万言の奉袢
	}
	DeleteItem(ICON3D_AC_066, 1) //	217		｜無間の闇玉		｜ICON3D_AC_066					｜371					｜トロフィー対象外。※旧名・万古の奉珠。現代に持ち帰らないようになった。
	DeleteItem(ICON3D_AC_720, 1) //	720		｜バトルリストレット｜ICON3D_AC_720					｜375					｜トロフィー対象外
	DeleteItem(ICON3D_AC_721, 1) //	721		｜護星の耳飾り		｜ICON3D_AC_721					｜376					｜トロフィー対象外
	DeleteItem(ICON3D_AC_722, 1) //	722		｜竜骨の首飾り		｜ICON3D_AC_722					｜377					｜トロフィー対象外
	DeleteItem(ICON3D_AC_723, 1) //	723		｜雷神の護符		｜ICON3D_AC_723					｜378					｜トロフィー対象外
	DeleteItem(ICON3D_AC_724, 1) //	724		｜竜神の護符		｜ICON3D_AC_724					｜379					｜トロフィー対象外
	DeleteItem(ICON3D_AC_725, 1) //	725		｜武心の簪			｜ICON3D_AC_725					｜380					｜トロフィー対象外
	DeleteItem(ICON3D_AC_726, 1) //	726		｜フェアリーケープ	｜ICON3D_AC_726					｜381					｜トロフィー対象外
	DeleteItem(ICON3D_AC_727, 1) //	727		｜巫女のアミュレット｜ICON3D_AC_727					｜384					｜トロフィー対象外
	DeleteItem(ICON3D_AC_728, 1) //	728		｜精霊の首飾り		｜ICON3D_AC_728					｜385					｜トロフィー対象外
	DeleteItem(ICON3D_AC_729, 1) //	729		｜理石の冠			｜ICON3D_AC_729					｜386					｜トロフィー対象外
	DeleteItem(ICON3D_AC_730, 1) //	730		｜蒼翼の古杖		｜ICON3D_AC_730					｜387					｜トロフィー対象外
	DeleteItem(ICON3D_AC_731, 1) //	731		｜森羅の護符		｜ICON3D_AC_731					｜388					｜トロフィー対象外

	CopyStatus("PARTY_DANAOLD", "PARTY_DANA")	// 過去のダーナ―のステータス／装備／スキル設定をバックアップ
	CopyStatus("PARTY_DANA", "PARTY_DANACOPY")	// 現在のダーナのステータス／装備／スキル設定から読み出す
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現代編用アイテムとしてバックアップ＆消去
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムリストア

	SetFlag(SF_ADOL_JOINOK,			1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_LAXIA_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_SAHAD_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_HUMMEL_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_RICOTTA_JOINOK,		1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_DANA_JOINOK,			1)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	// ここまで
	////////////////////////////////////////////////////////////////////////////


	LoadArg("map/mp9999/mp9999.arg")
	
	FadeOut(FADE_BLACK,0)
	Wait(1)
	
	EventCue("system:timeatkmenu")
}


/////////////////////////////////////.
// ラスボス前から開始を選んだ時に呼ばれるスクリプト
function "LastBossMae"
{
	SetStopFlag(STOPFLAG_EVENT)
	FadeOut(FADE_BLACK,0)
	StopBGM(30)

	/////////////////////////////
	// 各種ラスボス前への引き継ぎ関連
	//	※EP1/EP2 はクリアセーブを取る前に SetPartyMember(ADOL, LAXIA, SAHAD)をしておいて下さい。
	/////////////////////////////
	
	// 必要に応じてプレイヤーキャラの設定

		// ※アドルは装備を想剣ミストルティンに設定する必要がある
	if (!ITEMWORK[ICON3D_WP_ADOL_008])
	{
		// ミストルティン持ってないのでゲットする
		GetItem(ICON3D_WP_ADOL_008, 1)
	}
	EquipWeapon(ADOL, ICON3D_WP_ADOL_008)
	if (ITEMWORK[ICON3D_WP_ADOL_008] > 0)
	{
		// ミストルティン装備後なのに持っている　＝　２本以上持っているので消去しておく
		DeleteItem(ICON3D_WP_ADOL_008, 99)
	}
		// 一応全キャラ全快しておく
	HP_Recover( 9999 )

	// ラスボス以降のフラグを全て下ろす
		// 
	SetFlag(GF_MP6310B_ENDROGRAM_STEP, 0)		// 一応下ろしておく
	SetFlag(GF_MP8323_2NDBATTLE, 0)

		// エピローグのGFを全て下ろす
	SetFlag(1, GF_07MPxxxx_START)
	while(FLAG[1] < GF_07MPxxxx_MAX)
	{
		SetFlag(FLAG[1], 0)
		SetFlag(1, (FLAG[1] + 1))
	}
	SetFlag( GF_06MPxxxx_6TH_CHAPTER_FINISH, 0 )	//これも下ろす

	SetFlag( GF_CAMP_SHIPYARD_LV, 8 )	// 漂流村の発展設定を戻す

		//一般会話GFを下ろす
	SetFlag(GF_1STTALK_7_01_RICOTTA,0)
	SetFlag(GF_1STTALK_7_01_REJA,0)

		// クリアセーブ等のフラグを下ろす
	SetFlag(SF_CLEARFLG, 0)
	SetFlag(SF_CAMP_ONLY_SAVE_ERASE, 0)

	SetFlag(SF_CANUSE_MAPWARP,1)		//移動→転位に変更

	// 最後のマーカー登録
	SetMapMarker( SMI_SYMBOL ,PAGE_MP6310, MARKER_EV_M06S231, 0.0f, -60.0f, 0.0f, 0.0f, -60.0f,MARKER_EV_M06S231,MN_D_MP6310,0)		//メイン：《選択の間》に突入する

	//水晶石の削除と登録
	DelCheckPoint(CP_MP6409_4)	//エピローグ専用を消す
	DelMapMarker( SMI_CHECKED_WARPPT, PAGE_F039,MARKER_CP_MP6409_4 , 0,0)

	SetCheckPoint(CP_MP6409_2)	//通常の寺院前
	SetMapMarker( SMI_CHECKED_WARPPT, PAGE_F039,MARKER_CP_MP6409_2 , -273, 584 , 110, -273, 584, CP_MP6409_2, MN_D_MP6408,0)	// 水晶石マーカーを設置

	//クリア済の場合、現代編地下聖堂のマーカーを設置する
	if(FLAG[SF_SYS_CLEARED] && FLAG[GF_SUBEV_PAST_07_CLEAR] && !FLAG[GF_CRYPT_MARKER_SETED])
	{
		SetMapMarker( SMI_SUBEVENT ,PAGE_F032, MARKER_SUBEV_CRYPT, -429.70f,948.39f,14.01f, -429.70f,948.39f,MARKER_SUBEV_CRYPT,MN_F_MP6211,0)			//現代編地下聖堂（入り口
		SetMapMarker( SMI_SUBEVENT ,PAGE_MP65xx, MARKER_SUBEV_CRYPT2, -0.09f, -115.66f, -451.00f, -0.09f, -115.66f,MARKER_SUBEV_CRYPT2,MN_D_MP6569,6)		//現代編地下聖堂（宝箱
		SetFlag(GF_CRYPT_MARKER_SETED,1)		//旧地下聖堂のマーカーをセットした
	}

	//クエスト期限戻し（クリアデータから第六部ラストに戻った）--------------------------------
	//【QS223】ヒュッパーの掃討
	if( FLAG[GF_QUEST_223] != QUEST_SUCCESS ){
		if( FLAG[GF_QS223_KILL_MONS] )				//【QS223】ヒュッパーの掃討 モンスターを討伐した
		{
			SetFlag( GF_QUEST_223, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_223, QUEST_BBS )
		}
	}
	//【QS302】アギアギラの討伐
	if( FLAG[GF_QUEST_302] != QUEST_SUCCESS ){
		if( FLAG[GF_QS302_KILL_MONS] )				//【QS302】アギアギラの討伐 モンスターを討伐した
		{
			SetFlag( GF_QUEST_302, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_302, QUEST_BBS )
		}
	}
	//【QS400】ししょーへの献上（リコッタ）
	if( FLAG[GF_QUEST_400] != QUEST_SUCCESS ){
		if( FLAG[DF_QS400_START] )					// 【QS610】★リコッタから話を聞いた。				※例外的にＤＦで判定
		{
			SetFlag( GF_QUEST_400, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_400, QUEST_BBS )
		}
	}
	//【QS503】グラドングゥの掃討
	if( FLAG[GF_QUEST_503] != QUEST_SUCCESS ){
		if( FLAG[GF_QS503_KILL_MONS] )				//【QS503】グラドングゥの掃討 モンスターを討伐した
		{
			SetFlag( GF_QUEST_503, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_503, QUEST_BBS )
		}
	}
	//【QS530】アルシャコウの討伐
	if( FLAG[GF_QUEST_530] != QUEST_SUCCESS ){
		if( FLAG[GF_QS530_KILL_MONS] )				//【QS530】アルシャコウの討伐 モンスターを討伐した
		{
			SetFlag( GF_QUEST_530, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_530, QUEST_BBS )
		}
	}
	//【QS600】輝ける鎧（カトリーン）
	if( FLAG[GF_QUEST_600] != QUEST_SUCCESS ){
		SetFlag( GF_QUEST_600, QUEST_BBS )
	}
	//【QS601】冒険家への依頼（フランツ）
	if( FLAG[GF_QUEST_601] != QUEST_SUCCESS ){
		if( FLAG[DF_QS601_START] )					// 【QS601】★フランツさんと話した。				※例外的にＤＦで判定
		{
			SetFlag( GF_QUEST_601, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_601, QUEST_BBS )
		}
	}
	//【QS602】白酒の調達（カシュー）
	if( FLAG[GF_QUEST_602] != QUEST_SUCCESS ){
		if( FLAG[DF_QS602_START] )					// 【QS602】★カシューと話した。以下の物を探そう。	※例外的にＤＦで判定
		{
			SetFlag( GF_QUEST_602, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_602, QUEST_BBS )
		}
	}
	//【QS610】親友の遺言（ダーナ）
	if( FLAG[GF_QUEST_610] != QUEST_SUCCESS ){
		if( FLAG[GF_QS610_TALK_DANA] )				// 【QS610】親友の遺言（ダーナ）ダーナーの話を聞く　冒険日誌に登録判定フラグです
		{
			SetFlag( GF_QUEST_610, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_610, QUEST_BBS )
		}
	}
	//【QS611】老いらくの剣（シルヴィア）
	if( FLAG[GF_QUEST_611] != QUEST_SUCCESS ){
		if( FLAG[DF_QS611_START] )					// 【QS611】★シルヴィアさんと話した。				※例外的にＤＦで判定
		{
			SetFlag( GF_QUEST_611, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_611, QUEST_BBS )
		}
	}
	//【QS612】欠けたモノリス（グリゼルダ）
	if( FLAG[GF_QUEST_612] != QUEST_SUCCESS ){
		if( FLAG[DF_QS612_START] )					// 【QS612】★グリゼルダさんと話した。				※例外的にＤＦで判定
		{
			SetFlag( GF_QUEST_612, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_612, QUEST_BBS )
		}
	}

	//PS4追加分
	//【QS613】卵の奪還（ヒュンメル）
	if( FLAG[GF_QUEST_613] != QUEST_SUCCESS ){
		if( FLAG[DF_QS613_START] )					// 【QS613】★ヒュンメルと話した。				※例外的にＤＦで判定
		{
			SetFlag( GF_QUEST_613, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_613, QUEST_BBS )
		}
	}
	//【QS504】解放せよ！浸食谷（ドギ）
	if( FLAG[GF_QUEST_504] != QUEST_SUCCESS ){

		if(FLAG[GF_QS504_QUESTEVENT])		//開始イベントを見た
		{
			SetFlag( GF_QUEST_504, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_504, QUEST_BBS )
		}
		
	}
	//【QS603】撃滅せよ！王家の谷（ドギ）
	if( FLAG[GF_QUEST_603] != QUEST_SUCCESS ){

		if(FLAG[GF_QS603_QUESTEVENT])		//開始イベントを見た
		{
			SetFlag( GF_QUEST_603, QUEST_START )
		}
		else
		{
			SetFlag( GF_QUEST_603, QUEST_BBS )
		}
	}

	// フラグ設定
	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
	//SetFlag(SF_RAMSAVED,1)				// RAMセーブ取る
	SetFlag(SF_EVENT_ON, 1)				// イベント発生ＯＮ。基本たちっぱ
	SetFlag(SF_BOSS_BATTLE,0)				// ボスバトルを下ろす

	//SetFlag( SF_MISSIONNO, MS_06_09 )	//★冒険メモ：《はじまりの大樹》を止めよう。		//ラスボス前のものに再設定

	// マップの読み込み
	LoadArg("map/mp6310/mp6310.arg")

	// ラスボス前の水晶石横に配置する
	SetChrPos(LEADER, 4.87f, -98.62f, -2.50)
	Turn(LEADER, -179.46f, 360.0f)
	ResetPartyPos()
	ResetFollowPoint()

	if(FLAG[GF_TRUE_END])	//トゥルーエンド時のみ
	{
		//★パッチ1.01対応
		Wait(10)
		PlaySE(SE_TUTORIAL, 100, 0, 0, 0, 1.0f, 0)	//チュートリアル
		//	ナレーション
		TalkPopup(UNDEF,0,5,0,0,0)
		{
			"#-1W#4Cダーナの装備はリセットされています。"
			"#-1W#4Cキャンプメニューから装備と編成を整えてください。#10W"
		}
		Wait(10)
		WaitPrompt()
		WaitCloseWindow()
	}

		// エンディング見たフラグを下ろす
	SetFlag(GF_NORMAL_END, 0)
	SetFlag(GF_TRUE_END, 0)

	CallFunc("system:camera_reset")

	FadeIn(FADE_BLACK,FADE_NORMAL)
	ResetStopFlag(STOPFLAG_EVENT)
}

/////////////////////////////////////.
// NewGame時に呼ばれるスクリプト
function "gamestart"
{
	SetStopFlag(STOPFLAG_EVENT)

	FadeOut(FADE_BLACK,0)
	WaitFade()
	
	SetFlag(SF_RAMSAVED,1)				// RAMセーブ取る
//	SetFlag(SF_CAN_EXSKILL,1)			// EXスキル使用許可
	SetFlag(SF_CAN_DASH,1)				// ダッシュ許可

//	SetFlag(SF_CANTLEARN_SKILL, 1)		// スキル習得禁止

	SetFlag(SF_EVENT_ON, 1)				// イベント発生ＯＮ。基本たちっぱ

//	SetFlag(SF_DEBUG, 1)				// デバッグ状態に設定（SetLevel等、一部のコマンドの挙動が変化。リリースでも使用する可能性あり）

	SetFlag(GF_ADOLSIDE_FAME,1)			//レコード：アドルサイドの名声値表記名をON

		// クリアセーブ等のフラグを下ろす
	SetFlag(SF_CLEARFLG, 0)
	SetFlag(SF_CAMP_ONLY_SAVE_ERASE, 0)

	SetFlag(TF_MENU_SELECT,100)
	SetFlag(TF_MENU_SELECT2,1)

//	///////////////////////////
//	// 検証版分岐
//	MenuReset()
//	MenuAdd(2,"制圧戦確認用")
//	MenuAdd(1,"スタイルチェンジギミック検証版")
//	MenuAdd(0,"通常起動")
//	MenuType(MENUTYPE_POPUP)
//	MenuOpen(TF_MENU_SELECT,-1,200,-1,-2,10,0)
//	WaitMenu(0)
//	MenuClose(10,0)
//
//	if (FLAG[TF_MENU_SELECT] == 1)
//	{
//		// システムフラグ
//		SetFlag(SF_DEBUG, 1)
//		SetFlag(SF_EVENT_ON, 0)		//メインイベント起動
//		SetFlag(SF_CAN_EXSKILL,1)	//EXスキル使用禁止
//		SetFlag(SF_CAN_DASH,1)				// ダッシュ許可
//		SetFlag(SF_NOCHANGEBGM, 0)
//		
//		SetFlag(SF_DEFEAT_ANCIENT, 1)	// 古代種倒せる
//
//		// スタイルチェンジギミック検証版
//		EventCue("test:StyleTest")
//	}
//	else if (FLAG[TF_MENU_SELECT] == 2)
//	{
//		// 制圧戦検証
//		SetFlag(SF_DEBUG, 1)
//		SetFlag(SF_EVENT_ON, 0)		//メインイベント起動
//		SetFlag(SF_CAN_EXSKILL,1)	//EXスキル使用禁止
//		SetFlag(SF_CAN_DASH,1)				// ダッシュ許可
//		SetFlag(SF_NOCHANGEBGM, 0)
//		
//		SetFlag(SF_DEFEAT_ANCIENT, 1)	// 古代種倒せる
//		EventCue("test:Control")
//	}
//	else
//	{
		// 正式想定のNewGameへ
		CallFunc("system:gamestart2")
//	}
}

function "gamestart2"
{
	StopBGM(30)

	// 正式想定のNewGame
	//////////////////////////
	// システムフラグ
	SetFlag(SF_DEBUG, 0)
	SetFlag(SF_EVENT_ON, 1)		//メインイベント起動
	SetFlag(SF_CAN_EXSKILL,0)	//EXスキル使用禁止
	SetFlag(SF_CAN_DASH,1)				// ダッシュ許可
	SetFlag(SF_NOCHANGEBGM, 1)

	//////////////////////////
	// 衣装
	EquipCostume(ADOL, -1, EQC_MAIN, EQC_MODE_EVFORCE)		// 強制はしない
	EquipCostume(ADOL, ICON3D_COS_ADOL_00, EQC_MAIN, EQC_MODE_EVDEFAULT)	// イベントとしては船員服を着て欲しい

	//////////////////////////
	// アイテム
	GetItem(ICON3D_TOPIC_BOOK,1)

	//////////////////////////
	// 地図系
//		SetWorldMapping(MAP_SEAL_MP1201)
//		SetWorldMapping(MAP_SEAL_MP1202)
//		OpenMinimap(PAGE_MP120x, 0, 35.35f, -1416.18f, 30.0f)
//		SetCheckPoint(CP_MP1201_01)
//		SetMapMarker(SMI_WARPPT, PAGE_MP120x, -1, 41.0f, -1420.0f, 0.0f, 41.0f, -1420.0f, CP_MP1201_01, MN_T_VILLAGE_MP1201,0)

	//////////////////////////
	// メニュー封じ	

	//	※キャンプメニューのスキル、装備、編成は封じる。
	//	※冒険日誌は各タブの表示内容がない場合黒落ちする仕様なため、
	//	　このタイミングでは以下の項目のみオープンになっている想定。
	//
	//	【１周目の場合】
	//	　ストーリー／ヘルプ（ゲーム）
	//
	//	【２週目の場合】
	//	　ストーリー／料理／釣り／モンスター／素材・食材／ヘルプ

	SetFlag(SF_CAMP_CANT_FORMATION,1)	// 編成メニュー禁止
	SetFlag(SF_CAMP_CANT_DIARY,0)		// 冒険日誌メニュー許可
	//SetFlag(SF_CAMP_CANT_MAP,1)			// 地図メニュー禁止
	//SetFlag(SF_CAMP_CANT_EQUIP,1)		// 装備メニュー禁止			//★Patch1.01対応
	SetFlag(SF_CAMP_CANT_SYSTEM,0)		// システムメニュー許可
	//SetFlag(SF_CAMP_CANT_ITEM,1)		// アイテムメニュー禁止		//★Patch1.01対応
	SetFlag(SF_CAMP_CANT_SKILL,1)	//スキルメニュー禁止
	SetFlag(SF_CANTUSE_SKILL ,1)	//SPゲージ溜まらない
	SetFlag(SF_CANUSE_MAPWARP,0)		//転位→移動に変更

	//////////////////////////
	// パーティ
	SetPartyMember(PARTY_ADOL, -1, -1)
	SetFlag(SF_ADOL_JOINOK, 1)				// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_SAHAD_JOINOK, 0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_LAXIA_JOINOK, 0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_HUMMEL_JOINOK,	 0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_RICOTTA_JOINOK, 0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
	SetFlag(SF_DANA_JOINOK, 0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

	//////////////////////////
	// 手帳初期
	SetDiaryShopFlag(SHOP_ID_WEAPON_A,0)			// "鍛冶場(強化)"
	SetDiaryShopFlag(SHOP_ID_WEAPON,0)				// "カトリーンの武器工房(強化・進化)"
	SetDiaryShopFlag(SHOP_ID_ARMOR,0)				// "カトリーンの武器工房(防具購入)"

	SetDiaryShopFlag(SHOP_ID_DRESS,0)				// "アリスンの仕立て屋"
	SetDiaryShopFlag(SHOP_ID_DRESS_E,0)				// "エド＆アリスンの仕立て屋"

	SetDiaryShopFlag(SHOP_ID_ACCESSORY,0)			// "エアランの工芸屋"
	SetDiaryShopFlag(SHOP_ID_ACCESSORY_SELL,0)		// "工芸屋・分解"

	SetDiaryShopFlag(SHOP_ID_TRADE_A,0)				// "倉庫"
	SetDiaryShopFlag(SHOP_ID_TRADE,0)				// "ディナの交易所"
	SetDiaryShopFlag(SHOP_ID_TRADE_SELL,0)			// "交易所・引取り"

	SetDiaryShopFlag(SHOP_ID_DRUG_A,0)				// "調薬場"
	SetDiaryShopFlag(SHOP_ID_DRUG,0)				// "キルゴールの診療所"
	SetDiaryShopFlag(SHOP_ID_DRUG_R,0)				// "リヒトの診療所"

	//▼▼▼▼▼▼　ステータス設定：アドル：初期　▼▼▼▼▼▼
	SetLevel( ADOL, 2)
	//GetItem(ICON3D_WP_ADOL_011,1)	//イシオスブレード
	//EquipWeapon(ADOL,ICON3D_WP_ADOL_011	)	//イシオスブレード装備

	SetFlag(TF_MENU_SELECT,0)	// イベント終了する
	SetFlag(TF_MENU_SELECT2,0)	// イベント終了する

	//////////////////////////////////////////////
	// ２周目関連
	if (FLAG[SF_2NDSTART])
	{
		SetFlag(SF_CAMP_ONLY_SAVE_ERASE, 0)
		SetFlag(SF_CANTUSE_SKILL ,0)	//SPゲージ溜まるようにする
		SetFlag(SF_CAN_EXSKILL,1)	//EXスキル使用できるようにする
		SetFlag(SF_CAMP_CANT_ITEM,0)		// アイテムメニュー許可
		SetFlag(SF_CAMP_CANT_SKILL,0)	//スキルメニュー許可
		
		// 引き継いできた
		if (FLAG[SF_2ND_GET_MATERIAL])
		{
			// 特典の「各種鉱石」を選んでいたらしい
			// 鉱石をあげる
			GetItem(ICON3D_MT_N1_STONE, 10)	//	奇妙な塊	（汎用鉱石ＬＶ１）
			GetItem(ICON3D_MT_N2_STONE, 10) //	鉄鉱石		（汎用鉱石ＬＶ２）
			GetItem(ICON3D_MT_N3_STONE, 10) //	テクタイト鉱（汎用鉱石ＬＶ３）
			GetItem(ICON3D_MT_N4_STONE, 10) //	理晶石		（汎用鉱石ＬＶ４）
			GetItem(ICON3D_MT_R2_STONE, 10)	//	鍾乳石				（鉱石レア素材ＬＶ２）
			GetItem(ICON3D_MT_R4_STONE, 10)	//	竜紋岩				（鉱石レア素材ＬＶ４）
		}
		if (FLAG[SF_2ND_GET_BOTTLE])
		{
			// 特典の「空き瓶ｘ３」を選んでいたらしい
			// 空き瓶をあげる
			GetItem(ICON3D_EV_EMPTY_BOTTLE, 3)
		}
	}
	//////////////////////////////////////////////

	LoadArg("map/mp0011/mp0011.arg")
	EventCue("mp0011:EV_M00S000")

	ResetStopFlag(STOPFLAG_EVENT)

}

/////////////////////////////////////.
// ウィング用のマーカー処理
function "wingmarker"
{
	// 現在の場所をポータル場所として覚えておく
	SetPortal(0)
}


/////////////////////////////////////
// ポータル戻り扉に入った時の処理
function "go_portal"
{
	ResetMotion( "ALL", 1 )		// モーション初期化
	StopEffect( -1, "ALL", 1 )	// エフェクト停止
	StopEmotion( "ALL" )		// エモーション停止
}

/////////////////////////////////////
// ワープメニュー（グループ別）
function "sys_warp01"
{
	if( FLAG[SF_EVENT_ON] && FLAG[GF_01MP1201_IN_BASE] && !FLAG[GF_01MP1201_CHECK_STONE] )
	{
		EventCue("mp1201:EV_M01S070")
	}
	else
	{
		SetStopFlag(STOPFLAG_TALK)
		ResetMoveVec("PARTYALL")

		ExecuteCmd(-1, TurnToChr, "PLAYER1" , "this" , 10.0f )
		ExecuteCmd(-1, TurnToChr, "PLAYER2" , "this" , 10.0f )
		ExecuteCmd(-1, TurnToChr, "PLAYER3" , "this" , 10.0f )
		Wait(10)

//		TalkMes(UNDEF,"#7C美しい水晶がほのかに光っている……","近づくと不思議と心が安らぐようだ。","")
//		WaitPrompt()

		//◆メッセージ形式暫定
		TalkPopup(UNDEF,0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
		{
			"#7C美しい水晶がほのかに光っている……"
			"#7C近づくと不思議と心が安らぐようだ。"
		}
		WaitPrompt()
		WaitCloseWindow()

		Wait(10)

		ResetStopFlag(STOPFLAG_TALK)
	}
}


/////////////////////////////////////
// 地図メニュー開く
function "sys_warpmenu"
{
	if(FLAG[GF_NIGHTHUNT])	// ▼夜ダンジョン判定フラグができたらここに判定を入れてください。
	{
		// 現代編夜ダンジョン
		SetFlag(SF_MAPDATAID, EMAPDATA_ID_ADOL_NIGHT);
		WarpMenu(1, -1)
	}
	else if( !FLAG[SF_PAST_MODE] )
	{
		//現代編
		SetFlag(SF_MAPDATAID, EMAPDATA_ID_ADOL);


		//拠点の水晶石の名称入れ替え
		if( FLAG[GF_02MP1202_GET_CLOTHES] ) {			// 探索用の服をもらった
			DelCheckPoint( CP_MP1201_01 )
			SetCheckPoint( CP_MP1201_02 )
		}

		// ストッパー系の物はフラグによって目的地を言わせる
	//	SetStopFlag(STOPFLAG_SIMPLEEVENT)
	//	ResetMoveVec("PARTYALL")

		// ワープ禁止の場合は以下のフラグを立てる。（全ての場所にワープできなくなる）
		//	SF_WARP_DISABLED
		//	SF_CANTSAVE
		// このフラグが立っている時は、場所を選んでもワープしない。

		// 個別のワープ禁止の場合は以下の方法で設定する
		//	AddWarpDisableList( ワープＩＤ )
		// 地図メニューを閉じると自動的に全解除されるので、毎回ここで設定する事。
		//	if (FLAG[GF_hogehoge])
		//	{
		//		AddWarpDisableList( CP_MP1201_01, CP_MP1201_01)
		//	}

		if(	FLAG[GF_NIGHTHUNT] )		//夜間探索実行時
		{
			AddWarpDisableList(CP_CRYSTAL_START, CHECK_POINT_MAX )			//全体禁止（ロケーションポイント含めた全て）
		}
		
		//　　以下のタイミングは、地図からアイコンが黒落ちし
		//　　ワープが行えなくなる。
		//　　※0430「GF_TBOX_DUMMY077	//王都に転移で到着する」以降は
		//　　　ロケーションポイントにもワープが可能になりました。
		//　　　黒落ち＆復帰処理にロケーションポイントも含める必要があります。
		if(	FLAG[GF_02MP1202_GET_CLOTHES] &&		// ラクシャから探索服をもらう
			!FLAG[GF_02MP1201_INFO_QUEST] )			// 依頼の説明を受けた
		{
			//　GF_02MP1202_GET_CLOTHES,			// ラクシャから探索服をもらう
			//　～！GF_02MP1201_INFO_QUEST,			// 依頼の説明を受けた
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1201_JOIN_ALISON] &&		// アリスンを救出した
			!FLAG[GF_02MP1202_OPEN_DRESS] )			// アリスンが仕立屋を始める
		{
			//　GF_02MP1201_JOIN_ALISON,			// アリスンを救出した
			//　～！GF_02MP1202_OPEN_DRESS,			// アリスンが仕立屋を始める
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1202_OPEN_DRESS] &&			// アリスンが仕立屋を始める
			!FLAG[GF_02MP1105_MAKE_CAMP] &&			// はじめて野営をした
			WORK[WK_MAPNAMENO] == MN_F_SOUTHWEST_PLANE_MP1105 )
		{
			//	GF_02MP1202_OPEN_DRESS,				// アリスンが仕立屋を始める
			//	～！GF_02MP1105_MAKE_CAMP,			// はじめて野営をした
			//	かつmp1105t1に入った
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1306_GET_GROVE] &&			// グローブを入手した
			!FLAG[GF_HELP_A29] )					// ▽チュートリアル：グリップグローブの効果
		{
	  		//　GF_02MP1306_GET_GROVE,				// グローブを入手した
			//　～！装着後のイベントまで
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1201_JOIN_KATRIN] &&		// カトリーンが合流した（武器の強化が可能になる２）
			!FLAG[GF_02MP1201_TEST_RENSEI] )		// 武器の強化した
		{
			//　GF_02MP1201_JOIN_KATRIN,			// カトリーンが合流した（武器の強化が可能になる２）
			//　～！GF_02MP1201_TEST_RENSEI,		// 武器の強化した
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1120_MEET_HUMMEL] &&		// ヒュンメルに出会った
			!FLAG[GF_02MP1121_MAKE_CAMP] )			// mp1121に野営地を築いた
		{
			//　GF_02MP1120_MEET_HUMMEL,			// ヒュンメルに出会った
			//　～！GF_02MP1121_MAKE_CAMP,			// mp1121に野営地を築いた
			//AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			//AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_SUBEV_LOOK_REJA1] &&		// レーヤの合流イベント①を見た
			!FLAG[GF_TBOX_DUMMY064] )			// レーヤと合流した
		{
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}	
		if(	FLAG[GF_02MP1202_HEAR_SHOUT] &&			// 叫び声を聞いた
			!FLAG[GF_02MP1201_BEFORE_INTERCEPT2] )	// 迎撃戦の準備をはじめた
		{
			//　GF_02MP1202_HEAR_SHOUT,				// 叫び声を聞いた
			//　～！GF_02MP1201_BEFORE_INTERCEPT2,	// 迎撃戦の準備をはじめた
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1201_LOST_CURRAN] &&		// カーラン卿が行方不明になった
			!FLAG[GF_02MP1201_LOOK_CURRAN] )		// カーラン卿を発見した
		{
			//　GF_02MP1201_LOST_CURRAN,			// カーラン卿が行方不明になった
			//　～！GF_02MP1201_LOOK_CURRAN,		// カーラン卿を発見した
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1201_START_HEARING] &&		// 聞き込みを開始した
			!FLAG[GF_03MP1201_GOTO_GENSD] )			///ジャンダルムへ出発する
		{
			//　GF_02MP1201_START_HEARING,			// 聞き込みを開始した
			//　～！GF_03MP1201_GOTO_GENSD,			//ジャンダルムへ向かうことになる		こちらが正しい
			//　～!GF_03MP1101_LEAVE_CAMP			//ジャンダルムへ出発する				間違い
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_03MP3104_CROSS_BRIDGE] &&		// 大木の橋を渡り終える
			!FLAG[GF_03MP3105_MAKE_CAMP] &&			///ジャンダルム麓の野営地を出発する
			WORK[WK_MAPNAMENO] == MN_F_MP3105 )
		{
			//　GF_03MP3104_CROSS_BRIDGE,			//大木の橋を渡り終える
			//　～！GF_03MP3105_MAKE_CAMP,			//ジャンダルム麓の野営地を出発する
			//　かつmp3105t1に入った
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_03MP4202_IN_LODGE] &&			//タナトスの小屋に到着する
			!FLAG[GF_03MP4202_TALK_LODGE] )			//小屋の中央で会話
		{
			//　GF_03MP4202_IN_LODGE,				//タナトスの小屋に到着する
			//　～！GF_03MP4202_TALK_LODGE,			//小屋の中央で会話
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_04MP5102_MISS_RICOTTA] &&		//リコッタが行方不明になる
			!FLAG[GF_04MP5102_RESCUE_RICOTTA] )		//リコッタを住処から救出する３
		{
			//　GF_04MP5102_MISS_RICOTTA,			//リコッタが行方不明になる
			//　～！GF_04MP5102_RESCUE_RICOTTA,		//リコッタを住処から救出する３
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_04MP6101_CRYSTAL_FLASH] && 		// 水晶前で不思議な現象が起こる
			!FLAG[GF_04MP5101_OUT_CAMP] )			//王都前野営地を出発する
		{
			//　GF_04MP6101_CRYSTAL_FLASH, 			// 水晶前で不思議な現象が起こる
			//　～！GF_04MP5101_OUT_CAMP,			//王都前野営地を出発する
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_05MP1201_UP_LOOKOUT] &&			//見張り台を登ることにする
			!FLAG[GF_05MP1201_GOTO_GHOSTHIP] )		//幽霊船を調査することになる
		{
			//　GF_05MP1201_UP_LOOKOUT,				//見張り台を登ることにする
			//　～！GF_05MP1201_GOTO_GHOSTHIP,		//幽霊船を調査することになる
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_05MP7411_SAIL_GHOSTSHIP] &&		//エレフセリア号が出航する
			!FLAG[GF_05MP0404_IN_GHOSTSHIP]) // Change this to let the player warp out after they've activated the warp point on the ship !FLAG[GF_05MP0405_READ_REED] )			//キャプテン・リードと別れる２
		{
			//　GF_05MP7411_SAIL_GHOSTSHIP,			//エレフセリア号が出航する
			//　～！GF_05MP0405_READ_REED,			//キャプテン・リードと別れる２
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_05MP1201_HOLD_PARTY] &&			//漂流村で決起会が催される
			!FLAG[GF_05MP6231M_GOTO_SKYWAY] )		//過去Ⅳ－２　王都に星が落下する
		{
			//　GF_05MP1201_HOLD_PARTY,				//漂流村で決起会が催される
			//　～！GF_05MP6231M_GOTO_SKYWAY		//過去Ⅳ－２　王都に星が落下する
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_SUBEV_05_6435_GET_BELL] &&		//銀の鈴を持っている
			!FLAG[GF_05MP6345_KILL_MIDBOSS] )		//王家の谷中ボス戦闘終了
		{
			//　銀の鈴入手
			//　～！GF_05MP6345_KILL_MIDBOSS,		//王家の谷中ボス戦闘終了
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_TBOX_DUMMY087] &&			//調査のためジャンダルムへ向かう
			!FLAG[GF_06MP4341_SEE_COCOON] )		//大樹の異変を目撃する
		{
			// GF_TBOX_DUMMY087,				//調査のためジャンダルムへ向かう	※このタイミングは、南部～ジャンダルムまでしかワープできない。北部は黒落ち状態になる。
			// ～！GF_06MP4341_SEE_COCOON,			//大樹の異変を目撃する
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			DelWarpDisableList(CP_MP1201_01, CP_MP3105)	// 00:凪の入り江　～　07:中央高原・野営地
			DelWarpDisableList(CP_MP7303, CP_MP4340)	// 12:水音の洞窟　～　28:ジャンダルム・最奥
			DelWarpDisableList(CP_MP7411, CP_MP0408)	// 39:沖の洞窟　～　41:海賊船・甲板室
			DelWarpDisableList(CP_MP6411, CP_MP6411)	// 53:埋没した塔
			DelWarpDisableList(CP_MP4335, CP_MP1116)	// 61:追加分：ジャンダルム・タナトスの小屋　～　62:追加分：望郷岬
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
			DelWarpDisableList(CP_L_MP1112, CP_L_MP1122)	// 64:鳥鳴き岩　～　85:マングローダ（ロケーションポイント）
		}
		if(	FLAG[GF_06MP4341_SEE_COCOON] &&			//大樹の異変を目撃する
			!FLAG[GF_06MP4109_IN_GATE] )		//霧の漂う山門に入る
		{
			// GF_06MP4341_SEE_COCOON,				//大樹の異変を目撃する				※このタイミングは、南部～ジャンダルム＋天崖山道までしかワープできない。他の北部は黒落ち状態になる。（★パッチ1.01対応）
			// ～！GF_06MP4109_IN_GATE,			//霧の漂う山門に入る
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止			
			DelWarpDisableList(CP_MP1201_01, CP_MP3105)	// 00:凪の入り江　～　07:中央高原・野営地
			DelWarpDisableList(CP_MP7303, CP_MP4340)	// 12:水音の洞窟　～　28:ジャンダルム・最奥
			DelWarpDisableList(CP_MP7411, CP_MP0408)	// 39:沖の洞窟　～　41:海賊船・甲板室
			DelWarpDisableList(CP_MP6411, CP_MP6411)	// 53:埋没した塔
			DelWarpDisableList(CP_MP4335, CP_MP1116)	// 61:追加分：ジャンダルム・タナトスの小屋　～　62:追加分：望郷岬
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
			DelWarpDisableList(CP_L_MP1112, CP_L_MP1122)	// 64:鳥鳴き岩　～　85:マングローダ（ロケーションポイント）

			DelWarpDisableList(CP_MP4103, CP_MP4103)	// 33:風雲山道
		}
		if(	FLAG[GF_06MP4109_IN_GATE] &&			//霧の漂う山門に入る
			!FLAG[GF_06MP4105B_START_ROOP] )		//霧の中で異形の古代種と戦う１
		{
			// GF_06MP4109_IN_GATE,				//霧の漂う山門に入る				※このタイミングは、南部～ジャンダルム＋天崖山道＋テンペル山道野営地までしかワープできない。他の北部は黒落ち状態になる。（★パッチ1.01対応）
			// ～！GF_06MP4105B_START_ROOP,		//霧の中で異形の古代種と戦う１
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止			
			DelWarpDisableList(CP_MP1201_01, CP_MP3105)	// 00:凪の入り江　～　07:中央高原・野営地
			DelWarpDisableList(CP_MP7303, CP_MP4340)	// 12:水音の洞窟　～　28:ジャンダルム・最奥
			DelWarpDisableList(CP_MP7411, CP_MP0408)	// 39:沖の洞窟　～　41:海賊船・甲板室
			DelWarpDisableList(CP_MP6411, CP_MP6411)	// 53:埋没した塔
			DelWarpDisableList(CP_MP4335, CP_MP1116)	// 61:追加分：ジャンダルム・タナトスの小屋　～　62:追加分：望郷岬
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
			DelWarpDisableList(CP_L_MP1112, CP_L_MP1122)	// 64:鳥鳴き岩　～　85:マングローダ（ロケーションポイント）

			DelWarpDisableList(CP_MP4103, CP_MP4103)	// 33:風雲山道
			DelWarpDisableList(CP_L_MP7102, CP_L_MP7102)	// 86:虹色の鉱脈
			DelWarpDisableList(CP_MP4111, CP_MP4111)	// 29:聖域への山道・野営地

		}
		if(	FLAG[GF_06MP4105B_START_ROOP] &&		//霧の中で異形の古代種と戦う１
			!FLAG[GF_06MP4109_GOTO_GARDEN] )		//アドルがセレンの園を目指す
		{
			//　GF_06MP4105B_START_ROOP,			//霧の中で異形の古代種と戦う１
			//　～！GF_06MP4109_GOTO_GARDEN,		//アドルがセレンの園を目指す
			AddWarpDisableList(CP_CRYSTAL_START, CHECK_POINT_MAX)			//全体禁止（ロケーションポイント含む）
		}
		if(	FLAG[GF_06MP4109_GOTO_GARDEN] &&		//アドルがセレンの園を目指す
			!FLAG[GF_06MP6409_OCCUR_INTERCEPT12] )	//迎撃戦12が発生した
		{
			//	GF_06MP4109_GOTO_GARDEN,			//アドルがセレンの園を目指す　※このタイミングは、大樹の寺院・最奥以降にはワープできない。
			//	    ～!GF_06MP6409_OCCUR_INTERCEPT12,   //迎撃戦12が発生した
			AddWarpDisableList(CP_MP6401, CP_MP6401)						// 41:大樹の寺院・最奥
			AddWarpDisableList(CP_MP6301, CP_MP6310)						// 55:オクトゥス　～　60:オクトゥス・選択の間
		}
		if(	FLAG[GF_07MP1202_AWAKE_ADOL] &&			//漂流村でアドルが目を覚ます
			!FLAG[GF_07MP1201_TALK_ALL] )			// 漂流村を回ってみる後（全員と話して北部に向かうことにした）
		{
			//	GF_07MP1202_AWAKE_ADOL				//漂流村でアドルが目を覚ます									//0519ワープ不可に変更
			//	～！GF_07MP1201_TALK_ALL,			// 漂流村を回ってみる後（全員と話して北部に向かうことにした）
			AddWarpDisableList(CP_CRYSTAL_START, CHECK_POINT_MAX)			//全体禁止（ロケーションポイント含む）
		}
		if(	FLAG[GF_07MP1201_TALK_ALL] &&			// 漂流村を回ってみる後（全員と話して北部に向かうことにした）
			!FLAG[GF_07MP6409_PARTY_JOIN] )			// ＥＤⅢ 山門で仲間と合流
		{
			//	GF_07MP1201_TALK_ALL,				// 漂流村を回ってみる後（全員と話して北部に向かうことにした）	※このタイミングは、漂流村と寺院（エピローグ版）しか選べない
			//	～！GF_07MP6409_PARTY_JOIN			// ＥＤⅢ 山門で仲間と合流
			AddWarpDisableList(CP_CRYSTAL_START, CHECK_POINT_MAX)			//全体禁止（ロケーションポイント含む）
			DelWarpDisableList(CP_MP1201_02,CP_MP1201_02)					// 01:漂流村
			DelWarpDisableList(CP_MP6409_4, CP_MP6409_4)					// 36:大樹の寺院・前（エピローグ版
		}
		if(	FLAG[GF_07MP6409_PARTY_JOIN] )			// ＥＤⅢ 山門で仲間と合流
		{
			//　GF_07MP6409_PARTY_JOIN～			// ＥＤⅢ 山門で仲間と合流
			AddWarpDisableList(CP_CRYSTAL_START, CHECK_POINT_MAX)			//全体禁止（ロケーションポイント含む）
		}
		if(	FLAG[GF_SUBEV_LOOK_REJA1] &&	//レーヤの合流イベント①を見た
			!FLAG[GF_TBOX_DUMMY064] )		//レーヤと合流した
		{
			//　GF_SUBEV_LOOK_REJA1			//レーヤの合流イベント①を見た
			//　～！GF_SUBEV_JOIN_REJA,		//レーヤと合流した
			AddWarpDisableList(CP_CRYSTAL_START, CHECK_POINT_MAX)			//全体禁止（ロケーションポイント含む）
			//AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			//AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}
		if(	FLAG[GF_02MP1110_REMOVE_OBSTACLE_1ST] &&	//倒木を撤去する（前半）
			!FLAG[GF_02MP1110_REMOVE_OBSTACLE] )		//倒木を撤去する
		{
			//　GF_02MP1110_REMOVE_OBSTACLE_1ST			//倒木を撤去する（前半）
			//　～！GF_02MP1110_REMOVE_OBSTACLE,		//倒木を撤去する
			AddWarpDisableList(CP_CRYSTAL_START, CP_CRYSTAL_MAX)			//全体禁止
			AddWarpDisableList(CP_L_MP1112, CP_LOCATION_MAX)				//全体禁止（ロケーションポイント）
		}

		// メニュー開く
	//	ResetStopFlag(STOPFLAG_NOEXTERIOR)
	//	ResetStopFlag(STOPFLAG_SIMPLEEVENT)

		WarpMenu(1, -1)

	}
	else
	{
		//過去編
		
		//---------------------------------------
		// PS4版：地図メニューを呼び出す
		//---------------------------------------

		// SF_CANTUSE_MAP を立ててWarpMenuコマンドを呼び出すと、「地下聖堂へ移動」アイコンが出なくなる。
		SetFlag(TF_BREAK_RND, 1)

		if( FLAG[GF_PAST_EPISODE_D1A_TEM] )						//▼ダーナ編①Ａ寺院内を歩く
		{
			SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			if( FLAG[GF_PAST_EPISODE_D1B_CANYON] )				//▼ダーナ編①Ｂ大峡谷を攻略する
			{
				SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_02);
			}
			else
			{
				SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_00);
			}
		}
		else if( FLAG[GF_PAST_EPISODE_D3_WALK_CAPITAL] )		//▼ダーナ編③王都を歩く
		{
			SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_03);
		}
		else if( FLAG[GF_PAST_EPISODE_1_GO_CAMP] )				//▼過去編Ⅰアドルがいたポイントへ向かう
		{
			SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_10);
		}
		else if( FLAG[GF_PAST_EPISODE_2_GO_SOUTHGATE] )			//▼過去編Ⅱ南門へ向かう
		{
			if (!FLAG[GF_SUBEV_PAST_02_QUEST_G])		// 過去編Ⅱ：【過去クエスト②Ｇ：地下聖堂フロア１に到達する】を見た
			{
				// まだ地下聖堂に入っていない
				SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			}
			if(FLAG[GF_SUBEV_PAST_02_MONOLITH] && !FLAG[GF_SUBEV_PAST_02_DOOR_B1])		//イオに出会ってから扉を調べるまで
			{
				//DelWarpDisableList(CP_MP6511M, CP_MP6511M)	// 入り口への移動禁止
				SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			}
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_20);
		}
		else if( FLAG[GF_PAST_EPISODE_3_GO_BAHA] )				//▼過去編Ⅲバハの塔へ向かう
		{
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_30);
		}
		else if( FLAG[GF_PAST_EPISODE_4_GO_CASTLE] )			//▼過去編Ⅳ王宮前へ向かう
		{
			if(!FLAG[GF_SUBEV_PAST_04_CESIL])
			{
				SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			}
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_40);
		}
		else if( FLAG[GF_PAST_EPISODE_4_2_GO_OUT] )				//▼過去編Ⅳ-２王宮の外へ向かう
		{
			SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_42);
		}
		else if( FLAG[GF_PAST_EPISODE_5_GO_VALLAY] )			//▼過去編Ⅴ王家の谷へ向かう
		{
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_50);
		}
		else if( FLAG[GF_PAST_EPISODE_6_GO_GARDEN] )			//▼過去編Ⅵセレンの園へ向かう
		{
			if (!FLAG[GF_SUBEV_PAST_06_GATE])		// 過去編Ⅵ：【サブイベント：山門で修道女たちに見送られる】を見た
			{
				// 王都にいる間は地下聖堂へ飛べない
				SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			}
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_60);
		}
		else
		{
			if (!FLAG[GF_SUBEV_PAST_07_LOOK_STEP])		// 過去編Ⅶ：▼地下聖堂入口が開いているのを見る２　を見た
			{
				//地下聖堂が開いている様子を見るまでは地下聖堂へ飛べない
				SetFlag(SF_CANTUSE_MAP, 1)	// 地下聖堂へ移動は禁止
			}
			// 仮
			SetFlag(SF_MAPDATAID, EMAPDATA_ID_DANA_70);
//			SetFlag(TF_BREAK_RND, 0)
		}
		
		if (FLAG[TF_BREAK_RND])
		{
			WarpMenu(1, -1)
		}
		
/*
		//---------------------------------------
		// Vita版：ポートレートで地図の代理を行う
		//---------------------------------------
		SetStopFlag(STOPFLAG_FREEZE)
		SetStopFlag(STOPFLAG_NOEXTERIOR)					//
		SetFlag(SF_CANTUSE_MAP,1)
		SetFlag(TF_BREAK_RND, 1)

		if( FLAG[GF_PAST_EPISODE_D1A_TEM] )						//▼ダーナ編①Ａ寺院内を歩く
		{
			if( FLAG[GF_PAST_EPISODE_D1B_CANYON] )				//▼ダーナ編①Ｂ大峡谷を攻略する
			{
				Portrait_Load(1, "visual/portrait/p_wld02.itp" )
			}
			else
			{
				Portrait_Load(1, "visual/portrait/p_wld00.itp" )
			}
		}
		else if( FLAG[GF_PAST_EPISODE_D3_WALK_CAPITAL] )		//▼ダーナ編③王都を歩く
		{
			Portrait_Load(1, "visual/portrait/p_wld03.itp" )
		}
		else if( FLAG[GF_PAST_EPISODE_1_GO_CAMP] )				//▼過去編Ⅰアドルがいたポイントへ向かう
		{
			Portrait_Load(1, "visual/portrait/p_wld10.itp" )
		}
		else if( FLAG[GF_PAST_EPISODE_2_GO_SOUTHGATE] )			//▼過去編Ⅱ南門へ向かう
		{
			Portrait_Load(1, "visual/portrait/p_wld20.itp" )
		}
		else if( FLAG[GF_PAST_EPISODE_3_GO_BAHA] )				//▼過去編Ⅲバハの塔へ向かう
		{
			Portrait_Load(1, "visual/portrait/p_wld30.itp" )
		}
		else if( FLAG[GF_PAST_EPISODE_4_GO_CASTLE] )			//▼過去編Ⅳ王宮前へ向かう
		{
			Portrait_Load(1, "visual/portrait/p_wld40.itp" )
		}
		else if( FLAG[GF_PAST_EPISODE_4_2_GO_OUT] )				//▼過去編Ⅳ-２王宮の外へ向かう
		{
			Portrait_Load(1, "visual/portrait/p_wld42.itp" )
		}
		else if( FLAG[GF_PAST_EPISODE_5_GO_VALLAY] )			//▼過去編Ⅴ王家の谷へ向かう
		{
			Portrait_Load(1, "visual/portrait/p_wld50.itp" )
		}
		else if( FLAG[GF_PAST_EPISODE_6_GO_GARDEN] )			//▼過去編Ⅵセレンの園へ向かう
		{
			Portrait_Load(1, "visual/portrait/p_wld60.itp" )
		}
		else
		{
			SetFlag(TF_BREAK_RND, 0)
		}
		
		if (FLAG[TF_BREAK_RND])
		{
			Portrait_Create(1 , 0 , 0 , 
							0 , 0 , 1920,1080 , 
							0 , 0x00ffffff , 0x00000000 )

			Portrait_Anime(1, PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 1.0f, FADE_FAST)
			Wait(FADE_FAST)
			Message2(1, 500, 500, "", "", "", "", "", "", "", "", "", "")		//ボタン入力可能を提示		画面外へ
			WaitPrompt()
			WaitCloseWindow()
			
	//		Portrait_Anime(1, PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0.0f, FADE_FAST)
	//		Wait(FADE_FAST)
			CrossFade(FADE_FAST)
			Portrait_Close(1)
			Portrait_Unload(1)
		}

		SetFlag(SF_CANTUSE_MAP,0)
		ResetStopFlag(STOPFLAG_FREEZE)
		ResetStopFlag(STOPFLAG_NOEXTERIOR)
*/
	}
}

/////////////////////////////////////
// 地図メニュー閉じる時に呼ばれる処理（他のスクリプト実行中の場合は呼ばれない）
function "sys_warpmenucl"
{
	// 
	// ここで引っかけて、ワープを解除＋イベント実行できます。
	// ワープを解除する場合は、WarpCancelコマンドを使用して下さい。
	// 尚、WarpCancelを使うと、フェードアウトした状態になります。
	// 
	//	if (何かしらの条件)
	//	{
	//		WarpCancel()
	//		イベントとか
	//	}
	// ワープ先に選んだＩＤはTF_MENU_SELECTに保管されている。
	// if (FLAG[TF_MENU_SELECT] == CP_MP1105)
	// {
	// 	// 
	// 	WarpCancel()		// すぐキャンセルしないとワープしてしまう
	// 	Message("テスト")
	// 	WaitPrompt()
	// 	FadeIn(FADE_BLACK,15)
	// 	break;
	// }

//Do away with warp cancel events for the rando, they cause a lot of issues, let the players decide when they want to activate certain events.
//	if( FLAG[SF_PAST_MODE] )
//	{
//		//過去編
//		SetFlag(SF_CANTUSE_MAP, 0)	// 地下聖堂への移動禁止を解除しておく
//
//		if( FLAG[SF_ENTRY] == 101 )	// SF_ENTRY = 101 ⇒ ワープする
//		{
//			// システムのワープ処理をキャンセル
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			
//			if (FLAG[TF_MENU_SELECT])
//			{
//				// 地下聖堂へ移動する
//				LoadArg("map/mp6511m/mp6511m.arg")
//				EventCue("mp6511m:Relocate_B1")
//			}
//			else
//			{
//				if (FLAG[GF_PAST_EPISODE_2_GO_SOUTHGATE])			//過去Ⅱ
//				{
//					if(FLAG[GF_SUBEV_PAST_02_DOOR_B1] && !FLAG[GF_SUBEV_PAST_02_QUEST_C])
//					{
//						//NowLoading 時の Tips 表示をカット
//						SetFlag(TF_LOADING_TIPS_OFF, 1)
//
//						SetFlag(SF_NOCHANGEBGM, 1)
//
//						LoadArg("map/mp6202m/mp6202m.arg")
//						EventCue("mp6202m:SubEV_Past_02_Quest_C")
//						SetEnvSEPlayState(-1, 0)	//環境SE全停止
//					}
//					else
//					{
//						LoadArg("map/mp6211m/mp6211m.arg")
//						EventCue("mp6211m:Relocate_6211m")
//					}
//				}
//				else if (FLAG[GF_PAST_EPISODE_3_GO_BAHA])			//過去Ⅲ
//				{
//					LoadArg("map/mp6211m/mp6211m.arg")
//					EventCue("mp6211m:Relocate_6211m")
//				}
//				else if (FLAG[GF_PAST_EPISODE_4_GO_CASTLE])			//過去Ⅳ
//				{
//					LoadArg("map/mp6211m/mp6211m.arg")
//					EventCue("mp6211m:Relocate_6211m")
//				}
//				else if (FLAG[GF_PAST_EPISODE_5_GO_VALLAY])			//過去Ⅴ
//				{
//					LoadArg("map/mp6113m/mp6113m.arg")
//					EventCue("mp6113m:Relocate_6113m")
//				}
//				else if (FLAG[GF_PAST_EPISODE_6_GO_GARDEN])			//過去Ⅵ
//				{
//					LoadArg("map/mp5104m/mp5104m.arg")
//					EventCue("mp5104m:Relocate_5104m")
//				}
//				else if (FLAG[GF_PAST_EPISODE_7_ENDEPISODE])		//過去Ⅶ
//				{
//					LoadArg("map/mp6211m2/mp6211m2.arg")
//					EventCue("mp6211m2:Relocate_6211m2")
//				}
//			}
//			ResetStopFlag(STOPFLAG_NOEXTERIOR)
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//	}
//	else if( FLAG[SF_ENTRY] == 101 )	// SF_ENTRY = 101 ⇒ ワープする
//	{
//		//▼ハックして[M06S220][《選択の間》へ進む]を起動
//		if (FLAG[GF_06MP6350_GET_MISTILTEINN] &&		//[M06S210][想剣ミストルティンを入手する]
//		!FLAG[GF_06MP6301_GOTO_BOSSROOM] &&				//[M06S220][《選択の間》へ進む]
//		(FLAG[TF_MENU_SELECT] == CP_MP6301 ||		//ここを選んだ時にハック：オクトゥス
//		FLAG[TF_MENU_SELECT] == CP_MP6305 ||		//ここを選んだ時にハック：オクトゥス・海の回廊
//		FLAG[TF_MENU_SELECT] == CP_MP6306 ||		//ここを選んだ時にハック：オクトゥス・氷の回廊
//		FLAG[TF_MENU_SELECT] == CP_MP6307 ||		//ここを選んだ時にハック：オクトゥス・蟲の回廊
//		FLAG[TF_MENU_SELECT] == CP_MP6308  )){		//ここを選んだ時にハック：オクトゥス・天の回廊
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp6301/mp6301.arg")
//			EventCue("mp6301:EV_M06S220")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックして[M05S470][漂流村が古代種の攻勢を受ける]を起動
//		else if (FLAG[GF_05MP6351_SEE_WALLPAINT] &&		//[M05S460][壁画の間にたどり着く]
//		!FLAG[GF_TBOX_DUMMY079] &&		//[M06S000][王家の谷について報告する]
//		FLAG[TF_MENU_SELECT] != CP_MP6108	&&		//ここには飛べる：王家の谷野営地
//		FLAG[TF_MENU_SELECT] != CP_MP6341	&&		//ここには飛べる：王家の谷・中腹
//		FLAG[TF_MENU_SELECT] != CP_MP6347  &&		//ここには飛べる：王家の谷・最奥
//		FLAG[TF_MENU_SELECT] != CP_MP6350_1 ){		//ここには飛べる：セレンの園
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp6108/mp6108.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//
//		}
//
//		//▼ハックして▼エドとアリスンのフォロー会話を起動
//		else if (FLAG[GF_05MP1202_CHECK_MAP] &&				//大空洞へ向かうことになる２
//		!FLAG[GF_SUBEV_MP1201_FOLLOW_TALK] &&				// ▼エドとアリスンのフォロー会話 を見た
//		FLAG[GF_QUEST_510] != QUEST_SUCCESS ){				// 【QS510】故郷の花	クエストを達成していない
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//
//			SetFlag(TF_LOADING_TIPS_OFF, 1)	//NowLoading 時の Tips 表示をカット
//			LoadArg("map/mp1201/mp1201.arg")
//			EventCue("mp1201:SubEV_05_Follow_TalkS")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックして【QS510】故郷の花▼クエスト開始イベントを起動
//		else if (FLAG[GF_05MP1201_GOTO_GHOSTHIP] &&	
//		!FLAG[GF_05MP1202_QUEST_QS510] ){					// 【QS510】故郷の花クエスト開始イベントを見た
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//
//			SetFlag(TF_LOADING_TIPS_OFF, 1)	//NowLoading 時の Tips 表示をカット
//			SetFlag(GF_MP1202_NOW,1)		//屋内に直接飛ぶ場合
//			LoadArg("map/mp1201/mp1201.arg")
//			EventCue("mp1201:QS_510_Start")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックして[M05S043][ダーナが王宮跡に行きたがる]を起動
//		else if (FLAG[GF_TBOX_DUMMY076] &&	
//		!FLAG[GF_05MP6204_SEE_RUIN] &&					// [M05S040][ダーナが王宮跡を見る]
//		FLAG[TF_MENU_SELECT] == CP_MP6204 ){		//ここを選んだ場合にハック：エタニア王宮前
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//
//			SetFlag(TF_LOADING_TIPS_OFF, 1)	//NowLoading 時の Tips 表示をカット
//			LoadArg("map/mp6201/mp6201.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//
//		}
//
//		//▼ハックして[M04S180][参道の障害で立ち往生する]を起動
//		else if (FLAG[GF_04MP6204_SEE_THANATOS] &&	
//		!FLAG[GF_04MP6201_TALK_THANATOS] &&					// [M04S200][参道の障害が消滅する]
//		FLAG[TF_MENU_SELECT] == CP_MP6201 ){		//ここを選んだ場合にハック：エタニア中央区
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//
//			SetFlag(TF_LOADING_TIPS_OFF, 1)	//NowLoading 時の Tips 表示をカット
//			LoadArg("map/mp6201/mp6201.arg")
//			EventCue("mp6201:EV_M04S180")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックして[M04S158][人影が中央方面に逃げていく]を起動
//		else if (FLAG[GF_04MP6203_LOOK_BUILD] &&	
//		!FLAG[GF_04MP6203_RUN_CENTER]){					// [M04S158][人影が中央方面に逃げていく]
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//
//			SetFlag(TF_LOADING_TIPS_OFF, 1)	//NowLoading 時の Tips 表示をカット
//			LoadArg("map/mp6203/mp6203.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックしてハシビロコウ紹介イベントを起動
//		else if (FLAG[GF_03MP1201_TALK_KATRIN] &&	//[M03S180][カトリーンに相談する]
//		!FLAG[GF_03MP7401_GET_MATERIAL] &&			//[M03S220][化石を調べる]
//		!FLAG[GF_SPEEDRUN_FISH_ENCOUNTER] && 		//リコッタとハシビロコウの遭遇イベント
//		(WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1201  || WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1202 ||		//漂流村にいるとき起動
//		WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1201_2 || WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1202_2)){
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//
//			SetFlag(TF_LOADING_TIPS_OFF, 1)	//NowLoading 時の Tips 表示をカット
//			LoadArg("map/mp1201/mp1201.arg")
//			EventCue("mp1201:Speedrun_Rex_Meet")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックしてハシビロコウ紹介イベントを起動	//水音の洞窟
//		else if (FLAG[GF_03MP1201_TALK_KATRIN] &&	//[M03S180][カトリーンに相談する]
//		!FLAG[GF_03MP7401_GET_MATERIAL] &&			//[M03S220][化石を調べる]
//		!FLAG[GF_SPEEDRUN_FISH_ENCOUNTER] && 		//リコッタとハシビロコウの遭遇イベント
//		(WORK[WK_MAPNAMENO] == MN_D_CELLAR_MP7301 || WORK[WK_MAPNAMENO] == MN_D_CELLAR_MP7302 || 
//		WORK[WK_MAPNAMENO] == MN_D_CELLAR_MP7303 || WORK[WK_MAPNAMENO] == MN_D_CELLAR_MP7304 || 
//		WORK[WK_MAPNAMENO] == MN_D_CELLAR_MP7305 )){
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//
//			SetFlag(TF_LOADING_TIPS_OFF, 1)	//NowLoading 時の Tips 表示をカット
//			LoadArg("map/mp1201/mp1201.arg")
//			EventCue("mp1201:Speedrun_Rex_Meet")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
////		//★PS4追加
////		//▼ハックして制圧戦強制イベントを起動
////		if(	FLAG[GF_03MP1201_TALK_KATRIN] &&		//カトリーンに相談する
////			!FLAG[GF_QS303_QUESTEVENT] )			// 制圧戦強制イベントを見た
////		{
////			WarpCancel()
////
////			SetStopFlag(STOPFLAG_NOEXTERIOR)
////			SetStopFlag(STOPFLAG_SIMPLEEVENT)
////		
////			// ワープする場合はリセット
////			ResetMotion( "ALL", 1 )		// モーション初期化
////			StopEffect( -1, "ALL", 1 )	// エフェクト停止
////			StopEmotion( "ALL" )		// エモーション停止
////
////			SetStopFlag(STOPFLAG_SIMPLEEVENT)
////			FadeOut(FADE_BLACK,0)
////			Wait(15)
////
////			EventCue("mp1201:QS_303_Start")
////			//LoadArg("map/mp1201/mp1201.arg")
////			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
////		}
//		
//		//▼ハックして[M03S071][ジャンダルムへ出発するを起動
//		else if (FLAG[GF_03MP1201_GOTO_GENSD] &&	//[M03S070][ジャンダルムへ向かうことになる]
//		!FLAG[GF_03MP1101_LEAVE_CAMP] &&			//[M03S071][ジャンダルムへ出発する]
//		FLAG[TF_MENU_SELECT] != CP_MP7303 &&		//ここには飛べる：水音の洞窟
//		FLAG[TF_MENU_SELECT] != CP_MP1201_02 ){		//ここには飛べる：漂流村
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1101/mp1101.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックして[M02S540][カーラン卿の救出に向かう]を起動
//		else if (FLAG[GF_02MP1201_LOOK_CURRAN] &&	//[M02S530][カーランを発見する				]
//		!FLAG[GF_02MP1101_START_RESCUE] &&			//[M02S540][カーラン卿の救出に向かう			]
//		FLAG[TF_MENU_SELECT] != CP_MP7303 &&		//ここには飛べる：水音の洞窟
//		FLAG[TF_MENU_SELECT] != CP_MP1201_02 ){		//ここには飛べる：漂流村
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1101/mp1101.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼ハックして【QS220】見張り台の建設（バルバロス）▼クエスト開始イベントを起動
//		else if (FLAG[GF_02MP1201_JOIN_KATRIN] &&			//[M02S231][武器の強化が可能になる２			]
//		!FLAG[GF_02MP1201_TUTO_QS220] &&					//[M03S071][ジャンダルムへ出発する]
//		FLAG[TF_MENU_SELECT] != CP_MP7303 &&				//ここには飛べる：水音の洞窟
//		FLAG[TF_MENU_SELECT] != CP_MP1201_02 ){				//ここには飛べる：漂流村
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			
//			SetFlag( TF_LOADING_TIPS_OFF, 1 )	//NowLoading 時の Tips 表示をカット
//			LoadArg("map/mp1201/mp1201.arg")
//			EventCue("mp1201:Tuto_Barbaross")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//
//		//▼ハックして[M02S060][漂流者の探索を始める]を起動
//		else if (FLAG[GF_02MP1201_INFO_QUEST] &&	//[M02S050][クエストチュートリアル]
//		!FLAG[GF_02MP1101_START_EXPLORE] &&			//[M02S060][漂流者の探索を始める]
//		FLAG[TF_MENU_SELECT] != CP_MP7303 &&		//ここには飛べる：水音の洞窟
//		FLAG[TF_MENU_SELECT] != CP_MP1201_02 ){		//ここには飛べる：漂流村
//
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1101/mp1101.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//▼通常通りワープした場合の処理
//		else {
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			ResetStopFlag(STOPFLAG_NOEXTERIOR)
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		//水音の洞窟へのワープをハックしてmp1201へ飛ばす
//		if(!FLAG[GF_NPC_7_01_GOTO_TEM])		//エピローグでは発生しない
//		{
//			//過去編Ⅶ追加
//			// 2018.07.03 m.arai イベント条件を変更
//			//if (FLAG[GF_06MP6350_IN_GARDEN]					
//			if (FLAG[GF_NPC_6_04_GET_MISTILTEINN]					// 想剣を手に入れた後
//			&&  FLAG[GF_SUBEV_PAST_MONOLITH_B5]
//			&& !FLAG[GF_SUBEV_PAST_07_ADD]
//			&&  FLAG[TF_MENU_SELECT] == CP_MP7303 )		//水音の洞窟にワープしたとき
//			{
//				WarpCancel()
//
//				SetStopFlag(STOPFLAG_NOEXTERIOR)
//				SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			
//				// ワープする場合はリセット
//				ResetMotion( "ALL", 1 )		// モーション初期化
//				StopEffect( -1, "ALL", 1 )	// エフェクト停止
//				StopEmotion( "ALL" )		// エモーション停止
//
//				SetStopFlag(STOPFLAG_SIMPLEEVENT)
//				FadeOut(FADE_BLACK,0)
//				Wait(15)
//				LoadArg("map/mp1201/mp1201.arg")
//				SetFlag(SF_LASTENTRY_NO,100)		//マップワープに偽装
//
//				ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//			}
//			//制圧戦３追加
//			else if (FLAG[GF_NPC_6_04_GET_MISTILTEINN] && !FLAG[GF_SUBEV_CONTROL3_START]		//ミストルティン入手後
//			&& FLAG[GF_CLEAR_CONTROL32] && FLAG[GF_CLEAR_CONTROL34] && FLAG[GF_CLEAR_CONTROL36]	//制圧戦１～６をクリアしている
//			&& FLAG[TF_MENU_SELECT] == CP_MP7303 )
//			{
//				WarpCancel()
//
//				SetStopFlag(STOPFLAG_NOEXTERIOR)
//				SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			
//				// ワープする場合はリセット
//				ResetMotion( "ALL", 1 )		// モーション初期化
//				StopEffect( -1, "ALL", 1 )	// エフェクト停止
//				StopEmotion( "ALL" )		// エモーション停止
//
//				SetStopFlag(STOPFLAG_SIMPLEEVENT)
//				FadeOut(FADE_BLACK,0)
//
//				SetFlag(SF_LASTENTRY_NO,100)
//
//				Wait(15)
//				LoadArg("map/mp1201/mp1201.arg")
//				SetFlag(SF_LASTENTRY_NO,100)		//マップワープに偽装
//
//				ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//			}
//		}
//		if (FLAG[GF_05MP0405_READ_REED] &&			//キャプテン・リードと別れる２
//		 !FLAG[GF_05MP1202_CHECK_MAP] &&			//大空洞へ向かうことになる２
//		 FLAG[TF_MENU_SELECT] == CP_MP7303 ){		//水音の洞窟にワープしたとき
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1201/mp1201.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//		else if (FLAG[GF_05MP6330_LOOK_MONOLITH] &&			//ダーナがモノリスを起動する
//		 !FLAG[GF_05MP1201_NOTICE_MIST] &&			//漂流村の騒がしさに気づく
//		 FLAG[TF_MENU_SELECT] == CP_MP7303 ){		//水音の洞窟にワープしたとき
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1201/mp1201.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		else if (FLAG[GF_03MP7401_GET_MATERIAL] &&	//[M03S220][化石を調べる]
//		 !FLAG[GF_03MP1201_ALARM_INTERCEPT] &&		//[M03S231][警鐘が鳴り響く]
//		 FLAG[TF_MENU_SELECT] == CP_MP7303 ){		//水音の洞窟にワープしたとき
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1201/mp1201.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//
//		else if (FLAG[GF_03MP4202_JOIN_RICOTTA] &&			//リコッタの話を聞く
//		 !FLAG[GF_03MP1201_TALK_KATRIN] &&			//カトリーンに相談する
//		 FLAG[TF_MENU_SELECT] == CP_MP7303 ){		//水音の洞窟にワープしたとき
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1201/mp1201.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//		else if (FLAG[GF_02MP1305_CALL_PARO] &&			//パロの緊急連絡（迎撃戦）
//		 !FLAG[GF_02MP1201_BEFORE_INTERCEPT] &&			//迎撃戦を行うことになる
//		 FLAG[TF_MENU_SELECT] == CP_MP7303 ){		//水音の洞窟にワープしたとき
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1201/mp1201.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//		else if (FLAG[GF_01MP1103_JOIN_SAHAD] &&			//古代種が起き上がる
//		 !FLAG[GF_01MP1201_JOIN_DOGI] &&			//ドギと再会する２
//		 FLAG[TF_MENU_SELECT] == CP_MP7303 ){		//水音の洞窟にワープしたとき
//			WarpCancel()
//
//			SetStopFlag(STOPFLAG_NOEXTERIOR)
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//		
//			// ワープする場合はリセット
//			ResetMotion( "ALL", 1 )		// モーション初期化
//			StopEffect( -1, "ALL", 1 )	// エフェクト停止
//			StopEmotion( "ALL" )		// エモーション停止
//
//			SetStopFlag(STOPFLAG_SIMPLEEVENT)
//			FadeOut(FADE_BLACK,0)
//			Wait(15)
//			LoadArg("map/mp1201/mp1201.arg")
//			ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//		}
//	}
}

/////////////////////////////////////
// 地図メニューでワープ禁止の水晶石を選択した
function "sys_warpdisable"
{
	// ワープ禁止中のみここにくる。
	// TF_MENU_SELECT に 選択したワープＩＤ（CP_MP1201_01等）が入っている。
	// TF_MENU_SELECT2 には以下の情報が格納される。
	//			0 : 場所は問題無し
	//			1 :「南側にいる状態で北側のポイントを選択した」
	//			2 :「北側にいる状態で南側のポイントを選択した」
	// 状況毎にメッセージを変えたい場合は判断が必要。

	// ①シナリオ進行状況別、意図的に禁じている場所のチェック
	//if (FLAG[シナリオ進行フラグ] && !FLAG[シナリオ進行フラグ])
	//{
	//	if (FLAG[TF_MENU_SELECT] == CP_MPxxxx)
	//	{
	//		// 意図的に封じている場所 1
	//		Message("今はそんな所に寄っている暇はない。")
	//		WaitPrompt()
	//		SetFlag(TF_MENU_SELECT, -1)		// 処理したマーク
	//	}
	//}
	
	// ②南北移動判定
	//if (!FLAG[SF_CANUSE_MAPWARP] && FLAG[TF_MENU_SELECT] != -1)
	//{
	//	if (FLAG[TF_MENU_SELECT2] == 1)
	//	{
	//		Message("南側から北側には直接移動できません。")
	//		WaitPrompt()
	//		SetFlag(TF_MENU_SELECT, -1)		// 処理したマーク
	//	}
	//	else if (FLAG[TF_MENU_SELECT2] == 2)
	//	{
	//		Message("北側から南側には直接移動できません。")
	//		WaitPrompt()
	//		SetFlag(TF_MENU_SELECT, -1)		// 処理したマーク
	//	}
	//}
	
	// ③例外
	if (FLAG[TF_MENU_SELECT] != -1)
	{
		// ①②で処理したマークが付いていなかった　＝　判定抜けてきた。①での記述漏れの可能性が高いが・・・。

		// ◆キャンセルＳＥを鳴らす
		PlaySE( SE_CANCEL , 100 , 0,  0, 0, 1.0f, 0)	//cancel

	}
	
}

///////////////////////////////////////////////////////////////
// 迎撃戦、柵壊された
///////////////////////////////////////////////////////////////
function "itcfencebroken"
{
/////////////////////////////////////////////////////////////////////////
// 必須迎撃戦の場合、直後にsystem:gameoverが呼ばれます。
// このスクリプトが長時間に渡って動くような動作はしないようにして下さい。
/////////////////////////////////////////////////////////////////////////

	SetStopFlag(STOPFLAG_CAMERA)
	Slow(0.75f)
	CrossFade(45)
	CallFunc("system:party_reset")

	if(FLAG[100] == 0)	//TF_MAPCHECK		//LEADER.CHRWORK[CWK_POSZ] < 25 )	//海側だった場合
	{
		MoveCameraAt( 0 , -29.913f , -1498.846f , 7.388f , 0 )	// 注視点
		ChangeCameraDistance( 0 , 7.000f , 0 )		// 基本距離
		ChangeCameraElevation( 0 , -7.723f , 0 )	// 基本仰角
		RotateCamera( 0 , 254.746f , 0 )				// 角度
		ChangeCameraPers( 0 , 60.000f , 0 )			// 視野角
		SetCameraZPlane( 0.100f , 300.000f )			// ZPlane
		RollCamera( 0 , 0.0f , 0 )				// ロール回転

		ExecuteCmd(1000, MoveCameraAt, INTERPOLATE_SPHERE ,-28.470f , -1495.792f , 9.025f , 100 )
		ExecuteCmd(1001, ChangeCameraDistance, INTERPOLATE_SPHERE , 7.000f , 100 )
		ExecuteCmd(1002, ChangeCameraElevation, INTERPOLATE_SPHERE , -2.979f , 100 )
		ExecuteCmd(1003, RotateCamera, INTERPOLATE_SPHERE , 233.903f , 100 )
		ExecuteCmd(1004, RollCamera, INTERPOLATE_SPHERE , 2.5f , 100)

		//MoveCameraAt( 0 , -28.470f , -1495.792f , 9.025f , 0 )	// 注視点
		//ChangeCameraDistance( 0 , 7.000f , 0 )		// 基本距離
		//ChangeCameraElevation( 0 , -2.979f , 0 )	// 基本仰角
		//RotateCamera( 0 , 233.903f , 0 )				// 角度
		//ChangeCameraPers( 0 , 60.000f , 0 )			// 視野角
		//SetCameraZPlane( 0.100f , 300.000f )			// ZPlane
		//RollCamera( 0 , 2.5f , 0 )				// ロール回転

		WaitThread(1000)
		WaitThread(1001)
		WaitThread(1002)
		WaitThread(1003)
		WaitThread(1004)
	}
	else {		//山側だった場合
	
		MoveCameraAt( 0 , -64.150f , -1389.296f , 51.079f , 0 )	// 注視点
		ChangeCameraDistance( 0 , 12.781f , 0 )		// 基本距離
		ChangeCameraElevation( 0 , 5.319f , 0 )	// 基本仰角
		RotateCamera( 0 , 178.716f , 0 )				// 角度
		ChangeCameraPers( 0 , 60.000f , 0 )			// 視野角
		SetCameraZPlane( 0.100f , 300.000f )			// ZPlane
		RollCamera( 0 , -4.3f , 0 )				// ロール回転

		ExecuteCmd(1000, MoveCameraAt, INTERPOLATE_SPHERE , -62.111f , -1390.921f , 52.394f , 100 )
		ExecuteCmd(1001, ChangeCameraDistance, INTERPOLATE_SPHERE , 13.103f , 100 )
		ExecuteCmd(1002, ChangeCameraElevation, INTERPOLATE_SPHERE , 5.138f , 100 )
		ExecuteCmd(1003, RotateCamera, INTERPOLATE_SPHERE , 93.861f , 100)
		ExecuteCmd(1004, RollCamera, INTERPOLATE_SPHERE , 5.0f , 100)
	
		//MoveCameraAt( 0 , -62.111f , -1390.921f , 52.394f , 0 )	// 注視点
		//ChangeCameraDistance( 0 , 13.103f , 0 )		// 基本距離
		//ChangeCameraElevation( 0 , 5.138f , 0 )	// 基本仰角
		//RotateCamera( 0 , 93.861f , 0 )				// 角度
		//ChangeCameraPers( 0 , 60.000f , 0 )			// 視野角
		//SetCameraZPlane( 0.100f , 300.000f )			// ZPlane
		//RollCamera( 0 , 5.0f , 0 )				// ロール回転

		WaitThread(1000)
		WaitThread(1001)
		WaitThread(1002)
		WaitThread(1003)
		WaitThread(1004)
	}
	Slow(1.0f)
//	ResetStopFlag(STOPFLAG_CAMERA)
//	FadeOut(FADE_BLACK,10)
//	WaitFade()
//	CallFunc("system:camera_reset")
//	ResetStopFlag(STOPFLAG_CAMERA)
}

///////////////////////////////////////////////////////////////
// ゲームオーバー
///////////////////////////////////////////////////////////////
function "gameover"
{
	/////////////////////////////////////////////////////////////////////////
	// 敗北時に別のイベントにつなげたい場合はここでフラグ判定して
	// EventCueで任意のスクリプトに飛ばしてください。
	// 現在は判定対象が無いので、意図的に if(0) にしています。
	/////////////////////////////////////////////////////////////////////////
//	if (FLAG[GF_10M1335_BATTLE_SAIAS] == 1)	//サイアス戦で負けた時
//	{
//		EventCue("mp_1336:ev1005_after_saias")
//	}
	if( FLAG[GF_SPEEDRUN_SKILL_BATTLE] )			// やり込みスキル習得：戦闘中管理用（1＝戦闘中）
	{
		if( FLAG[GF_QS400_KONG_LV] == 1 )			// マスターコングのキャラモード（1=サハド）
		{
			EventCue("mp1119:Speedrun_Monkey2_Lose")
		}
		else if( FLAG[GF_QS400_KONG_LV] == 2 )		// マスターコングのキャラモード（2=ダーナ）
		{
			EventCue("mp1118:Speedrun_Monkey3_Lose")
		}
		else if( FLAG[GF_QS400_KONG_LV] == 3 )		// マスターコングのキャラモード（3=ラクシャ）
		{
			EventCue("mp4341:Speedrun_Monkey4_Lose")
		}
		else if( FLAG[GF_QS400_KONG_LV] == 4 )		// マスターコングのキャラモード（4=ヒュンメル）
		{
			EventCue("mp6112:Speedrun_Monkey5_Lose")
		}
		else										// マスターコングのキャラモード（5=アドル）
		{
			EventCue("mp5104:Speedrun_Monkey6_Lose")
		}
	}
	else if( FLAG[GF_QUEST_400] == QUEST_START && 	// 【QS400】ししょーへの献上（リコッタ）
		FLAG[GF_QS400_QUEST_BATTLE] )				// 【QS400】クエスト戦闘状態判定用
	{
		EventCue("mp1135:QS_400_Lose")
	}
	else if( FLAG[GF_QUEST_611] == QUEST_START && 	// 【QS611】老いらくの剣（シルヴィア）
		FLAG[GF_QS611_QUEST_BATTLE] )				// 【QS611】クエスト戦闘状態判定用
	{
		EventCue("mp1213:QS_611_Lose")
	}
//	else if ( FLAG[SF_EVENT_ON] && FLAG[GF_MP61xx_GIMMICK_RAIU_TRY] && FLAG[GF_04SD2120_4_24_TRY_SANCT] && !FLAG[GF_04MP6114_4_25_JOIN_CANLILICA] )
//	{
//		Wait(30)
//		FadeOut(FADE_BLACK,15)
//		WaitFade()
//
//		LoadArg("map/mp6114/mp6114.arg")
//		EventCue("mp6114:EV04_25_Join_Canlilica")
//	}
	else
	{
		// 敗北処理が無いときは通常のゲームオーバー処理
		Wait(30)
		GameOver()
	}
}

///////////////////////////////////////////////////////////////
// 迎撃戦受付時間切れ
///////////////////////////////////////////////////////////////
function "InterceptTimeOver"		//迎撃戦受付時間切れ
{
//	if (FLAG[GF_HOGE1] && !FLAG[GF_HOGE2])
//	{
//		// フラグGF_HOGE1～GF_HOGE2の間に時間切れになった時の処理
//	}
//
//	// テスト
//	Message("獣たちが漂流村を襲撃した。")

	//迎撃戦発生フラグ制御
	CallFunc("system:InterceptEndFlag")
}

///////////////////////////////////////////////////////////////
// 任意迎撃戦をスルーした場合に終了フラグを立てる
///////////////////////////////////////////////////////////////
function "InterceptEndFlag"
{
	//mp4309
	if(FLAG[GF_02MP43xx_OCCUR_INTERCEPT2] ||	// ☆第二部Ｆ迎撃戦②
		FLAG[GF_TBOX_DUMMY074] ){		//浸食谷クモボスを撃破

		if(!FLAG[GF_02MP43xx_AFTER_INTERCEPT2])
		{
			SetFlag( GF_02MP43xx_AFTER_INTERCEPT2 , 1)
			//Intercept(INTERCEPT_STAGE02, 2)
			//Intercept(INTERCEPT_STAGE02, 0)
		}
	}

	//mp2308
	if(FLAG[GF_02MP23xx_OCCUR_INTERCEPT3] ||	// ☆第二部Ｆ迎撃戦③
		FLAG[GF_02MP2308_KILL_HIPPO]) {			//密林ボスを倒した

		if(!FLAG[GF_02MP23xx_AFTER_INTERCEPT3])
		{
			SetFlag( GF_02MP23xx_AFTER_INTERCEPT3 , 1)
			//Intercept(INTERCEPT_STAGE03, 2)
			//Intercept(INTERCEPT_STAGE03, 0)
		}
	}

	//mp4202
	if(FLAG[GF_03MP433x_OCCUR_INTERCEPT5] ||	// ☆第三部Ｆ迎撃戦⑤
		FLAG[GF_03MP4202_JOIN_RICOTTA] ){		// リコッタの話を聞く

		if(!FLAG[GF_03MP433x_AFTER_INTERCEPT5])
		{
			SetFlag( GF_03MP433x_AFTER_INTERCEPT5 , 1)
			//Intercept(INTERCEPT_STAGE05, 2)
			//Intercept(INTERCEPT_STAGE05, 0)
		}
	}

	//mp6204
	if(FLAG[GF_04MP5101_OCCUR_INTERCEPT7] ||	// ☆第四部Ｆ迎撃戦⑦
		FLAG[GF_04MP6204_SEE_THANATOS]) {		//橋の上でタナトスに出会う２

		if(!FLAG[GF_04MP5101_AFTER_INTERCEPT7])
		{
			SetFlag( GF_04MP5101_AFTER_INTERCEPT7 , 1)
			//Intercept(INTERCEPT_STAGE07, 2)
			//Intercept(INTERCEPT_STAGE07, 0)
		}
	}

	//mp0405
//	if(FLAG[GF_05MP1201_OCCUR_INTERCEPT9] ||	// ☆第五部Ｆ迎撃戦⑨
//		FLAG[GF_05MP7411_SAIL_GHOSTSHIP] ){		// エレフセリア号が出航する
	if(	FLAG[GF_05MP7411_SAIL_GHOSTSHIP] ){		// エレフセリア号が出航する

		if(!FLAG[GF_05MP1201_AFTER_INTERCEPT9])
		{
			SetFlag( GF_05MP1201_OCCUR_INTERCEPT9 , 1) //「☆第五部Ｆ迎撃戦⑨が発生」が立っていない場合があるので、一緒に立てる
			SetFlag( GF_05MP1201_AFTER_INTERCEPT9 , 1)
			//Intercept(INTERCEPT_STAGE09, 2)
			//Intercept(INTERCEPT_STAGE09, 0)
		}
	}

	//mp6310b
	if(FLAG[GF_06MP6409_OCCUR_INTERCEPT12] ||	// ★第六部Ｆ迎撃戦⑫
		FLAG[GF_07MP1202_AWAKE_ADOL]){			//漂流村でアドルが目を覚ます

		if(!FLAG[GF_TBOX_DUMMY088])
		{
			SetFlag( GF_TBOX_DUMMY088 , 1)
			//Intercept(INTERCEPT_STAGE12, 2)
			//Intercept(INTERCEPT_STAGE12, 0)
		}
	}

	//-------------------------
	//mp1201
	if(FLAG[GF_06MP1201_OCCUR_INTERCEPT21] ||	// 21
		FLAG[GF_07MP1202_AWAKE_ADOL]){			//漂流村でアドルが目を覚ます

		if(!FLAG[GF_06MP1201_AFTER_INTERCEPT21])
		{
//			SetFlag( GF_06MP1201_AFTER_INTERCEPT21 , 1)
			//Intercept(INTERCEPT_STAGE21, 2)
			//Intercept(INTERCEPT_STAGE21, 0)
		}
	}
	//mp1201
	if(FLAG[GF_06MP1201_OCCUR_INTERCEPT22] ||	// 22
		FLAG[GF_07MP1202_AWAKE_ADOL]){			//漂流村でアドルが目を覚ます

		if(!FLAG[GF_06MP1201_AFTER_INTERCEPT22])
		{
//			SetFlag( GF_06MP1201_AFTER_INTERCEPT22 , 1)
			//Intercept(INTERCEPT_STAGE22, 2)
			//Intercept(INTERCEPT_STAGE22, 0)
		}
	}
	//mp1201
	if(FLAG[GF_06MP1201_OCCUR_INTERCEPT23] ||	// 23
		FLAG[GF_07MP1202_AWAKE_ADOL]){			//漂流村でアドルが目を覚ます

		if(!FLAG[GF_06MP1201_AFTER_INTERCEPT23])
		{
//			SetFlag( GF_06MP1201_AFTER_INTERCEPT23 , 1)
			//Intercept(INTERCEPT_STAGE23, 2)
			//Intercept(INTERCEPT_STAGE23, 0)
		}
	}
	//mp1201
	if(FLAG[GF_06MP1201_OCCUR_INTERCEPT24] ||	// 24
		FLAG[GF_07MP1202_AWAKE_ADOL]){			//漂流村でアドルが目を覚ます

		if(!FLAG[GF_06MP1201_AFTER_INTERCEPT24])
		{
//			SetFlag( GF_06MP1201_AFTER_INTERCEPT24 , 1)
			//Intercept(INTERCEPT_STAGE24, 2)
			//Intercept(INTERCEPT_STAGE24, 0)
		}
	}
	//mp1201
	if(FLAG[GF_06MP1201_OCCUR_INTERCEPT25] ||	// 25
		FLAG[GF_07MP1202_AWAKE_ADOL]){			//漂流村でアドルが目を覚ます

		if(!FLAG[GF_06MP1201_AFTER_INTERCEPT25])
		{
//			SetFlag( GF_06MP1201_AFTER_INTERCEPT25 , 1)
			//Intercept(INTERCEPT_STAGE25, 2)
			//Intercept(INTERCEPT_STAGE25, 0)
		}
	}
	//mp1201
	if(FLAG[GF_06MP1201_OCCUR_INTERCEPT26] ||	// 26
		FLAG[GF_07MP1202_AWAKE_ADOL]){			//漂流村でアドルが目を覚ます

		if(!FLAG[GF_06MP1201_AFTER_INTERCEPT26])
		{
//			SetFlag( GF_06MP1201_AFTER_INTERCEPT26 , 1)
			//Intercept(INTERCEPT_STAGE26, 2)
			//Intercept(INTERCEPT_STAGE26, 0)
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// テント台詞
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// 寝言ボイス
function "TentVoice_Sleep"
{
	Wait(45)//少し間を挟む
	// 喋らせる人をランダムで選出
	SetFlag( TF_VOICEPLY_CHR, 0)			// 必要ないがおまじない
	SetFlag( TF_VOICEPLY_CHR, (WORK[WK_RANDJOINMB_NOADOL]))
	
	// 寝言は長いので長さに合わせて少し待つ
	if(FLAG[TF_VOICEPLY_CHR] == SAHAD)	// サハドが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_SHD_SLEEP,"SAHAD",45)		// 「…ガハハ…今日も…大漁だ…」
			Wait(120)
		} else {
			PlayVoice(SVO_SHD_SLEEP_2,"SAHAD",45)		// 「…ダミア…テティ…」
			Wait(60)
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == LAXIA)	// ラクシャが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_LXA_SLEEP,"LAXIA",45)		// 「父…上…一体どこへ…」
			Wait(170)
		} else {
			PlayVoice(SVO_LXA_SLEEP_2,"LAXIA",45)		// 「子供あつか…しないでくださ…」
			Wait(132)
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == HUMMEL)	// ヒュンメルが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_HML_SLEEP,"HUMMEL",45)		// 「汚れが…気になるな…」
			Wait(88)
		} else {
			PlayVoice(SVO_HML_SLEEP_2,"HUMMEL",45)		// 「必ず…達成…」
			Wait(90)
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == RICOTTA)	// リコッタが喋っていい
	{
		if(rand()%100 < 50) {
			Wait(30)
			PlayVoice(SVO_RCT_SLEEP,"RICOTTA",45)		// 「父上…」
			Wait(40)
		} else {
			PlayVoice(SVO_RCT_SLEEP_2,"RICOTTA",45)		// 「おいしい…たくさん…夢みたい…」
			Wait(160)
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == DANA)	// ダーナが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_DNA_SLEEP,"DANA",45)		// 「オルガちゃん…サライちゃん…」
			Wait(80)
		} else {
			PlayVoice(SVO_DNA_SLEEP_2,"DANA",45)		// 「アドルさん…会えてよかった…」
			Wait(80)
		}
	}
	else //if(FLAG[TF_VOICEPLY_CHR] == ADOL)		//アドルが喋っていい(もしもの場合を考えてelseにしてます)
	{
		// アドル台詞無し
	}
	
	// アドル以外なら少し待つ
	if(FLAG[TF_VOICEPLY_CHR] != ADOL) {
		Wait(60)
	}
}

/////////////////////////////////////
// メニュー内チュートリアル・警告メッセージ

// 編成：EXスキル使用中
function "TutorialMes01"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//Message("※EXTRAスキル使用中のキャラクターは変更できません。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※EXTRAスキル使用中のキャラクターは変更できません。#10W"
		"変更2行目"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 編成：すべて死亡キャラ
function "TutorialMes02"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//Message("※行動メンバーが全員戦闘不能の構成にはできません。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※行動メンバーが全員戦闘不能の構成にはできません。#10W"
		"全員戦闘不能2行目"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 編成：リーダーが戦闘不能←０ｘ５ｃ
function "TutorialMes03"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//Message("※戦闘不能キャラをリーダーにすることはできません。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※戦闘不能キャラをリーダーにすることはできません。#10W"
		"戦闘不能2行目"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 編成：セーブ禁止中に編成
function "TutorialMes04"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//Message("※今は編成を利用することができません。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※今は編成を利用することができません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// チュートリアル：スキル装備
function "TutorialMes05"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
//	Message("スキル画面を開き、スキルをセットしてください。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4Cスキル画面を開き、スキルをセットしてください。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// チュートリアル：防具装備
function "TutorialMes06"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//Message("装備画面を開き、防具をセットしてください。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#-1W#4C装備画面を開き、アドルとラクシャに"
		"#4C防具をセットしてください。#10W"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 装備：同系統効果のアクセサリ装備警告
function "TutorialMes07"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//Message("同じ効果のアクセサリは複数装備できません。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C同じ効果のアクセサリは複数装備できません。#10W"
		"複数2行目"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 装備：同部位の衣装アクセサリ装備警告
function "TutorialMes08"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C同じ部位に、既に別のアタッチアイテムが装備されています。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 装備：他スロットと同じアイテム装備警告
function "TutorialMes09"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C同じアイテムは２つ装備できません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}


// スクリプト溜まっている時に意識交代禁止
function "TutorialMes10"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C今は選択することができません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 編成：ツタ登り中に編成
function "TutorialMes11"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//Message("※今は編成を利用することができません。")
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※今は編成を利用することができません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// ボスラッシュ：難易度変更しようとした
function "TutorialMes12"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※タイムアタック中は難易度を変更することができません。#10W"
		"難易度2行目"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// キーコンフィグ：キャンプボタンの割り当て1は固定
function "TutorialMes13"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※キャンプメニューの割り当てを変更することはできません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 作成系ショップ：所持数以上は作成できない
function "TutorialMes14"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#-1W#4C所持数が最大です。"
		"#4Cこれ以上アイテムを作成することはできません。#10W"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}
// 交換系ショップ：所持数以上は交換できない
function "TutorialMes15"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#-1W#4C所持数が最大です。"
		"#4Cこれ以上アイテムを交換することはできません。#10W"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}

// 個々から新規追加 2018.03.02 m.arai
// キーコンフィグ：移動ボタンの割り当ては固定
function "TutorialMes16"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※移動の割り当てを変更することはできません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}
// キーコンフィグ：ターゲット切り替えボタンの割り当ては固定
function "TutorialMes17"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※ターゲット切り替えの割り当てを変更することはできません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}
// キーコンフィグ：キーボードコンフィグ「スキル」「EXTRAスキル」は変更不可に
function "TutorialMes18"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※キーボードでの操作はスキルショートカットを使用してください。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}
// キーコンフィグ：カメラ移動ボタンの割り当ては固定
function "TutorialMes19"
{
	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	TalkPopup(UNDEF,0,5,0,0,0)
	{
		"#8S"
		"#-1W#4C※カメラ移動の割り当てを変更することはできません。#10W"
		"#8S"
	}
	Wait(10)
	WaitPrompt()
	WaitCloseWindow()
}
//ここまで

//////////////////////////////////////////////////////////////////////////////////
//// クエスト											※mp433x.scpへ遷移しました
//////////////////////////////////////////////////////////////////////////////////
////===============================================================
////
//// 【QS310】試作品の性能テスト（エアラン）
//// ▼リアルタイムテキスト
////
//function "QS_310_kill_A"
//{
//	//古代種：スパイク竜（M1000）を倒したときの判定処理
//	if( FLAG[GF_QUEST_310] == QUEST_START &&	//【QS310】試作品の性能テスト（エアラン）　クエスト進行中
//		!FLAG[GF_QS310_KILL_ANCIENT_1] )		//【QS310】ジャンダルムにいる古代種を倒した１
//	{
//		// 陽色の護符を装備しているかのチェック
//		if(( WORK[WK_ISEXIST_PLAYER1] &&							// プレイヤー1が存在する（死んでいる場合も存在しない扱い。）
//		   ( PLAYER1.CHRWORK[CWK_ACCESSORY1] == ICON3D_AC_000 ||	// ◆仮入力：アクセサリー番号は仮です
//			 PLAYER1.CHRWORK[CWK_ACCESSORY2] == ICON3D_AC_000 ))||	// ◆仮入力：アクセサリー番号は仮です
//		   ( WORK[WK_ISEXIST_PLAYER2] &&							// プレイヤー2が存在する（死んでいる場合も存在しない扱い。）
//		   ( PLAYER2.CHRWORK[CWK_ACCESSORY1] == ICON3D_AC_000 ||	// ◆仮入力：アクセサリー番号は仮です
//			 PLAYER2.CHRWORK[CWK_ACCESSORY2] == ICON3D_AC_000 ))||	// ◆仮入力：アクセサリー番号は仮です
//		   ( WORK[WK_ISEXIST_PLAYER3] &&							// プレイヤー3が存在する（死んでいる場合も存在しない扱い。）
//		   ( PLAYER3.CHRWORK[CWK_ACCESSORY1] == ICON3D_AC_000 ||	// ◆仮入力：アクセサリー番号は仮です
//			 PLAYER3.CHRWORK[CWK_ACCESSORY2] == ICON3D_AC_000 )))	// ◆仮入力：アクセサリー番号は仮です
//		{
//			SetFlag(GF_QS310_KILL_ANCIENT_1, 1)		//【QS310】ジャンダルムにいる古代種を倒した１
//			if( FLAG[GF_QS310_KILL_ANCIENT_2] )		//【QS310】ジャンダルムにいる古代種を倒した２
//			{
//				CallFunc("system:QS_310_KillAncient")	//【QS310】▼リアルタイムテキスト
//			}
//		}
//	}
//}
//function "QS_310_kill_B"
//{
//	//古代種：（）を倒したときの判定処理	◆未入力：ジャンダルムにいる古代種で、スパイク竜じゃない方
//	if( FLAG[GF_QUEST_310] == QUEST_START &&	//【QS310】試作品の性能テスト（エアラン）　クエスト進行中
//		!FLAG[GF_QS310_KILL_ANCIENT_2] )		//【QS310】ジャンダルムにいる古代種を倒した２
//	{
//		// 陽色の護符を装備しているかのチェック
//		if(( WORK[WK_ISEXIST_PLAYER1] &&							// プレイヤー1が存在する（死んでいる場合も存在しない扱い。）
//		   ( PLAYER1.CHRWORK[CWK_ACCESSORY1] == ICON3D_AC_000 ||	// ◆仮入力：アクセサリー番号は仮です
//			 PLAYER1.CHRWORK[CWK_ACCESSORY2] == ICON3D_AC_000 ))||	// ◆仮入力：アクセサリー番号は仮です
//		   ( WORK[WK_ISEXIST_PLAYER2] &&							// プレイヤー2が存在する（死んでいる場合も存在しない扱い。）
//		   ( PLAYER2.CHRWORK[CWK_ACCESSORY1] == ICON3D_AC_000 ||	// ◆仮入力：アクセサリー番号は仮です
//			 PLAYER2.CHRWORK[CWK_ACCESSORY2] == ICON3D_AC_000 ))||	// ◆仮入力：アクセサリー番号は仮です
//		   ( WORK[WK_ISEXIST_PLAYER3] &&							// プレイヤー3が存在する（死んでいる場合も存在しない扱い。）
//		   ( PLAYER3.CHRWORK[CWK_ACCESSORY1] == ICON3D_AC_000 ||	// ◆仮入力：アクセサリー番号は仮です
//			 PLAYER3.CHRWORK[CWK_ACCESSORY2] == ICON3D_AC_000 )))	// ◆仮入力：アクセサリー番号は仮です
//		{
//			SetFlag(GF_QS310_KILL_ANCIENT_2, 1)		//【QS310】ジャンダルムにいる古代種を倒した２
//			if( FLAG[GF_QS310_KILL_ANCIENT_1] )		//【QS310】ジャンダルムにいる古代種を倒した１
//			{
//				CallFunc("system:QS_310_KillAncient")	//【QS310】▼リアルタイムテキスト
//			}
//		}
//	}
//}
//function "QS_310_KillAncient"
//{
//	//　　※『陽色の護符』を装備した状態で、ジャンダルムにいる古代種を
//	//　　　各１体ずつ倒すと以下のリアルタイムテキストが表示される。
//	//　　　また、手帳にもその旨が記載される。
//
////開始処理ここから----------------------------------------------------
//	SetStopFlag(STOPFLAG_SIMPLEEVENT)
//	SetStopFlag(STOPFLAG_FREEZE)
//	ResetMoveVec("PARTYALL")
//
////開始処理ここまで-----------------------------------------------
//
//	//	リアルタイムテキスト
//	PlaySE( SE_QUEST_ITEM, 100, 0 ,  0, 0, 1.0f, 0)	// sound: 
//	Message("#4Cクエスト#8C【試作品の性能テスト】#4Cの\n条件を達成した！")
//	WaitPrompt()
//	Wait(10)
//
////終了処理ここから----------------------------------------------------
//
//	ResetStopFlag(STOPFLAG_FREEZE)
//	ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//}



////===============================================================
//▼初めてＴのメモを見つけたメッセージ
////===============================================================
function "SubEV_FirstTalk_T_Memo"
{
	//　　※第二部の「▼見張り台を発見する」以降は表示されなくなる。
	//　　ストッパーメッセージと同じ形式で
	//　　画面下固定ウィンドウで表示する。
	if( !FLAG[GF_02MP3103_LOOK_LOOKOUT] && !FLAG[GF_SUBEV_MEMO_T_TALK] )
	{

		TalkPopup("SAHAD",0,3,STOPPER_PPOSX,STOPPER_PPOSY,0)
		{
			"#000e#000mこいつはもしかして……"
		}
		WaitPrompt()
		WaitCloseWindow()

		//	"LAXIA"
		TalkPopup("LAXIA",0,3,STOPPER_PPOSX,STOPPER_PPOSY,0)
		{
			"#000e#000mええ、わたくしたちより以前に"
			"流れ着いた人間が残したのでしょう……\p"
			"その人物がまだ生きているかは"
			"分かりませんが……"
		}
		WaitPrompt()
		WaitCloseWindow()

		SetFlag( GF_SUBEV_MEMO_T_TALK, 1 )		// Ｔのメモ：▼初めてＴのメモを見つけたメッセージ を見た
	}

}



////////////////////////////////////////////////////////////////////////////////
// クエスト達成ボイス
function "QuestVoice_Success"
{
	// 喋らせる人をランダムで選出
	SetFlag( TF_VOICEPLY_CHR, 0)			// 必要ないがおまじない
	SetFlag( TF_VOICEPLY_CHR, (WORK[WK_RANDJOINMB]))
	
	//クエスト達成にこのボイスをはさむ
	if(FLAG[TF_VOICEPLY_CHR] == SAHAD)	// サハドが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_SHD_QST_1,UNDEF,100)		// ガハハ、やったな！
		} else {
			PlayVoice(SVO_SHD_QST_2,UNDEF,100)	// こんなもんだろいっちょあがりだな！
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == LAXIA)	// ラクシャが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_LXA_QST_1,UNDEF,100)		// ふふ、やりましたね
		} else {
			PlayVoice(SVO_LXA_QST_2,UNDEF,100)		// ふふ、お疲れ様でした
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == HUMMEL)	// ヒュンメルが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_HML_QST_1,UNDEF,100)		// 任務完了──よくやったな
		} else {
			PlayVoice(SVO_HML_QST_2,UNDEF,100)		// フッ、大したものだ
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == RICOTTA)	// リコッタが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_RCT_QST_1,UNDEF,100)		// なはは、やったな！
		} else {
			PlayVoice(SVO_RCT_QST_2,UNDEF,100)		// これにて一件落着！
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == DANA)	// ダーナが喋っていい
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_DNA_QST_1,UNDEF,100)		// ふふ、やったね！
		} else {
			PlayVoice(SVO_DNA_QST_2,UNDEF,100)		// うんうん、上出来だね！
		}
	}
	else //if(FLAG[TF_VOICEPLY_CHR] == ADOL)		//アドルが喋っていい(もしもの場合を考えてelseにしてます)
	{
		if(rand()%100 < 50) {
			PlayVoice(SVO_ADL_QST_1,UNDEF,100)		// よし、やったぞ！
		} else {
			PlayVoice(SVO_ADL_QST_2,UNDEF,100)		// うん、上出来だ！
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// クエスト失敗ボイス
//function "QuestVoice_False"
//{
//	//クエスト失敗時にこのボイスをはさむ
//	
//	// 喋らせる人をランダムで選出
//	SetFlag( TF_VOICEPLY_CHR, 0)			// 必要ないがおまじない
//	SetFlag( TF_VOICEPLY_CHR, (WORK[WK_RANDBTLMB]))
//	
//	if(FLAG[TF_VOICEPLY_CHR] == SAHAD)	// デュレンが喋っていい
//	{
//		if(rand()%100 < 50) {
//			PlayVoice(RVO_DLN_QUEST_F1,"SAHAD",100)		// ありゃりゃ…
//		} else {
//			PlayVoice(RVO_DLN_QUEST_F2,"SAHAD",100)		// やっちまったな
//		}
//	}
//	else if(FLAG[TF_VOICEPLY_CHR] == LAXIA)	// カーナが喋っていい
//	{
//		if(rand()%100 < 50) {
//			PlayVoice(RVO_CRN_QUEST_F1,"LAXIA",100)		// …次は頑張ろ！
//		} else {
//			PlayVoice(RVO_CRN_QUEST_F2,"LAXIA",100)		// 失敗しちゃった…
//		}
//	}
//	else if(FLAG[TF_VOICEPLY_CHR] == HUMMEL)	// オズマが喋っていい
//	{
//		if(rand()%100 < 50) {
//			PlayVoice(RVO_OZM_QUEST_F1,"HUMMEL",100)		// くっ、失敗か…
//		} else {
//			PlayVoice(RVO_OZM_QUEST_F2,"HUMMEL",100)		// ダメだったか…
//		}
//	}
//	else if(FLAG[TF_VOICEPLY_CHR] == RICOTTA)	// カンリリカが喋っていい
//	{
//		if(rand()%100 < 50) {
//			PlayVoice(RVO_CNL_QUEST_F1,"RICOTTA",100)		// がっくしです…
//		} else {
//			PlayVoice(RVO_CNL_QUEST_F2,"RICOTTA",100)		// そんなぁー
//		}
//	}
//	else if(FLAG[TF_VOICEPLY_CHR] == DANA)	// フリーダが喋っていい
//	{
//		switch(rand() % 3)
//		{
//		case 0:
//			PlayVoice(RVO_FRD_QUEST_F1,"DANA",100)		// うーん、残念だったわね…
//			break;
//		case 1:
//			PlayVoice(RVO_FRD_QUEST_F2,"DANA",100)		// ダメね…
//			break;
//		case 2:
//			PlayVoice(RVO_NIN_QUEST_F1,"DANA",100)		// もう、何やってるのよ！
//			break;
//		}
//	}
//	else //if(FLAG[TF_VOICEPLY_CHR] == ADOL)		//アドルが喋っていい(もしもの場合を考えてelseにしてます)
//	{
//		if(rand()%100 < 50) {
//			PlayVoice(RVO_ADL_QUEST_F1,"ADOL",100)		// ダメだったか…
//		} else {
//			PlayVoice(RVO_ADL_QUEST_F2,"ADOL",100)		// 失敗したか…
//		}
//	}
//}

//////////////////////////////////////////////////////////////////////////////////
//// QS_304【スーパーな武器のテスト】【目標達成の処理】
//function "QS304_Success"
//{
//	SetStopFlag(STOPFLAG_SIMPLEEVENT)
//	SetStopFlag(STOPFLAG_FREEZE)
//	ResetMoveVec("PARTYALL")
//	
//	//　　※特定のモンスターを特定の数だけ倒した後は、
//	//　　　プログラム側で「system.scp」を呼び出してもらう予定。
//	//　　　スクリプトの該当箇所で、
//	//　　　「GF_QUEST_304 == QUEST_SUCCESS」にして
//	//　　　いつでもどこでも以下ナレーションを表示。
//	//	ナレーション
//	PlaySE( SE_QUEST_ITEM, 100, 0 ,  0, 0, 1.0f, 0)	// sound: 
//	Message("#4C試作武器を装備した状態で、\nランゴアを５体倒した！")
//	WaitPrompt()
//	Wait(10)
//	
//	SetFlag( GF_QUEST_304, QUEST_SUCCESS )
//	
//	SetFlag(GF_QS304_MEMO03, 1)		// クエスト手帳用フラグ QS_304【スーパーな武器のテスト】
//	
//	ResetStopFlag(STOPFLAG_FREEZE)
//	ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//}
//
//////////////////////////////////////////////////////////////////////////////////
//// QS_305【ミラクルな武器のテスト】【目標達成の処理】
//function "QS305_Success"
//{
//	SetStopFlag(STOPFLAG_SIMPLEEVENT)
//	SetStopFlag(STOPFLAG_FREEZE)
//	ResetMoveVec("PARTYALL")
//	
//	//　　※特定のモンスターを特定の数だけ倒した後は、
//	//　　　プログラム側で「system.scp」を呼び出してもらう予定。
//	//　　　スクリプトの該当箇所で、
//	//　　　「GF_QUEST_305 == QUEST_SUCCESS」にして
//	//　　　いつでもどこでも以下ナレーションを表示。
//	//	ナレーション
//	PlaySE( SE_QUEST_ITEM, 100, 0 ,  0, 0, 1.0f, 0)	// sound:
//	Message("#4C試作武器を装備した状態で、\nクロックルスを５体倒した！")
//	WaitPrompt()
//	Wait(10)
//	
//	SetFlag( GF_QUEST_305, QUEST_SUCCESS )
//	
//	SetFlag(GF_QS305_MEMO03, 1)		// クエスト手帳用フラグ QS_305【ミラクルな武器のテスト】
//	
//	ResetStopFlag(STOPFLAG_FREEZE)
//	ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//}
//
//////////////////////////////////////////////////////////////////////////////////
//// QS_306【ハイパーな武器のテスト】【目標達成の処理】
//function "QS306_Success"
//{
//	SetStopFlag(STOPFLAG_SIMPLEEVENT)
//	SetStopFlag(STOPFLAG_FREEZE)
//	ResetMoveVec("PARTYALL")
//	
//	//　　※特定のモンスターを特定の数だけ倒した後は、
//	//　　　プログラム側で「system.scp」を呼び出してもらう予定。
//	//　　　スクリプトの該当箇所で、
//	//　　　「GF_QUEST_306 == QUEST_SUCCESS」にして
//	//　　　いつでもどこでも以下ナレーションを表示。
//	//	ナレーション
//	PlaySE( SE_QUEST_ITEM, 100, 0 ,  0, 0, 1.0f, 0)	// sound:
//	Message("#4C試作武器を装備した状態で\nマドグラ・スレフを５体倒した！")
//	WaitPrompt()
//	Wait(10)
//	
//	SetFlag( GF_QUEST_306, QUEST_SUCCESS )
//	
//	SetFlag(GF_QS306_MEMO03, 1)		// クエスト手帳用フラグ QS_306【ハイパーな武器のテスト】
//	
//	ResetStopFlag(STOPFLAG_FREEZE)
//	ResetStopFlag(STOPFLAG_SIMPLEEVENT)
//}

////////////////////////////////////////////////////////////////////////////////
// ■支援イベント：▼支援イベント共通処理①
function "SubEV_Sien_Common1"
{
	//──────────────────────────────
	//▼支援イベント共通処理①
	//──────────────────────────────

	if(!FLAG[TF_SIENEVENT])		//通常版の支援イベント
	{
		FadeBGM(70, 30)

		//　　画面暗転して以下のメッセージ。
		FadeOut(FADE_BLACK,FADE_FAST)
		WaitFade()

		//	ナレーション
		TalkPopup(UNDEF,0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
		{
			"#7Cリトル・パロに頼んで支援要請を出し、"
			"#7C漂流村のみんなに集まってもらった。"
		}
		WaitPrompt()
		WaitCloseWindow()

		SetFlag( TF_MENU_SELECT, (rand() % 30) )
		
		//──────────────────────
		//	⇒ランダムＡ
		if( FLAG[TF_MENU_SELECT] < 10 )
		{
			//	ドギ（ボイス再生／表示なし）
			//	「おし、とっとと片付けるか！」
			PlayVoice(Y8V_3541,UNDEF,100)		// "おし、とっとと片付けるか！"
			TalkPopup("Dogi",0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
			{
				"おし、とっとと片付けるか！"
			}
			WaitPrompt()
			StopVoice(Y8V_3543, 25)
			WaitCloseWindow()
		}
		//	⇒ランダムＢ
		else if( FLAG[TF_MENU_SELECT] < 20 )
		{
			//	ドギ（ボイス再生／表示なし）
			//	「そんじゃあ作業を始めんぜ！」
			PlayVoice(Y8V_3542,UNDEF,100)		// "そんじゃあ作業を始めんぜ！"
			TalkPopup("Dogi",0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
			{
				"そんじゃあ作業を始めんぜ！"
			}
			WaitPrompt()
			StopVoice(Y8V_3543, 25)
			WaitCloseWindow()
		}
		//	⇒ランダムＣ
		else
		{
			//	ドギ（ボイス再生／表示なし）
			//	「さぁて、いっちょやろうや！」
			PlayVoice(Y8V_3543,UNDEF,100)		// "さぁて、いっちょやろうや！"
			TalkPopup("Dogi",0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
			{
				"さぁて、いっちょやろうや！"
			}
			WaitPrompt()
			StopVoice(Y8V_3543, 25)
			WaitCloseWindow()
		}
	}
	else //イベント用エアラン掛け声版
	{
		//	エアラン（ボイス再生／表示なし）
		//	「そんじゃ、やるとすっかァ！」
		PlayVoice(Y8V_3852,UNDEF,100)		// "そんじゃ、やるとすっかァ！"
		TalkPopup("Aaron",0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
		{
			"そんじゃ、やるとすっかァ！"
		}
		WaitPrompt()
		StopVoice(Y8V_3852, 25)
		WaitCloseWindow()
	}
	//──────────────────────

	//──────────────────────
	//	  　※以下のキャラの「障害撤去開始（応答）ボイス」を同時に再生させる。
	//	  　　（それぞれ仲間になっている場合）

	SetFlag( TF_MENU_SELECT, (rand() % 30) )
	
	//──────────────────────
	//	⇒ランダムＡ
	if( FLAG[TF_MENU_SELECT] < 10 )
	{
		//	バルバロス		※死亡後は再生しない
		if( !FLAG[GF_02MP1111_WOUND_BARBAROSS] )// バルバロスが致命傷を負う
		{
			PlayVoice(Y8V_3713,UNDEF,100)		// 「うむ！」
			TalkPopup("Barbaross",0,3,SIENVO00_PPOSX,SIENVO00_PPOSY,0)
			{
				"#-1Wうむ！"
			}
		}
		Wait(2)

		if(!FLAG[TF_SIENEVENT])		//通常版の支援イベント
		{
			//	エアラン		
			if( FLAG[GF_02MP2301_JOIN_AARON] )		// エアランに出会った
			{
				PlayVoice(Y8V_3846,UNDEF,100)		//「おうよ！」
				TalkPopup("Aaron",1,3,SIENVO01_PPOSX,SIENVO01_PPOSY,0)
				{
					"#-1Wおうよ！"
				}
			}
		}
		else		//エアラン掛け声版
		{
			//	ドギ		
			PlayVoice(Y8V_3566,UNDEF,100)		// おうよ！
			TalkPopup("Dogi",1,3,SIENVO01_PPOSX,SIENVO01_PPOSY,0)
			{
				"#-1Wおうよ！"
			}
		}

		//	カーラン		※六部で仲間になった場合のみ再生
		if( FLAG[GF_SUBEV_JOIN_CURRAN2] )		// カーラン卿が改めて合流した
		{
			PlayVoice(Y8V_4494,UNDEF,100)		// 「フン、仕方ない！」
			TalkPopup("Curran",2,3,SIENVO02_PPOSX,SIENVO02_PPOSY,0)
			{
				"#-1Wフン、仕方ない！"
			}
		}
		//	シスター・ニア	
		if( FLAG[GF_SUBEV_JOIN_NIA] )			// シスター・ニアと合流した
		{
			PlayVoice(Y8V_4664,UNDEF,100)		//「了解です！」
			TalkPopup("Nia",3,3,SIENVO03_PPOSX,SIENVO03_PPOSY,0)
			{
				"#-1W了解です！"
			}
		}
		//	リトルパロ		
		if( FLAG[GF_01MP1201_MEET_BARBAROSS] )	// バルバロスと再会した
		{
			PlayVoice(Y8V_5217,UNDEF,100)		// 「オー！」
			TalkPopup("Paro",4,3,SIENVO04_PPOSX,SIENVO04_PPOSY,0)
			{
				"#-1Wオー！"
			}
		}
		Wait(4)

		//	アリスン		
		if( FLAG[GF_02MP1201_JOIN_ALISON] )		// アリスンを救出した
		{
			if ((FLAG[GF_QS510_LOOK_SUBEV] || FLAG[GF_NPC_5_03_GOTO_GHOSTHIP]) && //【QS510】▼サブイベント・アリスンが倒れる を見た or ▼第五部③幽霊船を調べに向かう
				!FLAG[GF_NPC_5_03_AFTER_INTERCEPT9] &&	//☆第五部Ｆ迎撃戦⑨を済ませた
				!FLAG[GF_TBOX_DUMMY077])			//▼第五部④大空洞へ向かう
			{
	
			} else {
				PlayVoice(Y8V_4392,UNDEF,100)		//「了解です。」
				TalkPopup("Alison",5,3,SIENVO05_PPOSX,SIENVO05_PPOSY,0)
				{
					"#-1W了解です。"
				}
			}
		}
		//	エド			
		if( FLAG[GF_SUBEV_JOIN_ED] )			// エドと合流した
		{
			PlayVoice(Y8V_4446,UNDEF,100)			// 「ああ！」
			TalkPopup("Ed",6,3,SIENVO06_PPOSX,SIENVO06_PPOSY,0)
			{
				"#-1Wああ！"
			}
		}
		//	キルゴール		※死亡後は再生しない
		if( FLAG[GF_02MP1307_JOIN_KIERGAARD] &&		// カーランとキルゴールに出会った
			!FLAG[GF_02MP1103_KILL_KIERGAARD] )	// キルゴールを撃破した
		{
			PlayVoice(Y8V_4132,UNDEF,100)		// 「ええ！」
			TalkPopup("Kiergaard",7,3,SIENVO07_PPOSX,SIENVO07_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
		Wait(4)

		//	オースティン	
		if( FLAG[GF_SUBEV_JOIN_AUSTEN] )		// オースティンと合流した
		{
			PlayVoice(Y8V_4836,UNDEF,100)		//「お安い御用だ！」
			TalkPopup("Austen",0,3,SIENVO00_PPOSX,SIENVO00_PPOSY,0)
			{
				"#-1Wお安い御用だ！"
			}
		}
		//	フランツ		
		if( FLAG[GF_SUBEV_JOIN_FRANZ])			// フランツと合流した
		{
			PlayVoice(Y8V_5071,UNDEF,100)		// 「ええ！」
			TalkPopup("Franz",7,3,SIENVO07_PPOSX,SIENVO07_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
	}
	//	⇒ランダムＢ
	else if( FLAG[TF_MENU_SELECT] < 20 )
	{
		//	バルバロス		※死亡後は再生しない
		if( !FLAG[GF_02MP1111_WOUND_BARBAROSS] )// バルバロスが致命傷を負う
		{
			PlayVoice(Y8V_3713,UNDEF,100)		// 「うむ！」
			TalkPopup("Barbaross",0,3,SIENVO10_PPOSX,SIENVO10_PPOSY,0)
			{
				"#-1Wうむ！"
			}
		}
		Wait(2)


		//	リトルパロ		
		if( FLAG[GF_01MP1201_MEET_BARBAROSS] )	// バルバロスと再会した
		{
			PlayVoice(Y8V_5217,UNDEF,100)		// 「オー！」
			TalkPopup("Paro",1,3,SIENVO11_PPOSX,SIENVO11_PPOSY,0)
			{
				"#-1Wオー！"
			}
		}
		//	レーヤ			
		if( FLAG[GF_SUBEV_JOIN_REJA] )			// レーヤと合流した
		{
			PlayVoice(Y8V_4721,UNDEF,100)		//「しょーがねーな！」
			TalkPopup("Reja",2,3,SIENVO12_PPOSX,SIENVO12_PPOSY,0)
			{
				"#-1Wしょーがねーな！"
			}
		}

		//	シルヴィア	
		if( FLAG[GF_SUBEV_JOIN_SILVIA] )		// シルヴィアと合流した
		{
			PlayVoice(Y8V_4898,UNDEF,100)		//「ああ！」
			TalkPopup("Silvia",3,3,SIENVO13_PPOSX,SIENVO13_PPOSY,0)
			{
				"#-1Wああ！"
			}
		}
		//	カトリーン		
		if( FLAG[GF_02MP1201_JOIN_KATRIN] )		// カトリーンが合流した（武器の強化が可能になる２）
		{
			PlayVoice(Y8V_4051,UNDEF,100)		//	// 「ええ！」
			TalkPopup("Katrin",4,3,SIENVO14_PPOSX,SIENVO14_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}

		Wait(4)

		//	クイナ			
		if( FLAG[GF_TBOX_DUMMY072] )	//クイナとぶつかるアドル
		{
			PlayVoice(Y8V_4593,UNDEF,100)		//「りょーかい！」
			TalkPopup("Kuina",5,3,SIENVO15_PPOSX,SIENVO15_PPOSY,0)
			{
				"#-1Wりょーかい！"
			}

		}
		//	タナトス		
		if( FLAG[GF_05MP1201_IN_MEETING] )		//ドギたちに北部の状況を伝える
		{
			PlayVoice(Y8V_3940,UNDEF,100)		//「ああ！」
			TalkPopup("Thanatos",6,3,SIENVO16_PPOSX,SIENVO16_PPOSY,0)
			{
				"#-1Wああ！"
			}
		}
		//	キルゴール		※死亡後は再生しない
		if( FLAG[GF_02MP1307_JOIN_KIERGAARD] &&		// カーランとキルゴールに出会った
			!FLAG[GF_02MP1103_KILL_KIERGAARD] )	// キルゴールを撃破した
		{
			PlayVoice(Y8V_4132,UNDEF,100)		// 「ええ！」
			TalkPopup("Kiergaard",6,3,SIENVO16_PPOSX,SIENVO16_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
		Wait(4)

		//	フランツ		
		if( FLAG[GF_SUBEV_JOIN_FRANZ])			// フランツと合流した
		{
			PlayVoice(Y8V_5071,UNDEF,100)		// 「ええ！」
			TalkPopup("Franz",7,3,SIENVO17_PPOSX,SIENVO17_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
		//	グリゼルダ		
		if( FLAG[GF_SUBEV_JOIN_GRISELDA] )		// グリゼルダと合流した
		{
			PlayVoice(Y8V_5140,UNDEF,100)		//「ああ！」
			TalkPopup("Griselda",0,3,SIENVO10_PPOSX,SIENVO10_PPOSY,0)
			{
				"#-1Wああ！"
			}
		}
	}
	//	⇒ランダムＣ
	else
	{
		//	バルバロス		※死亡後は再生しない
		if( !FLAG[GF_02MP1111_WOUND_BARBAROSS] )// バルバロスが致命傷を負う
		{
			PlayVoice(Y8V_3713,UNDEF,100)		// 「うむ！」
			TalkPopup("Barbaross",0,3,SIENVO20_PPOSX,SIENVO20_PPOSY,0)
			{
				"#-1Wうむ！"
			}
		}
		Wait(2)

		//	カーラン		※六部で仲間になった場合のみ再生
		if( FLAG[GF_SUBEV_JOIN_CURRAN2] )		// カーラン卿が改めて合流した
		{
			PlayVoice(Y8V_4494,UNDEF,100)		// 「フン、仕方ない！」
			TalkPopup("Curran",1,3,SIENVO21_PPOSX,SIENVO21_PPOSY,0)
			{
				"#-1Wフン、仕方ない！"
			}
		}
		//	ディナ			
		if( FLAG[GF_02MP1119_LOOK_DINA] )		//漂流者ディナを発見
		{
			PlayVoice(Y8V_4326,UNDEF,100)		//「了解！」
			TalkPopup("Dina",2,3,SIENVO22_PPOSX,SIENVO22_PPOSY,0)
			{
				"#-1W了解！"
			}
		}
		//	リトルパロ		
		if( FLAG[GF_01MP1201_MEET_BARBAROSS] )	// バルバロスと再会した
		{
			PlayVoice(Y8V_5217,UNDEF,100)		// 「オー！」
			TalkPopup("Paro",3,3,SIENVO23_PPOSX,SIENVO23_PPOSY,0)
			{
				"#-1Wオー！"
			}
		}
		Wait(4)

		//	リヒト			
		if( FLAG[GF_02MP1118_CALL_PARO] )		// パロの呼び出しを受けた
		{
			PlayVoice(Y8V_4247,UNDEF,100)		//「ええ！」
			TalkPopup("Licht",4,3,SIENVO24_PPOSX,SIENVO24_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
		//	ミラルダ		
		if( FLAG[GF_SUBEV_JOIN_MIRALDA] )		// ミラルダと合流した
		{
			PlayVoice(Y8V_4776,UNDEF,100)		//「了解よ！」
			TalkPopup("Miralda",5,3,SIENVO25_PPOSX,SIENVO25_PPOSY,0)
			{
				"#-1W了解よ！"
			}
		}
		//	キルゴール		※死亡後は再生しない
		if( FLAG[GF_02MP1307_JOIN_KIERGAARD] &&		// カーランとキルゴールに出会った
			!FLAG[GF_02MP1103_KILL_KIERGAARD] )	// キルゴールを撃破した
		{
			PlayVoice(Y8V_4132,UNDEF,100)		// 「ええ！」
			TalkPopup("Kiergaard",6,3,SIENVO26_PPOSX,SIENVO26_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
		Wait(4)

		//	カシュー		
		if( FLAG[GF_SUBEV_JOIN_KASHU] )			// カシューと合流した
		{
			PlayVoice(Y8V_4993,UNDEF,100)		//「了解だ！」
			TalkPopup("Kashu",0,3,SIENVO20_PPOSX,SIENVO20_PPOSY,0)
			{
				"#-1W了解だ！"
			}
		}
		//	グリゼルダ		
		if( FLAG[GF_SUBEV_JOIN_GRISELDA] )		// グリゼルダと合流した
		{
			PlayVoice(Y8V_5140,UNDEF,100)		//「ああ！」
			TalkPopup("Griselda",6,3,SIENVO26_PPOSX,SIENVO26_PPOSY,0)
			{
				"#-1Wああ！"
			}
		}

	}
	//──────────────────────

	WaitPrompt()
	ClosePrompt(0)
	ClosePrompt(1)
	ClosePrompt(2)
	ClosePrompt(3)
	ClosePrompt(4)
	ClosePrompt(5)
	ClosePrompt(6)
	ClosePrompt(7)
	WaitCloseWindow(0)
	WaitCloseWindow(1)
	WaitCloseWindow(2)
	WaitCloseWindow(3)
	WaitCloseWindow(4)
	WaitCloseWindow(5)
	WaitCloseWindow(6)
	WaitCloseWindow(7)

	//──────────────────────
}
// ■支援イベント：▼支援イベント共通処理①－２
function "SubEV_Sien_Common1-2"
{
	//──────────────────────────────
	//▼支援イベント共通処理①－２
	//──────────────────────────────

	SetFlag( TF_MENU_SELECT, (rand() % 30) )
	
	//──────────────────────
	//	⇒ランダムＡ
	if( FLAG[TF_MENU_SELECT] < 10 )
	{
		//	バルバロス		※死亡後は再生しない
		if( !FLAG[GF_02MP1111_WOUND_BARBAROSS] )// バルバロスが致命傷を負う
		{
			PlayVoice(Y8V_3713,UNDEF,100)		// 「うむ！」
			TalkPopup("Barbaross",0,3,SIENVO00_PPOSX,SIENVO00_PPOSY,0)
			{
				"#-1Wうむ！"
			}
		}
		Wait(2)

		//	ドギ		
		PlayVoice(Y8V_3566,UNDEF,100)		// おうよ！
		TalkPopup("Dogi",1,3,SIENVO01_PPOSX,SIENVO01_PPOSY,0)
		{
			"#-1Wおうよ！"
		}

		//	カーラン		※六部で仲間になった場合のみ再生
		if( FLAG[GF_SUBEV_JOIN_CURRAN2] )		// カーラン卿が改めて合流した
		{
			PlayVoice(Y8V_4494,UNDEF,100)		// 「フン、仕方ない！」
			TalkPopup("Curran",2,3,SIENVO02_PPOSX,SIENVO02_PPOSY,0)
			{
				"#-1Wフン、仕方ない！"
			}
		}
		//	シスター・ニア	
		if( FLAG[GF_SUBEV_JOIN_NIA] )			// シスター・ニアと合流した
		{
			PlayVoice(Y8V_4664,UNDEF,100)		//「了解です！」
			TalkPopup("Nia",3,3,SIENVO03_PPOSX,SIENVO03_PPOSY,0)
			{
				"#-1W了解です！"
			}
		}
		//	リトルパロ		
		if( FLAG[GF_01MP1201_MEET_BARBAROSS] )	// バルバロスと再会した
		{
			PlayVoice(Y8V_5217,UNDEF,100)		// 「オー！」
			TalkPopup("Paro",4,3,SIENVO04_PPOSX,SIENVO04_PPOSY,0)
			{
				"#-1Wオー！"
			}
		}
		Wait(4)

		//	アリスン		
		if( FLAG[GF_02MP1201_JOIN_ALISON] )		// アリスンを救出した
		{
			if ((FLAG[GF_QS510_LOOK_SUBEV] || FLAG[GF_NPC_5_03_GOTO_GHOSTHIP]) && //【QS510】▼サブイベント・アリスンが倒れる を見た or ▼第五部③幽霊船を調べに向かう
				!FLAG[GF_NPC_5_03_AFTER_INTERCEPT9] &&	//☆第五部Ｆ迎撃戦⑨を済ませた
				!FLAG[GF_TBOX_DUMMY077])			//▼第五部④大空洞へ向かう
			{
	
			} else {
				PlayVoice(Y8V_4392,UNDEF,100)		//「了解です。」
				TalkPopup("Alison",5,3,SIENVO05_PPOSX,SIENVO05_PPOSY,0)
				{
					"#-1W了解です。"
				}
			}
		}
		//	エド			
		if( FLAG[GF_SUBEV_JOIN_ED] )			// エドと合流した
		{
			PlayVoice(Y8V_4446,UNDEF,100)			// 「ああ！」
			TalkPopup("Ed",6,3,SIENVO06_PPOSX,SIENVO06_PPOSY,0)
			{
				"#-1Wああ！"
			}
		}
		//	キルゴール		※死亡後は再生しない
		if( FLAG[GF_02MP1307_JOIN_KIERGAARD] &&		// カーランとキルゴールに出会った
			!FLAG[GF_02MP1103_KILL_KIERGAARD] )	// キルゴールを撃破した
		{
			PlayVoice(Y8V_4132,UNDEF,100)		// 「ええ！」
			TalkPopup("Kiergaard",7,3,SIENVO07_PPOSX,SIENVO07_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
		Wait(4)

		//	オースティン	
		if( FLAG[GF_SUBEV_JOIN_AUSTEN] )		// オースティンと合流した
		{
			PlayVoice(Y8V_4836,UNDEF,100)		//「お安い御用だ！」
			TalkPopup("Austen",0,3,SIENVO00_PPOSX,SIENVO00_PPOSY,0)
			{
				"#-1Wお安い御用だ！"
			}
		}
		//	フランツ		
		if( FLAG[GF_SUBEV_JOIN_FRANZ])			// フランツと合流した
		{
			PlayVoice(Y8V_5071,UNDEF,100)		// 「ええ！」
			TalkPopup("Franz",7,3,SIENVO07_PPOSX,SIENVO07_PPOSY,0)
			{
				"#-1Wええ！"
			}
		}
	}
	//	⇒ランダムＢ
	else if( FLAG[TF_MENU_SELECT] < 20 )
	{
		//	キルゴール		※正体判明後は再生しない
		if( FLAG[GF_02MP1307_JOIN_KIERGAARD] &&		// カーランとキルゴールに出会った
			!FLAG[GF_02MP1201_UNMASK_NEMO] )	// 名無しの正体が判明した
		{
			PlayVoice(Y8V_4132,UNDEF,100)		// 「ええ！」
		}
		//	カトリーン		
		if( FLAG[GF_02MP1201_JOIN_KATRIN] )		// カトリーンが合流した（武器の強化が可能になる２）
		{
			PlayVoice(Y8V_4051,UNDEF,100)		//	// 「ええ！」
		}
		//	レーヤ			
		if( FLAG[GF_SUBEV_JOIN_REJA] )			// レーヤと合流した
		{
			PlayVoice(Y8V_4721,UNDEF,100)		//「しょーがねーな！」
		}

		//	シルヴィア	
		if( FLAG[GF_SUBEV_JOIN_SILVIA] )		// シルヴィアと合流した
		{
			PlayVoice(Y8V_4898,UNDEF,100)		//「ああ！」
		}
		Wait(2)

		//	クイナ			
		if( FLAG[GF_TBOX_DUMMY072] )	//クイナとぶつかるアドル
		{
			PlayVoice(Y8V_4593,UNDEF,100)		//「りょーかい！」
		}
		//	タナトス		
		if( FLAG[GF_05MP1201_IN_MEETING] )		//ドギたちに北部の状況を伝える
		{
			PlayVoice(Y8V_3940,UNDEF,100)		//「ああ！」
		}
		Wait(2)

		//	フランツ		
		if( FLAG[GF_SUBEV_JOIN_FRANZ])			// フランツと合流した
		{
			PlayVoice(Y8V_5071,UNDEF,100)		// 「ええ！」
		}
		//	グリゼルダ		
		if( FLAG[GF_SUBEV_JOIN_GRISELDA] )		// グリゼルダと合流した
		{
			PlayVoice(Y8V_5140,UNDEF,100)		//「ああ！」
		}

	}
	//	⇒ランダムＣ
	else
	{
		//	リトルパロ		
		if( FLAG[GF_01MP1201_MEET_BARBAROSS] )	// バルバロスと再会した
		{
			PlayVoice(Y8V_5217,UNDEF,100)		// 「オー！」
		}
		//	カーラン		※六部で仲間になった場合のみ再生
		if( FLAG[GF_SUBEV_JOIN_CURRAN2] )		// カーラン卿が改めて合流した
		{
			PlayVoice(Y8V_4494,UNDEF,100)		// 「フン、仕方ない！」
		}
		//	ディナ			
		if( FLAG[GF_02MP1119_LOOK_DINA] )		//漂流者ディナを発見
		{
			PlayVoice(Y8V_4326,UNDEF,100)		//「了解！」
		}
		Wait(2)

		//	リヒト			
		if( FLAG[GF_02MP1118_CALL_PARO] )		// パロの呼び出しを受けた
		{
			PlayVoice(Y8V_4247,UNDEF,100)		//「ええ！」
		}
		//	ミラルダ		
		if( FLAG[GF_SUBEV_JOIN_MIRALDA] )		// ミラルダと合流した
		{
			PlayVoice(Y8V_4776,UNDEF,100)		//「了解よ！」
		}
		Wait(2)

		//	カシュー		
		if( FLAG[GF_SUBEV_JOIN_KASHU] )			// カシューと合流した
		{
			PlayVoice(Y8V_4993,UNDEF,100)		//「了解だ！」
		}
		//	グリゼルダ		
		if( FLAG[GF_SUBEV_JOIN_GRISELDA] )		// グリゼルダと合流した
		{
			PlayVoice(Y8V_5140,UNDEF,100)		//「ああ！」
		}

	}
	//──────────────────────
	Wait(80)

}
////////////////////////////////////////////////////////////////////////////////
// ■支援イベント：▼支援イベント共通処理②
function "SubEV_Sien_Common2"
{
	//──────────────────────────────
	//▼支援イベント共通処理②
	//──────────────────────────────
	//　　ナレーション消去後、プレイアブルキャラの
	//　　「漂流村のみんなで障害物を撤去ボイス」のどれかをランダム再生する。

	// ヒュンメル・リコッタ・ダーナがいない場合
	if( !FLAG[SF_HUMMEL_JOINOK] && !FLAG[SF_RICOTTA_JOINOK] && !FLAG[SF_DANA_JOINOK] )
	{
		// rand() Ａ～Ｃ
		SetFlag( TF_MENU_SELECT, (rand() % 30) )
	}
	// ヒュンメル・リコッタ・ダーナがいる場合
	else if( FLAG[SF_HUMMEL_JOINOK] && FLAG[SF_RICOTTA_JOINOK] && FLAG[SF_DANA_JOINOK] )
	{
		// rand() Ａ～Ｆ
		SetFlag( TF_MENU_SELECT, (rand() % 60) )
	}
	// ヒュンメル・リコッタ・ダーナの内１名がいる場合
	else if(( FLAG[SF_HUMMEL_JOINOK] && !FLAG[SF_RICOTTA_JOINOK] && !FLAG[SF_DANA_JOINOK] )||
			( !FLAG[SF_HUMMEL_JOINOK] && FLAG[SF_RICOTTA_JOINOK] && !FLAG[SF_DANA_JOINOK] )||
			( !FLAG[SF_HUMMEL_JOINOK] && !FLAG[SF_RICOTTA_JOINOK] && FLAG[SF_DANA_JOINOK] ) )
	{
		// rand() Ａ～Ｃ＆（Ｄ|Ｅ|Ｆ）
		SetFlag( TF_MENU_SELECT, (rand() % 40) )
		if( FLAG[TF_MENU_SELECT] >= 30 )
		{
			if( FLAG[SF_HUMMEL_JOINOK] )
			{
				SetFlag( TF_MENU_SELECT, 30 )	//ヒュンメル
			}
			else if( FLAG[SF_RICOTTA_JOINOK] )
			{
				SetFlag( TF_MENU_SELECT, 40 )	//リコッタ
			}
			else
			{
				SetFlag( TF_MENU_SELECT, 50 )	//ダーナ
			}
		}
	}
	// ヒュンメル・リコッタ・ダーナの内２名がいる場合
	else
	{
		// rand() Ａ～Ｃ＆（ＤＥ|ＤＦ|ＥＦ）
		SetFlag( TF_MENU_SELECT, (rand() % 50) )
		if( FLAG[TF_MENU_SELECT] >= 40 )
		{
			if( FLAG[SF_HUMMEL_JOINOK] )
			{
				SetFlag( TF_MENU_SELECT, 30 )	//ヒュンメル
			}
			else if( FLAG[SF_RICOTTA_JOINOK] )
			{
				SetFlag( TF_MENU_SELECT, 40 )	//リコッタ
			}
			else
			{
				SetFlag( TF_MENU_SELECT, 50 )	//ダーナ
			}
		}
		else if( FLAG[TF_MENU_SELECT] >= 30 )
		{
			if( FLAG[SF_DANA_JOINOK] )
			{
				SetFlag( TF_MENU_SELECT, 50 )	//ダーナ
			}
			else if( FLAG[SF_RICOTTA_JOINOK] )
			{
				SetFlag( TF_MENU_SELECT, 40 )	//リコッタ
			}
			else
			{
				SetFlag( TF_MENU_SELECT, 30 )	//ヒュンメル
			}
		}
	}

	//──────────────────────
	//	⇒ランダムＡ
	if( FLAG[TF_MENU_SELECT] < 10 )
	{
		//	アドル（ボイス再生／表示なし）
		//	「ありがとう、みんな！」
		PlayVoice(Y8V_0113,"ADOL",100)			// "ありがとう、みんな！"
	}
	//	⇒ランダムＢ
	else if( FLAG[TF_MENU_SELECT] < 20 )
	{
		//	ラクシャ（ボイス再生／表示なし）
		//	「みんなさんのご協力に感謝します。」
		PlayVoice(Y8V_0320,"LAXIA",100)			// "皆さんのご協力に感謝します"
	}
	//	⇒ランダムＣ
	else if( FLAG[TF_MENU_SELECT] < 30 )
	{
		//	サハド（ボイス再生／表示なし）
		//	「ありがとよ、みんな！」
		PlayVoice(Y8V_1358,"SAHAD",100)			// "ありがとよ、みんな！"
	}
	//	⇒ランダムＤ（ヒュンメルが仲間になっている場合）
	else if( FLAG[TF_MENU_SELECT] < 40 )
	{
		//	ヒュンメル（ボイス再生／表示なし）
		//	「フフ、助かったぞ。」
		PlayVoice(Y8V_2117,"HUMMEL",100)		// "フフ、助かったぞ"
	}
	//	⇒ランダムＥ（リコッタが仲間になっている場合）
	else if( FLAG[TF_MENU_SELECT] < 50 )
	{
		//	リコッタ（ボイス再生／表示なし）
		//	「みんな、感謝！」
		PlayVoice(Y8V_2510,"RICOTTA",100)		// "みんな、感謝！"
	}
	//	⇒ランダムＦ（ダーナが仲間になっている場合）
	else
	{
		//	ダーナ（ボイス再生／表示なし）
		//	「ありがとう、みんな！」
		PlayVoice(Y8V_2944,"DANA",100)			// "ありがとう、みんな！"
	}

	FadeBGM(100, 30)

	//──────────────────────
}

////////////////////////////////////////////////////////////////////////////////
// トロフィー入手：悪夢を超えし者	難易度ナイトメアでゲームをクリアした。
//function "GetTrophy_clearnightmare"	// 長すぎてエラーが出る為、GT_clearnightmareに変更した模様
function "GT_clearnightmare"
{
	GetTrophy("TROPHY_CLEARNIGHTMARE")		//悪夢を超えし者	難易度ナイトメアでゲームをクリアした。
}

//////////////////////////////////////////////////////////
// 漂流村の合流トロフィー取得
function "Get_DrifterRescue"	//トロフィー
{
	if( FLAG[GF_SUBEV_JOIN_AUSTEN] &&			// オースティンと合流した
		FLAG[GF_SUBEV_JOIN_KASHU] &&			// カシューと合流した
		FLAG[GF_SUBEV_JOIN_GRISELDA] &&			// グリゼルダと合流した
		FLAG[GF_SUBEV_JOIN_NIA] &&				// シスター・ニアと合流した
		FLAG[GF_SUBEV_JOIN_SILVIA] &&			// シルヴィアと合流した
		FLAG[GF_SUBEV_JOIN_ED] &&				// エドと合流した				必須なので必ず立っている
		FLAG[GF_SUBEV_JOIN_FRANZ] &&			// フランツと合流した
		FLAG[GF_SUBEV_JOIN_MIRALDA] &&			// ミラルダと合流した
		FLAG[GF_SUBEV_JOIN_REJA] &&				// レーヤと合流した
		FLAG[GF_SUBEV_JOIN_CURRAN2] ){			// カーラン卿が改めて合流した

		GetTrophy("TROPHY_MASTERRESCUE")		//活気ある集落	漂流村の人数が最大になった。
	}
}

//////////////////////////////////////////////////////////
// 沈黙の塔の隠しボス撃破トロフィー取得
function "Get_Destroyer"	//トロフィー
{
	GetTrophy("TROPHY_DESTROYER")		//沈黙を破りし者	《沈黙の塔》の守護者を倒した。
}

///////////////////////////////////////////////////////////////
// リーザがいない
///////////////////////////////////////////////////////////////
function "tear_lost"
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT)

	ResetMoveVec("PARTYALL")
	ResetMotion(ALL,0)
	StopEmotion(ALL)

	//	name("テキスト")
	TalkMes("UNDEF","#4Cリーザとはぐれてしまったようだ。",
		"リーザを探さなくては……","")
	WaitPrompt()
	Wait(10)

	CrossFade(20)

	SetPartyPosEntryOut()
	Wait(1)

	ResetCameraObserver(0)
	ResetStopFlag(STOPFLAG_CAMERA)
	WaitFade()

	ResetStopFlag(STOPFLAG_SIMPLEEVENT)
}
///////////////////////////////////////////////////////////////
// イベント関連
///////////////////////////////////////////////////////////////

//イベントボックスのキャラクリップ解除を防ぐ
function "event_begin"
{

	SetStopFlag(STOPFLAG_SIMPLEEVENT2)
	ResetStopFlag(STOPFLAG_NOCHARACLIP)
	ChangeAnimation( "LEADER" , "ANI_WAIT", -1 , 1 )

	//FadeOut(FADE_BLACK,FADE_NORMAL)	//試しにFASTに変更↓
	FadeOut(FADE_BLACK,FADE_FAST)
	WaitFade()
	SetFlag( SF_NOUSE_MTDSE, 1 )

	SetStopFlag(STOPFLAG_NOCHARACLIP)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
	SetStopFlag(STOPFLAG_EVENT)

	SetFlag( SF_NOUSE_MTDSE, 0 )

}

function "event_begin_fast"
{

	SetStopFlag(STOPFLAG_SIMPLEEVENT2)
	ResetStopFlag(STOPFLAG_NOCHARACLIP)
	ChangeAnimation( "LEADER" , "ANI_WAIT", -1 , 1 )

	FadeOut(FADE_BLACK,FADE_FAST)
	WaitFade()
	SetFlag( SF_NOUSE_MTDSE, 1 )

	SetStopFlag(STOPFLAG_NOCHARACLIP)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
	SetStopFlag(STOPFLAG_EVENT)

	SetFlag( SF_NOUSE_MTDSE, 0 )
	
}
function "event_begin_impose"
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)
	ResetStopFlag(STOPFLAG_NOCHARACLIP)
	ChangeAnimation( "LEADER" , "ANI_WAIT", -1 , 1 )

	//FadeOut(FADE_BLACK,FADE_NORMAL)	//試しにFASTに変更↓
	FadeOut(FADE_BLACK,FADE_FAST)
	WaitFade()
	SetFlag( SF_NOUSE_MTDSE, 1 )

	SetStopFlag(STOPFLAG_NOCHARACLIP)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
	SetStopFlag(STOPFLAG_EVENTIMPOSE)

	ResetStopFlag(STOPFLAG_CINEMA)
	SetFlag( SF_NOUSE_MTDSE, 0 )
}

function "solo_event_begin"	//イベントボックスお一人様モード用
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)
	ResetStopFlag(STOPFLAG_NOCHARACLIP)

	ResetMotion( "PARTYALL" , 1 )
	StopEffect(-1,PARTYALL,1)
	StopEmotion( "PARTYALL" )
	ResetMoveVec("PARTYALL")

	//FadeOut(FADE_BLACK,FADE_NORMAL)	//試しにFASTに変更
	FadeOut(FADE_BLACK,FADE_FAST)
	WaitFade()

	SetStopFlag(STOPFLAG_NOCHARACLIP)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
	SetStopFlag(STOPFLAG_EVENT)
}
function "solo_event_begin_fast"	//イベントボックスお一人様モード用
{
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)
	ResetStopFlag(STOPFLAG_NOCHARACLIP)

	ResetMotion( "PARTYALL" , 1 )
	StopEffect(-1,PARTYALL,1)
	StopEmotion( "PARTYALL" )
	ResetMoveVec("PARTYALL")

	FadeOut(FADE_BLACK,FADE_FAST)
	WaitFade()

	SetStopFlag(STOPFLAG_NOCHARACLIP)
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
	SetStopFlag(STOPFLAG_EVENT)
}

function "solo_event_end"	//イベントボックスお一人様モード用
{
	ResetStopFlag(STOPFLAG_EVENT)
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)

	FadeIn(FADE_BLACK,FADE_NORMAL)
	WaitFade()

	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
}

function "bokeevent_begin"
{

	SetStopFlag(STOPFLAG_EVENT)
	ResetStopFlag(STOPFLAG_NOCHARACLIP)

	VisualNameEnd()		//SSへの映り込みを防ぐ

	Portrait_SS(0)
	Portrait_Create(0, 0, 0, 0, 0, 1920,1080, 0, 0x00ffffff, 0x00000000)
	Portrait_Anime(0, PR_ANIME_BLUR, 8.0,0,0,0, 0)
	Portrait_Anime(0, PR_ANIME_COLOR, 0.7,0.7,0.7,1, 0)

	Portrait_SetKoma(0, 0)		// ３Ｄより先に描画
	SetFlag(SF_NODRAWMAP, 1)	// マップを描画しない（マップ切替でリセットされる）

	SetMapChrColor(0, 0.95f, 0.95f, 0.95f)	// mp1201と同じぐらい
	SetMapLightColor( 0, 1.0f, 1.0f, 1.0f, 1.2f )
//	SetMapLightVec(0 ,1.252f , -4.476f , 4.067f)
	
	CrossFade(FADE_NORMAL)
	SetStopFlag(STOPFLAG_NOCHARACLIP)

}

function "boke_end"
{

	SetFlag(SF_NODRAWMAP, 0)	// マップを描画しない（マップ切替でリセットされる）

	Portrait_Close(0)
	Portrait_Unload(0)

	ResetStopFlag(STOPFLAG_EVENT)
	SetStopFlag(STOPFLAG_SIMPLEEVENT2)

	FadeIn(FADE_BLACK,FADE_FAST)
	WaitFade()
	ResetStopFlag(STOPFLAG_SIMPLEEVENT2)
}

function "talkevent_begin"
{

			SetChrWork("this", CWK_SCRIPTPAUSE, 1)
			SetChrWork("this", CWK_DEFAULT_SKIPNODE_OFF, 1)

			CrossFade(FADE_CROSS)
			SetChrInfoFlag( "LEADER" ,INFOFLAG_INVISIBLE)//リーダーを消す
			SetChrInfoFlag( "PLAYER1",INFOFLAG_INVISIBLE)//プレイヤー１を消す
			SetChrInfoFlag( "PLAYER2",INFOFLAG_INVISIBLE)//プレイヤー２を消す
			SetChrInfoFlag( "PLAYER3",INFOFLAG_INVISIBLE)//プレイヤー３を消す
			SetChrInfoFlag( "LEADER" ,INFOFLAG_NOCHRATARI)//リーダーのアタリを消す

			// 被写界深度の設定
			SetDoF(0, LERP_LINEAR, 3.000, 55.000 ,0.000 ,0.150 ,0.500)					//（★パッチ1.01対応）前ボケ削除
			// グレアの設定
			SetGlare(0, LERP_LINEAR, 0.700, 1.300 ,1.000 ,1.000 ,0.600 ,0.000 ,1.000)

			TurnToChr("LEADER" ,"this",360.0f)
			TurnToChr("PLAYER1","this",360.0f)
			TurnToChr("PLAYER2","this",360.0f)
			TurnToChr("PLAYER3","this",360.0f)
			ResetPartyPos()
			ResetFollowPoint()
			WaitFade()

}
function "talkevent_begin_ps"		//被写界深度・グレア調整版
{

			SetChrWork("this", CWK_SCRIPTPAUSE, 1)
			SetChrWork("this", CWK_DEFAULT_SKIPNODE_OFF, 1)

			CrossFade(FADE_CROSS)
			SetChrInfoFlag( "LEADER" ,INFOFLAG_INVISIBLE)//リーダーを消す
			SetChrInfoFlag( "PLAYER1",INFOFLAG_INVISIBLE)//プレイヤー１を消す
			SetChrInfoFlag( "PLAYER2",INFOFLAG_INVISIBLE)//プレイヤー２を消す
			SetChrInfoFlag( "PLAYER3",INFOFLAG_INVISIBLE)//プレイヤー３を消す
			SetChrInfoFlag( "LEADER" ,INFOFLAG_NOCHRATARI)//リーダーのアタリを消す

			// 被写界深度の設定
			SetDoF(0, LERP_LINEAR, 3.000, 55.000 ,0.000 ,0.150 ,0.500)
			// グレアの設定
			SetGlare(0, LERP_LINEAR, 0.500, 1.300 ,1.000 ,1.000 ,0.600 ,0.000 ,1.000)

			TurnToChr("LEADER" ,"this",360.0f)
			TurnToChr("PLAYER1","this",360.0f)
			TurnToChr("PLAYER2","this",360.0f)
			TurnToChr("PLAYER3","this",360.0f)
			ResetPartyPos()
			ResetFollowPoint()
			WaitFade()

}


function "talkevent_end"
{
			CrossFade(FADE_CROSS)
			//終了表情
			ChangeSubAnimation("this",SUBMOT_EYE,ANI_E_WAIT,1)
			ChangeSubAnimation("this",SUBMOT_EXT1,ANI_E_LOOKC_S,1)	
			ChangeSubAnimation("this",SUBMOT_MOUTH,ANI_M_WAIT,1)
			LookReset( "this" )
		
			//マップパラメーターリセット
			ResetMapParam( -1 )

			RestoreCamera(0,0)
			ResetCameraObserver(0)
			ResetCameraZPlane()
		
			ResetChrInfoFlag( "LEADER" ,INFOFLAG_INVISIBLE)//リーダーを消す
			ResetChrInfoFlag( "PLAYER1",INFOFLAG_INVISIBLE)//プレイヤー１を消す
			ResetChrInfoFlag( "PLAYER2",INFOFLAG_INVISIBLE)//プレイヤー２を消す
			ResetChrInfoFlag( "PLAYER3",INFOFLAG_INVISIBLE)//プレイヤー３を消す
			ResetChrInfoFlag( "LEADER" ,INFOFLAG_NOCHRATARI)//リーダーのアタリを消す
//			WaitFade()

			SetChrWork(this, CWK_SCRIPTPAUSE, 0)
			SetChrWork(this, CWK_DEFAULT_SKIPNODE_OFF, 0)
			ResetStopFlag(STOPFLAG_TALK2)
}

function "talkevent_end_ps"
{
			CrossFade(FADE_CROSS)
			//終了表情
			ChangeSubAnimation("this",SUBMOT_EYE,ANI_E_WAIT,1)
//			ChangeSubAnimation("this",SUBMOT_EXT1,ANI_E_LOOKC_S,1)	
			ChangeSubAnimation("this",SUBMOT_MOUTH,ANI_M_WAIT,1)
			LookReset( "this" )
		
			//マップパラメーターリセット
			ResetMapParam( -1 )

			RestoreCamera(0,0)
			ResetCameraObserver(0)
			ResetCameraZPlane()
			
			ResetShadowBound()	//影戻す
		
			ResetChrInfoFlag( "LEADER" ,INFOFLAG_INVISIBLE)//リーダーを消す
			ResetChrInfoFlag( "PLAYER1",INFOFLAG_INVISIBLE)//プレイヤー１を消す
			ResetChrInfoFlag( "PLAYER2",INFOFLAG_INVISIBLE)//プレイヤー２を消す
			ResetChrInfoFlag( "PLAYER3",INFOFLAG_INVISIBLE)//プレイヤー３を消す
			ResetChrInfoFlag( "LEADER" ,INFOFLAG_NOCHRATARI)//リーダーのアタリを消す
//			WaitFade()

			SetChrWork(this, CWK_SCRIPTPAUSE, 0)
			SetChrWork(this, CWK_DEFAULT_SKIPNODE_OFF, 0)
			ResetStopFlag(STOPFLAG_TALK2)
}


function "talk_begin_zoom"
{
			SetFlag(TF_TALK_ZOOMCAMERA, 1)	// 会話中ズーム
			SetFlag(TF_TALK_ZOOMRATIO, 80)

}

function "event_Shake_set"
{
	CameraShakeParam(300.0f, 0.015f, 1)
}

function "default_Shake_set"
{
	CameraShakeParam(300.0f, 0.1f, 0)
}

function "LocateName_Anime"
{
	Portrait_Anime( 3 , PR_ANIME_SCALE ,0.60f , 0.60f ,-1,-1 , 0 )		//スケール変更
	Portrait_Anime( 4 , PR_ANIME_SCALE ,0.60f , 0.60f ,-1,-1 , 0 )		//スケール変更

	Portrait_Anime(  3 , PR_ANIME_MOVE, LOCATEFIND_END_POSX , LOCATEFIND_END_POSY , 0, 0,FADE_NORMAL)//PR_ANIME_MOVESIN
	Portrait_Anime(  3 , PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 1.0f,FADE_NORMAL)
	Wait(10)

	PlaySE( SE_ENCHANT, 100, 0,  0, 0, 1.0f, 0)
	Portrait_Anime(  3 , PR_ANIME_SPECULAR, 0.0f, 0.0f, 0.0f, 0,15)
	Wait(15)
	Portrait_Anime(  3 , PR_ANIME_SPECULAR, 0.0f, 0.0f, 0.0f, 0,30)
	Wait(20)
	Portrait_Anime(  3 , PR_ANIME_SPECULAR, 0.0f, 0.0f, 0.0f, 0,60)
	Portrait_Anime(  3 , PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0,60)
	Wait(100)

	Portrait_Anime(  4 , PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 1.0f,FADE_NORMAL)
	Wait(FADE_NORMAL)

	Wait(60)
	CallFunc( "system:FindLocationVoice_B")	//ロケーション発見ボイス
	Wait(50)

	Portrait_Anime(  4 , PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0.0f,FADE_NORMAL)
	Wait(FADE_NORMAL)
	Portrait_Close(4)
}

//キャラモーション初期化

function "reset_chrmot_ALL"		//PC全初期化
{
	CallFunc("system:reset_chrmot_ADOL")
	CallFunc("system:reset_chrmot_LAXIA")
	CallFunc("system:reset_chrmot_SAHAD")
	CallFunc("system:reset_chrmot_HUMMEL")
	CallFunc("system:reset_chrmot_RICOTTA")
	CallFunc("system:reset_chrmot_DANA")
}
function "reset_chrmot_ALL_nopos"		//PC全初期化
{
	CallFunc("system:reset_chrmot_ADOL")
	CallFunc("system:reset_chrmot_LAXIA")
	CallFunc("system:reset_chrmot_SAHAD")
	CallFunc("system:reset_chrmot_HUMMEL")
	CallFunc("system:reset_chrmot_RICOTTA")
	CallFunc("system:reset_chrmot_DANA_nopos")
}

function "reset_chrmot_ADOL"
{
	ChangeSubAnimation("ADOL",SUBMOT_EYE,ANI_E_WAIT,1)
	ChangeSubAnimation("ADOL",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("ADOL",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("ADOL","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_LAXIA"
{
	ChangeSubAnimation("LAXIA",SUBMOT_EYE,ANI_E_WAIT,1)
	ChangeSubAnimation("LAXIA",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("LAXIA",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeSubAnimation("LAXIA",SUBMOT_EXT2,ANI_C_NORMAL,1)
	ChangeAnimation("LAXIA","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_SAHAD"
{
	ChangeSubAnimation("SAHAD",SUBMOT_EYE,ANI_E_WAIT,1)
	ChangeSubAnimation("SAHAD",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("SAHAD",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeSubAnimation("SAHAD",SUBMOT_EXT2,ANI_C_NORMAL,1)
	ChangeAnimation("SAHAD","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_HUMMEL"
{
	ChangeSubAnimation("HUMMEL",SUBMOT_EYE,ANI_E_WAIT,1)
	ChangeSubAnimation("HUMMEL",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("HUMMEL",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("HUMMEL","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_RICOTTA"
{
	ChangeSubAnimation("RICOTTA",SUBMOT_EYE,ANI_E_WAIT,1)
	ChangeSubAnimation("RICOTTA",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("RICOTTA",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("RICOTTA","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_DANA"
{
	ChangeSubAnimation("DANA",SUBMOT_EYE,ANI_E_WAIT,1)
	ChangeSubAnimation("DANA",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("DANA",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("DANA","ANI_WAIT", -1 , 1 )
	
	if(FLAG[SF_PAST_MODE])	//スタイル違いを一度消す
	{
		SetChrPos("DANA" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA1" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA2" , -100000.00f , 0.0f , 0.0f )
	}

	if(FLAG[GF_TBOX_DUMMY129])	//スタイル違いを一度消す
	{
		SetChrPos("DANA" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA1" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA2" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA3" , -100000.00f , 0.0f , 0.0f )
	}
}
function "reset_chrmot_DANA_nopos"
{
	ChangeSubAnimation("DANA",SUBMOT_EYE,ANI_E_WAIT,1)
	ChangeSubAnimation("DANA",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("DANA",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("DANA","ANI_WAIT", -1 , 1 )

	if(FLAG[GF_TBOX_DUMMY129])	//スタイル違いを一度消す
	{
		SetChrPos("DANA" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA1" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA2" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA3" , -100000.00f , 0.0f , 0.0f )
	}
}
function "reset_chrmot_NPCALL"		//NPC全初期化（漂流村）
{
	CallFunc("system:reset_chrmot_Barbaross")
	CallFunc("system:reset_chrmot_Kuina")
	CallFunc("system:reset_chrmot_Kiergaard")
	CallFunc("system:reset_chrmot_Aaron")
	CallFunc("system:reset_chrmot_Franz")
	CallFunc("system:reset_chrmot_Miralda")
	CallFunc("system:reset_chrmot_Katrin")
	CallFunc("system:reset_chrmot_Licht")
	CallFunc("system:reset_chrmot_Alison")
	CallFunc("system:reset_chrmot_Kashu")
	CallFunc("system:reset_chrmot_Reja")
	CallFunc("system:reset_chrmot_Dina")
	CallFunc("system:reset_chrmot_Nia")
	CallFunc("system:reset_chrmot_Curran")
	CallFunc("system:reset_chrmot_Ed")
	CallFunc("system:reset_chrmot_Silvia")
	CallFunc("system:reset_chrmot_Austen")
	CallFunc("system:reset_chrmot_Baby")	//アリスン子供
	CallFunc("system:reset_chrmot_Thanatos")
	CallFunc("system:reset_chrmot_Dogi")
	CallFunc("system:reset_chrmot_Paro")
	CallFunc("system:reset_chrmot_Rex")	//ハシビロコウ
	CallFunc("system:reset_chrmot_Griselda")

	//PCのNPC版もリセット
	CallFunc("system:reset_chrmot_Sahad")
	CallFunc("system:reset_chrmot_Laxia")
	CallFunc("system:reset_chrmot_Hummel")
	CallFunc("system:reset_chrmot_Ricotta")
	CallFunc("system:reset_chrmot_Dana")
}
function "reset_chrmot_Barbaross"
{
	ChangeSubAnimation("Barbaross",SUBMOT_EYE,ANI_E_WAIT,1)		//c100
	ChangeSubAnimation("Barbaross",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Barbaross",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Barbaross","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Kuina"
{
	ChangeSubAnimation("Kuina",SUBMOT_EYE,ANI_E_WAIT,1)			//c101
	ChangeSubAnimation("Kuina",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Kuina",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Kuina","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Kiergaard"
{
	ChangeSubAnimation("Kiergaard",SUBMOT_EYE,ANI_E_WAIT,1)		//c102
	ChangeSubAnimation("Kiergaard",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Kiergaard",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Kiergaard","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Aaron"
{
	ChangeSubAnimation("Aaron",SUBMOT_EYE,ANI_E_WAIT,1)			//c103
	ChangeSubAnimation("Aaron",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Aaron",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Aaron","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Franz"
{
	ChangeSubAnimation("Franz",SUBMOT_EYE,ANI_E_WAIT,1)			//c104
	ChangeSubAnimation("Franz",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Franz",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Franz","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Miralda"
{
	ChangeSubAnimation("Miralda",SUBMOT_EYE,ANI_E_WAIT,1)		//c105
	ChangeSubAnimation("Miralda",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Miralda",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Miralda","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Katrin"
{
	ChangeSubAnimation("Katrin",SUBMOT_EYE,ANI_E_WAIT,1)		//c106
	ChangeSubAnimation("Katrin",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Katrin",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Katrin","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Licht"
{
	ChangeSubAnimation("Licht",SUBMOT_EYE,ANI_E_WAIT,1)			//c107
	ChangeSubAnimation("Licht",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Licht",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Licht","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Alison"
{
	ChangeSubAnimation("Alison",SUBMOT_EYE,ANI_E_WAIT,1)		//c108
	ChangeSubAnimation("Alison",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Alison",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Alison","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Kashu"
{
	ChangeSubAnimation("Kashu",SUBMOT_EYE,ANI_E_WAIT,1)			//c109
	ChangeSubAnimation("Kashu",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Kashu",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Kashu","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Reja"
{
	ChangeSubAnimation("Reja",SUBMOT_EYE,ANI_E_WAIT,1)			//c110
	ChangeSubAnimation("Reja",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Reja",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Reja","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Dina"
{
	ChangeSubAnimation("Dina",SUBMOT_EYE,ANI_E_WAIT,1)			//c111
	ChangeSubAnimation("Dina",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Dina",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Dina","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Nia"
{
	if(FLAG[GF_SUBEV_JOIN_NIA]){
		ChangeSubAnimation("Nia",SUBMOT_EYE,ANI_E_WAIT,1)			//c112
		ChangeSubAnimation("Nia",SUBMOT_MOUTH,ANI_M_WAIT,1)
		ChangeSubAnimation("Nia",SUBMOT_EXT1,ANI_E_LOOKC,1)
		ChangeAnimation("Nia","ANI_WAIT", -1 , 1 )
	}
}
function "reset_chrmot_Curran"
{
	ChangeSubAnimation("Curran",SUBMOT_EYE,ANI_E_WAIT,1)		//c113
	ChangeSubAnimation("Curran",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Curran",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Curran","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Ed"
{
	ChangeSubAnimation("Ed",SUBMOT_EYE,ANI_E_WAIT,1)		//c114
	ChangeSubAnimation("Ed",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Ed",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Ed","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Silvia"
{
	if(FLAG[GF_SUBEV_JOIN_SILVIA]){
		ChangeSubAnimation("Silvia",SUBMOT_EYE,ANI_E_WAIT,1)		//c115
		ChangeSubAnimation("Silvia",SUBMOT_MOUTH,ANI_M_WAIT,1)
		ChangeSubAnimation("Silvia",SUBMOT_EXT1,ANI_E_LOOKC,1)
		ChangeAnimation("Silvia","ANI_WAIT", -1 , 1 )
	}
}
function "reset_chrmot_Austen"
{
	ChangeSubAnimation("Austen",SUBMOT_EYE,ANI_E_WAIT,1)		//c116
	ChangeSubAnimation("Austen",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Austen",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Austen","ANI_WAIT", -1 , 1 )
}

//function "reset_chrmot_Baby"
//{
//	ChangeSubAnimation("Baby",SUBMOT_EYE,ANI_E_WAIT,1)			//c120(アリスン子ども)
//	ChangeSubAnimation("Baby",SUBMOT_MOUTH,ANI_M_WAIT,1)
//	ChangeSubAnimation("Baby",SUBMOT_EXT1,ANI_E_LOOKC,1)
//	ChangeAnimation("Baby","ANI_WAIT", -1 , 1 )
//}

function "reset_chrmot_Thanatos"
{
	ChangeSubAnimation("Thanatos",SUBMOT_EYE,ANI_E_WAIT,1)		//c200
	ChangeSubAnimation("Thanatos",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Thanatos",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Thanatos","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Dogi"
{
	ChangeSubAnimation("Dogi",SUBMOT_EYE,ANI_E_WAIT,1)			//c201
	ChangeSubAnimation("Dogi",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Dogi",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Dogi","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Paro"
{
	ChangeSubAnimation("Paro",SUBMOT_EYE,ANI_E_WAIT,1)			//c202
//	ChangeSubAnimation("Paro",SUBMOT_MOUTH,ANI_M_WAIT,1)
//	ChangeSubAnimation("Paro",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Paro","ANI_WAIT4", -1 , 1 )
}

function "reset_chrmot_Rex"
{
	ChangeSubAnimation("Rex",SUBMOT_EYE,ANI_E_WAIT,1)			//c203ハシビロコウ
	ChangeSubAnimation("Rex",SUBMOT_MOUTH,ANI_M_WAIT,1)
//	ChangeSubAnimation("Rex",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Rex","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Griselda"
{
	ChangeSubAnimation("Griselda",SUBMOT_EYE,ANI_E_WAIT,1)			//c204
	ChangeSubAnimation("Griselda",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Griselda",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Griselda","ANI_WAIT", -1 , 1 )
}


function "reset_chrmot_Sahad"
{
	ChangeSubAnimation("Sahad",SUBMOT_EYE,ANI_E_WAIT,1)			//c401
	ChangeSubAnimation("Sahad",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Sahad",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Sahad","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Laxia"
{
	ChangeSubAnimation("Laxia",SUBMOT_EYE,ANI_E_WAIT,1)			//c402
	ChangeSubAnimation("Laxia",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Laxia",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeSubAnimation("Laxia",SUBMOT_EXT2,ANI_C_NORMAL,1)
	ChangeAnimation("Laxia","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Hummel"
{
	ChangeSubAnimation("Hummel",SUBMOT_EYE,ANI_E_WAIT,1)			//c403
	ChangeSubAnimation("Hummel",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Hummel",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Hummel","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Ricotta"
{
	ChangeSubAnimation("Ricotta",SUBMOT_EYE,ANI_E_WAIT,1)			//c404
	ChangeSubAnimation("Ricotta",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Ricotta",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Ricotta","ANI_WAIT", -1 , 1 )
}
function "reset_chrmot_Dana"
{
	ChangeSubAnimation("Dana",SUBMOT_EYE,ANI_E_WAIT,1)			//c405
	ChangeSubAnimation("Dana",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Dana",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Dana","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Olga"
{
	ChangeSubAnimation("Olga",SUBMOT_EYE,ANI_E_WAIT,1)			//c302
	ChangeSubAnimation("Olga",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Olga",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Olga","ANI_WAIT", -1 , 1 )
}

function "reset_chrmot_Sarai"
{
	ChangeSubAnimation("Sarai",SUBMOT_EYE,ANI_E_WAIT,1)			//c300
	ChangeSubAnimation("Sarai",SUBMOT_MOUTH,ANI_M_WAIT,1)
	ChangeSubAnimation("Sarai",SUBMOT_EXT1,ANI_E_LOOKC,1)
	ChangeAnimation("Sarai","ANI_WAIT", -1 , 1 )
}

//パーティーキャラの初期化
function "party_reset"
{
	ResetMotion( "PARTYALL" , 1 )
	StopEffect(-1,ALL,1)
	StopEmotion( "ALL" )
	ResetMoveVec("PARTYALL")

	//CallFunc("system:party_remove")
	//ReleaseEventPartyChr()
	
	if(FLAG[SF_PAST_MODE])	//スタイル違いを一度消す
	{
		SetChrPos("DANA" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA2" , -100000.00f , 0.0f , 0.0f )
		SetChrPos("DANA3" , -100000.00f , 0.0f , 0.0f )
	}
}
function "party_reset_nopos"
{
	ResetMotion( "PARTYALL" , 1 )
	StopEffect(-1,ALL,1)
	StopEmotion( "ALL" )
	ResetMoveVec("PARTYALL")

	//CallFunc("system:party_remove")
	//ReleaseEventPartyChr()
}
//キャラクター位置飛ばし
function "party_remove"
{
	SetChrPos("ADOL" , -100000.00f , 0.0f , 0.0f )
	SetChrPos("SAHAD" , -100000.00f , 0.0f , 0.0f )
	SetChrPos("LAXIA" , -100000.00f , 0.0f , 0.0f )
	SetChrPos("HUMMEL" , -100000.00f , 0.0f , 0.0f )
	SetChrPos("DANA" , -100000.00f , 0.0f , 0.0f )
	SetChrPos("RICOTTA" , -100000.00f , 0.0f , 0.0f )
	SetChrPos("DANA1" , -100000.00f , 0.0f , 0.0f )
	SetChrPos("DANA2" , -100000.00f , 0.0f , 0.0f )
}

//カメラ情報、設定の復帰・初期化
function "camera_reset"
{
//	RestoreCamera(0,0)
	FixCamera()
	ResetYs8Camera()
	ResetCameraObserver(0)
	ResetCameraZPlane()
	FixCamera()
}

function "camp_rest"
{
	//テント回復処理・リトライセーブ
	HP_Recover( 9999 )
	AddEX(100)	// EX100%回復
	SP_Recover( 200 )	// SP100回復
	CureAll( )	//状態異常回復

	UseFood(-1)		// 料理効果解除

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

// 回復するボス戦スタート
function "boss_start"
{
	// パーティ全快
	HP_Recover( 9999 )	// ※全快してはいけないボス戦が出てきた場合は、ここでは行わずに個別で行うようにしてください。

	// 回復しないボス戦と共通のスタート処理
	CallFunc("system:boss_start_noheal")

	//MTDのSE鳴らさない
	SetFlag( SF_NOUSE_MTDSE, 1 )

	//パーティキャラ位置設定
	ResetPartyPos()
	ResetFollowPoint()

	//カメラセット
	ResetCameraObserver(0)
	ResetCameraZPlane()
	FixCamera()

	//武器構え
	SetChrWork( "PLAYER1" , CWK_BATTLEMODE , 1 )
	SetChrWork( "PLAYER2" , CWK_BATTLEMODE , 1 )
	SetChrWork( "PLAYER3" , CWK_BATTLEMODE , 1 )
	ChangeAnimation( "PLAYER1" , "ANI_WAIT", -1 , 1 )
	ChangeAnimation( "PLAYER2" , "ANI_WAIT", -1 , 1 )
	ChangeAnimation( "PLAYER3" , "ANI_WAIT", -1 , 1 )

	//アニメの変更を待つ
	Wait(30)
//	WaitAnimation2( "PLAYER1" , -1, 1, "ANI_WAIT",  0)
//	WaitAnimation2( "PLAYER2" , -1, 1, "ANI_WAIT",  0)
//	WaitAnimation2( "PLAYER3" , -1, 1, "ANI_WAIT",  0)

	//MTDのSE鳴らす
	SetFlag( SF_NOUSE_MTDSE, 0 )
}

// 回復しないボス戦スタート
function "boss_start_noheal"
{
	//イベントバトル用フラグ設定
	SetFlag(SF_BOSS_BATTLE,1)		//ボス戦中
	SetFlag(SF_CANTSAVE,1)			//セーブ不可
	SetFlag(SF_CAMP_CANT_FORMATION, 1)	// キャンプメニュー：編成禁止
	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
	SetFlag( SF_REDENTRYLINE, 1)	// エントリー表示を赤色に
}

function "boss_end"
{

	//MTDのSE鳴らさない
	SetFlag( SF_NOUSE_MTDSE, 1 )

	FadeOut(FADE_WHITE,FADE_SLOW)
	WaitFade()

	SetStopFlag(STOPFLAG_EVENT)
	SaveCamera()

	SetFlag(SF_ALLMUTEKI,0)		//無敵ＯＦＦ

	//エフェクトの停止
	StopEffect(-1,ALL,1)

	EarthQuake( 0 , 0 , 0 )		//揺れ止める
	Blur(BLUR_TYPE_AFTERIMAGE,0,0)	//ブラー止める

	//モブどかす
	ResetChrPos((CHRTYPE_MONS | REMOVE_POS))

	// フラグ解除等（SF_BOSS_BATTLEのみイベント内で対処して下さい）
	SetFlag(SF_CANTSAVE,0)			//セーブ不可
	SetFlag(SF_CAMP_CANT_FORMATION, 0)	// キャンプメニュー：編成禁止解除
	SetFlag( SF_REDENTRYLINE, 0)	// エントリー表示を赤色に
	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ

	//ボス戦はHP回復のみ
	HP_Recover( 9999 )

	Wait(30)	//ボスモードの解除を待つウェイト

	CallFunc("system:camera_reset")

	//MTDのSE鳴らす
	SetFlag( SF_NOUSE_MTDSE, 0 )
}

function "LP_cook"
{
	SetStopFlag(STOPFLAG_TALK)
	TurnToChr( "LEADER" , this , 7.5f )
	Wait(10)

	ShopOpen( SHOP_ID_COOK, -1 )		//◆料理作成テスト

	ResetStopFlag(STOPFLAG_TALK)

}
function "Set_MedalLP"
{
	if (WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1201  || WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1202 ||		//漂流村にいるとき起動
		WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1201_2 || WORK[WK_MAPNAMENO] == MN_T_VILLAGE_MP1202_2)
	{
		if (GOTITEMWORK[ICON3D_AC_067] || GOTITEMWORK[ICON3D_AC_068] || GOTITEMWORK[ICON3D_AC_069])	//行動メンバー変更　一度でもメダルを入手していたら
		{
			SetChrPos("LP_chkpt",40.91f,-1420.22f,10.99f )
		}
	}
	SetFlag(GF_HELP_A54,1)
}


function "event_chrinfoflag_set"	//漂流村で行うイベントは必ず呼び出す
{
// ※INFO_FLAGのフラグは文字列。以下の羅列	例 FHV 何もない時は--------とかで
//A - いつでも計算 （重いのでよほどの事がない限り使ってはいけない）     INFOFLAG_ANYTIMECALC	
//C - 見えないあたりを無視する（CTあたりを無視する）      				INFOFLAG_NOCHKINVCOLL	
//E - キャラにあたらない        										INFOFLAG_NOCHRATARI		
//F - 固定（押したりできない）回転は可能								INFOFLAG_FIXED			
//G - ガード（イベント入ってる時はイベント攻撃のみ有効になる）			INFOFLAG_GUARD			
//H - 高さ固定（無重力）                    							INFOFLAG_NOGRAVITY		
//M - 移動時にあたりを無視する（地面チェックは入るはず）    			INFOFLAG_NOMAPATARICHECK
//N - あたり計算しない          										INFOFLAG_NOATARI		
//P - 他のキャラに押されない（"F"と違って自分で動ける）					INFOFLAG_NOPUSH			
//R - 復活しない（マップ切り替えるまでこの世界から存在が完全に消える）	INFOFLAG_NORESURRECT	
//S - 影いらない                										INFOFLAG_NOSHADOW		
//T - 会話時に振り向かない      										INFOFLAG_NOTALKTURN		
//V - 見えない                  										INFOFLAG_INVISIBLE		
//W - 会話時にモーションしない  										INFOFLAG_NOTALKMOTION	
//Z - 無敵                      										INFOFLAG_MUTEKI			
//D - 寝てる                    										INFOFLAG_NETERU			
//K - リアル影なし              										INFOFLAG_NOREALSHADOW	

	SetChrInfoFlagStr(Barbaross,"----EZGP---")
	SetChrInfoFlagStr(Barbaross2,"----EZGP---")
	SetChrInfoFlagStr(Kuina    ,"----EZGP---")
	SetChrInfoFlagStr(Kiergaard,"----EZGP---")
	SetChrInfoFlagStr(Aaron    ,"----EZGP---")
	//SetChrInfoFlagStr(Franz    ,"----EZGP---")
	//SetChrInfoFlagStr(Miralda  ,"----EZGP---")
	SetChrInfoFlagStr(Katrin   ,"----EZGP---")
	SetChrInfoFlagStr(Licht    ,"----EZGP---")
	SetChrInfoFlagStr(Alison   ,"----EZGP---")
	//SetChrInfoFlagStr(Kashu    ,"----EZGP---")
	//SetChrInfoFlagStr(Reja     ,"----EZGP---")
	SetChrInfoFlagStr(Dina     ,"----EZGP---")
	//SetChrInfoFlagStr(Nia      ,"----EZGP---")
	//SetChrInfoFlagStr(Curran   ,"----EZGP---")
	//SetChrInfoFlagStr(Ed       ,"----EZGP---")
	//SetChrInfoFlagStr(Silvia   ,"----EZGP---")
	//SetChrInfoFlagStr(Austen   ,"----EZGP---")
	SetChrInfoFlagStr(Baby     ,"----EZGP---")
	SetChrInfoFlagStr(Thanatos ,"----EZGP---")
	SetChrInfoFlagStr(Dogi     ,"----EZGP---")
	SetChrInfoFlagStr(Paro     ,"---SEZGP---")
	SetChrInfoFlagStr(Rex      ,"----EZGP---")
	//SetChrInfoFlagStr(Griselda ,"----EZGP---")
	SetChrInfoFlagStr(Sahad,  "----EZGP---")
	SetChrInfoFlagStr(Laxia,  "----EZGP---")
	SetChrInfoFlagStr(Hummel, "----EZGP---")
	SetChrInfoFlagStr(Ricotta,"----EZGP---")
	SetChrInfoFlagStr(Dana,   "----EZGP---")
	SetChrInfoFlagStr(ADOL,   "----EZGP---")
	SetChrInfoFlagStr(LAXIA,  "----EZGP---")
	SetChrInfoFlagStr(SAHAD,  "----EZGP---")
	SetChrInfoFlagStr(HUMMEL, "----EZGP---")
	SetChrInfoFlagStr(RICOTTA,"----EZGP---")
	SetChrInfoFlagStr(DANA,   "----EZGP---")
	SetChrInfoFlagStr(Picard,   "----EZGP---")
	SetChrInfoFlagStr(Monkey,   "----EZGP---")

	//任意キャラ（Load_XXX_Eventを優先させる）
	if(FLAG[GF_SUBEV_JOIN_REJA]){
		SetChrInfoFlagStr(Reja     ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_MIRALDA]){
		SetChrInfoFlagStr(Miralda  ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_FRANZ]){
		SetChrInfoFlagStr(Franz    ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_ED]){
		SetChrInfoFlagStr(Ed       ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_SILVIA]){
		SetChrInfoFlagStr(Silvia   ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_NIA]){
		SetChrInfoFlagStr(Nia      ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_GRISELDA]){
		SetChrInfoFlagStr(Griselda ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_KASHU]){
		SetChrInfoFlagStr(Kashu    ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_AUSTEN]){
		SetChrInfoFlagStr(Austen   ,"----EZGP---")
	}
	if(FLAG[GF_02MP1307_JOIN_KIERGAARD] && !FLAG[GF_02MP1201_START_HEARING]){
		SetChrInfoFlagStr(Curran   ,"----EZGP---")
	}
	if(FLAG[GF_SUBEV_JOIN_CURRAN2]){
		SetChrInfoFlagStr(Curran   ,"----EZGP---")
	}

//◆必要に応じて過去編NPCも追加する

}


function "ReleaseChr_NPCALL"
{
	ReleaseChr(Barbaross)
	ReleaseChr(Kuina    )
	ReleaseChr(Kiergaard)
	ReleaseChr(Aaron    )
	ReleaseChr(Franz    )
	ReleaseChr(Miralda  )
	ReleaseChr(Katrin   )
	ReleaseChr(Licht    )
	ReleaseChr(Alison   )
	ReleaseChr(Kashu    )
	ReleaseChr(Reja     )
	ReleaseChr(Dina     )
	ReleaseChr(Nia      )
	ReleaseChr(Curran   )
	ReleaseChr(Ed       )
	ReleaseChr(Silvia   )
	ReleaseChr(Austen   )
	ReleaseChr(Baby     )
	ReleaseChr(Thanatos )
	ReleaseChr(Dogi     )
	ReleaseChr(Paro     )
	ReleaseChr(Rex      )
	ReleaseChr(Griselda )

	ReleaseChr(Sahad    )
	ReleaseChr(Laxia    )
	ReleaseChr(Hummel   )
	ReleaseChr(Ricotta  )
	ReleaseChr(Dana     )

	ReleaseChr(Monkey	)
	ReleaseChr(Picard	)
	ReleaseChr(PicardS	)
	ReleaseChr(PicardT	)
}
//	GF_SUBEV_JOIN_AUSTEN,			// オースティンと合流した
//	GF_SUBEV_JOIN_KASHU,			// カシューと合流した
//	GF_SUBEV_JOIN_GRISELDA,			// グリゼルダと合流した
//	GF_SUBEV_JOIN_NIA,				// シスター・ニアと合流した
//	GF_SUBEV_JOIN_SILVIA,			// シルヴィアと合流した
//	GF_SUBEV_JOIN_ED,				// エドと合流した	
//	GF_SUBEV_JOIN_FRANZ,			// フランツと合流した
//	GF_SUBEV_JOIN_MIRALDA,			// ミラルダと合流した
//	GF_SUBEV_JOIN_REJA,				// レーヤと合流した
//	GF_SUBEV_JOIN_CURRAN2,			// カーラン卿と再び合流した



//任意キャライベント用

function "Load_Reja_Event"
{
	if(FLAG[GF_SUBEV_JOIN_REJA]){
		LoadChr( Reja )
	}
	else {
		SetChrInfoFlag("Reja",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Reja",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Miralda_Event"
{
	if(FLAG[DF_JOIN_MIRALDA]){
		LoadChr( Miralda )
	}
	else {
		SetChrInfoFlag("Miralda",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Miralda",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Franz_Event"
{
	if(FLAG[DF_JOIN_FRANZ]){
		LoadChr( Franz )
	}
	else {
		SetChrInfoFlag("Franz",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Franz",INFOFLAG_NOCHRATARI)
	}

}
function "Load_Ed_Event"
{
	if(FLAG[DF_JOIN_ED]){
		LoadChr( Ed )
	}
	else {
		SetChrInfoFlag("Ed",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Ed",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Silvia_Event"
{
	if(FLAG[DF_JOIN_SILVIA]){
		LoadChr( Silvia )
	}
	else {
		SetChrInfoFlag("Silvia",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Silvia",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Nia_Event"
{
	if(FLAG[DF_JOIN_NIA]){
		LoadChr( Nia )
	}
	else {
		SetChrInfoFlag("Nia",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Nia",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Griselda_Event"
{
	if(FLAG[DF_JOIN_GRISELDA]){
		LoadChr( Griselda )
	}
	else {
		SetChrInfoFlag("Griselda",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Griselda",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Kashu_Event"
{
	if(FLAG[DF_JOIN_KASHU]){
		LoadChr( Kashu )
	}
	else {
		SetChrInfoFlag("Kashu",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Kashu",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Austen_Event"
{
	if(FLAG[DF_JOIN_AUSTEN]){
		LoadChr( Austen )
	}
	else {
		SetChrInfoFlag("Austen",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Austen",INFOFLAG_NOCHRATARI)
	}
}
function "Load_Curran2_Event"	//再合流版
{
	if(FLAG[DF_JOIN_CURRAN]){
		LoadChr( Curran )
	}
	else {
		SetChrInfoFlag("Curran",INFOFLAG_NOSHADOW)
		SetChrInfoFlag("Curran",INFOFLAG_NOCHRATARI)
	}
}

function "Load_FreeNPC_Event"
{
	CallFunc("system:Load_Austen_Event")
	CallFunc("system:Load_Kashu_Event")
	CallFunc("system:Load_Griselda_Event")
	CallFunc("system:Load_Nia_Event")
	CallFunc("system:Load_Silvia_Event")
	CallFunc("system:Load_Ed_Event")
	CallFunc("system:Load_Franz_Event")
	CallFunc("system:Load_Miralda_Event")
	CallFunc("system:Load_Reja_Event")
	CallFunc("system:Load_Curran2_Event")
}

function "Load_Barbaross"
{
	if((Barbaross.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Barbaross )
		
		if(!FLAG[DF_JOIN_BARBAROSS]){
			SetChrPos("Barbaross",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Kuina"
{
	if((Kuina.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Kuina )
		
		if(!FLAG[DF_JOIN_KUINA]){
			SetChrPos("Kuina",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Kiergaard"
{
	if((Kiergaard.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Kiergaard )
		
		if(!FLAG[DF_JOIN_KIERGAARD]){
			SetChrPos("Kiergaard",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Aaron"
{
	if((Aaron.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Aaron )
		
		if(!FLAG[DF_JOIN_AARON]){
			SetChrPos("Aaron",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Franz"
{
	if((Franz.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Franz )
		
		if(!FLAG[DF_JOIN_FRANZ]){
			SetChrPos("Franz",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Miralda"
{
	if((Miralda.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Miralda )
		
		if(!FLAG[DF_JOIN_MIRALDA]){
			SetChrPos("Miralda",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Katrin"
{
	if((Katrin.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Katrin )
		
		if(!FLAG[DF_JOIN_KATRIN]){
			SetChrPos("Katrin",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Licht"
{
	if((Licht.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Licht )
		
		if(!FLAG[DF_JOIN_LICHT]){
			SetChrPos("Licht",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Alison"
{
	if((Alison.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Alison )
		
		if(!FLAG[DF_JOIN_ALISON]){
			SetChrPos("Alison",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Kashu"
{
	if((Kashu.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Kashu )
		
		if(!FLAG[DF_JOIN_KASHU]){
			SetChrPos("Kashu",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Reja"
{
	if((Reja.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Reja )
		
		if(!FLAG[DF_JOIN_REJA]){
			SetChrPos("Reja",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Dina"
{
	if((Dina.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Dina )
		
		if(!FLAG[DF_JOIN_DINA]){
			SetChrPos("Dina",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Nia"
{
	if((Nia.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Nia )
		
		if(!FLAG[DF_JOIN_NIA]){
			SetChrPos("Nia",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Curran"
{
	if((Curran.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Curran )
		
		//if(!FLAG[DF_JOIN_CURRAN]){
			SetChrPos("Curran",-100000.0f, 0.00f, 0.00f)
		//}
	}
}
function "Load_Ed"
{
	if((Ed.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Ed )
		
		if(!FLAG[DF_JOIN_ED]){
			SetChrPos("Ed",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Silvia"
{
	if((Silvia.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Silvia )
		
		if(!FLAG[DF_JOIN_SILVIA]){
			SetChrPos("Silvia",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Austen"
{
	if((Austen.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Austen )
		
		if(!FLAG[DF_JOIN_AUSTEN]){
			SetChrPos("Austen",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Baby"
{
	if((Baby.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Baby )
		
		if(!FLAG[DF_JOIN_ALISON] || !FLAG[DF_JOIN_ED])){
			SetChrPos("Baby",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Thanatos"
{
	if((Thanatos.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Thanatos )
		
		if(!FLAG[DF_JOIN_THANATOS]){
			SetChrPos("Thanatos",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Dogi"
{
	if((Dogi.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Dogi )
	}
}
function "Load_Paro"
{
	if((Paro.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Paro )
	}
}
function "Load_Rex"
{
	if((Rex.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Rex )
	}
}

function "Load_Griselda"
{
	if((Griselda.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Griselda )
		if(!FLAG[DF_JOIN_GRISELDA]){
			SetChrPos("Griselda",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Sahad"
{
	if((Sahad.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Sahad )
		
		if(!FLAG[DF_JOIN_SAHAD]){
			SetChrPos("Sahad",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Laxia"
{
	if((Laxia.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Laxia )
		
		if(!FLAG[DF_JOIN_LAXIA]){
			SetChrPos("Laxia",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Hummel"
{
	if((Hummel.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Hummel )
		
		if(!FLAG[DF_JOIN_HUMMEL]){
			SetChrPos("Hummel",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Ricotta"
{
	if((Ricotta.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Ricotta )
		
		if(!FLAG[DF_JOIN_RICOTTA]){
			SetChrPos("Ricotta",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_Dana"
{
	if((Dana.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Dana )
		
		if(!FLAG[DF_JOIN_DANA]){
			SetChrPos("Dana",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Curran2"	//再合流版
{
	if((Curran.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Curran )
		
		if(!FLAG[DF_JOIN_CURRAN]){
			SetChrPos("Curran",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "Load_Monkey"
{
	if((Monkey.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Monkey )
	}
}
function "Load_Picard"
{
	if((Picard.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( Picard )
		
		if(!FLAG[DF_JOIN_REJA]){
			SetChrPos("Picard",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_PicardS"
{
	if((PicardS.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( PicardS )
		
		if(!FLAG[DF_JOIN_REJA]){
			SetChrPos("PicardS",-100000.0f, 0.00f, 0.00f)
		}
	}
}
function "Load_PicardT"
{
	if((PicardT.CHRWORK[CWK_POSX]) > -50000.0f){
		LoadChr( PicardT )
		
		if(!FLAG[DF_JOIN_REJA]){
			SetChrPos("PicardT",-100000.0f, 0.00f, 0.00f)
		}
	}
}

function "himorogi_grow"
{
		MapAnime("gim01", "close")
		MapAnime("gim02", "close")
		MapAnime("gim03", "close")
		MapAnime("gim04", "close")
		MapAnime("gim05", "close" )	

	if (FLAG[GF_04MP6401M_GO_MP6101M]){
		MapAnime("gim01", "open")
	}
	if (FLAG[GF_04MP6201_DIS_OBSTACLE]){		//参道の障害が消滅する
		MapAnime("gim02", "open")
	}
	if (FLAG[GF_05MP6204_APPEAR_CASTLE]) {		// ▼第五部 [M05S230][消滅した王宮が復活する]
		MapAnime("gim03", "open")
	}
	if (FLAG[GF_05MP6201M_GOTO_BAHA]){			// ▼ [M05S072][過去Ⅲ　ダーナが塔へ向かう３]
		MapAnime("gim04", "open")
	}
	if (FLAG[GF_05MP6105_GOTO_VALLAY]) {		// ▼[M05S410][王都の谷を目指す]
		MapAnime("gim05" , "open" )	
	}
}

///////////////////////////////////////////////////////////////
// 過去編遷移用ファンクション
///////////////////////////////////////////////////////////////
function "BackTo_EPISODE_D1"		//ダーナ編①開始
{
//▼▼▼▼▼▼　ステータス設定：過去ダーナ：ダーナ①　▼▼▼▼▼▼
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 1)
	//SetFlag(SF_PAST_AGAIN, 1)		//再訪できない
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_D1A_TEM, 1)		//▼ダーナ編①Ａ寺院内を歩く
	SetFlag(GF_PAST_EPISODE_D1B_CANYON, 1)	//▼ダーナ編①Ｂ大峡谷を攻略する	※開始タイミングで下ろします

	UseFood(-1)		// 料理効果解除

	// アイテムとかステータスとかバックアップ＆所持品削除
	SavePartyMember()							// 現在のパーティ編成を覚える
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現在のアイテムをバックアップ＆消去
	CopyStatus("PARTY_DANACOPY", "PARTY_DANA")	// 現在のダーナ―のステータス／装備／スキル設定をバックアップ

	//ItemBackup(BACKUP_DELETE_ALL, BACKUP_STACK_DANA)	// ダーナ編のバックアップアイテムを全て消去しておく			//2周目でも引き継いでいるように注釈化。アイテム引き継ぎをしない場合は、ゲームスタート時に消去する

	if(FLAG[SF_2NDSTART])	//2周目
	{
		ItemBackup(BACKUP_RESTORE, BACKUP_STACK_DANA)		// ダーナ編のバックアップでリストアする
	}

		// パーティ編成可能状況バックアップ
	SetFlag(SF_ADOL_JOINOKBK, FLAG[SF_ADOL_JOINOK])
	SetFlag(SF_LAXIA_JOINOKBK, FLAG[SF_LAXIA_JOINOK])
	SetFlag(SF_SAHAD_JOINOKBK, FLAG[SF_SAHAD_JOINOK])
	SetFlag(SF_HUMMEL_JOINOKBK, FLAG[SF_HUMMEL_JOINOK])
	SetFlag(SF_RICOTTA_JOINOKBK, FLAG[SF_RICOTTA_JOINOK])
	SetFlag(SF_DANA_JOINOKBK, FLAG[SF_DANA_JOINOK])
		// ダーナ一人だけにする
	SetFlag(SF_ADOL_JOINOK, 0)
	SetFlag(SF_LAXIA_JOINOK, 0)
	SetFlag(SF_SAHAD_JOINOK, 0)
	SetFlag(SF_HUMMEL_JOINOK, 0)
	SetFlag(SF_RICOTTA_JOINOK, 0)
	SetFlag(SF_DANA_JOINOK, 1)
	SetPartyMember(PARTY_DANA, -1, -1)			// ダーナ一人に

		// 冒険具の設定（バックアップはItemBackupで終わっている）
	SetFlag(SF_ITEMSLOT_NUMBK, FLAG[SF_ITEMSLOT_NUM])		// スロット数バックアップ
	SetFlag(SF_ITEMSLOT_NUM, 1)					// スロットは一つに
	ChangeItemSlot(0, -1)						// 外す
	ChangeItemSlot(1, -1)						// 外す
	ChangeItemSlot(2, -1)						// 外す
	ChangeItemSlot(3, -1)						// 外す
	ChangeItemSlot(4, -1)						// 外す
	ChangeItemSlot(5, -1)						// 外す

		// その他バックアップ＆設定
	SetFlag(SF_SPMAXBK, FLAG[SF_SPMAX])			// SP最大値を控える
	SetFlag(SF_SPMAX, 200)						// SP最大値を200に
//	SetFlag(SF_CANTGAINEXP, 1)					// 経験値入手禁止
	SetFlag(SF_CANTLEARN_SKILL,1)				// スキル習得禁止
	SetFlag(GF_EXPOWER_BAK_ADOL,FLAG[SF_EXPOWER])	//現代編のEXゲージをバックアップ
	SetFlag(SF_EXPOWER,100000)	//初回なので過去編のEXゲージを満タンに

	//レコード表記の制御
	SetFlag(GF_ADOLSIDE_FAME,0)			//レコード：アドルサイドの名声値表記名をOFF
	SetFlag(GF_DANASIDE_FAME,1)			//レコード：ダーナサイドの名声値表記名をON

		// レベル設定

	if (DANAOLD.CHRWORK[CWK_LV] < 2)
	{
		// 過去編初めての場合はステータスを設定する
		SetFlag(SF_DEBUG, 1)		// SetLevelを現在レベルに関係なく適用できるようにする
		SetLevel(DANA, 43)							// LV60に
		SetFlag(SF_DEBUG, 0)		// 解除
	}
	else
	{
		CopyStatus("PARTY_DANA", "PARTY_DANAOLD")	// 過去のダーナのステータス／装備／スキル設定から読み出す
	}

	if(!FLAG[SF_2ND_TAKEOVER_SKILL])		//スキルを引き継いでいない
	{
		GetSkill(PARTY_DANA, -1, -1)				// スキル全部忘れる
		//SetSkillShortCut(PARTY_DANA, -1, -1)		// スキルショートカットを全て外す
		//GetSkill(PARTY_DANA, -1, 3)					// 現在のレベルで習得できる物を全て習得する
		//SetSkillShortCut(PARTY_DANA, -1, 0)			// 現在のレベルに見合ったものに自動設定
		GetSkill(PARTY_DANA, SKILL_DANA_SP_C3, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_C4, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_B5, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_A2, 1)
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_CIRCLE,	SKILL_DANA_SP_C3)	//ウォーターシュート
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_CROSS,		SKILL_DANA_SP_B5)	//ミストラルエッジ
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_SQUARE,	SKILL_DANA_SP_A2)	//蒼輪舞踏
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_TRIANGLE,	SKILL_DANA_SP_C4)	//竜気
	}

	// 初期入手アイテム
	GetItem(ICON3D_DOUBLEJUMP, 1)				// ２段ジャンプを取得
	GetItem(ICON3D_WP_DANA_004, 1)				// 武器
	GetItem(ICON3D_MAIDEN_NOTE, 1)				// ダーナの手記

	ChangeItemSlot(0, ICON3D_DOUBLEJUMP)		// ２段ジャンプブーツ設定
	EquipWeapon(DANA, ICON3D_WP_DANA_004)		// クレシェント

	if(!FLAG[SF_2ND_TAKEOVER_EQUIP])	//2周目：装備引き継ぎを選択していない場合
	{
		GetItem(ICON3D_AM_023, 1)					// 防具

	}
	// 装備設定
	EquipArmor(DANA, ICON3D_AM_023)				// ダーナ初期防具

	//HP装備付け替え分を回復
	HP_Recover( 9999 )

		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ
	//SetFlag( SF_MISSIONNO, MS_08_D1A )	//★冒険メモ：寺院を一回りしてから侍女アトラに話し掛けよう

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ

}

function "ReturnFrom_EPISODE_D1"		//ダーナ編①終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	//SetFlag(SF_PAST_AGAIN, 0)		//再訪できない
	SetFlag(GF_PAST_EPISODE_D1A_TEM, 0)		//▼ダーナ編①Ａ寺院内を歩く
	SetFlag(GF_PAST_EPISODE_D1B_CANYON, 0)	//▼ダーナ編①Ｂ大峡谷を攻略する

	//レコード表記の制御
	SetFlag(GF_ADOLSIDE_FAME,1)			//レコード：アドルサイドの名声値表記名をON
	SetFlag(GF_DANASIDE_FAME,0)			//レコード：ダーナサイドの名声値表記名をOFF

	UseFood(-1)		// 料理効果解除

//		// 装備品を外す（レベル・スキルはCopyStatusで戻るので特に何もしない）	// ◆PS4版ではバックアップ時に消されているので、設定不要に。
//	EquipWeapon(DANA, -1)						// エーデルスフィア
//	EquipArmor(DANA, -1)						// 防具外す

		// その他リストア＆設定戻し
	SetFlag(SF_SPMAX, FLAG[SF_SPMAXBK])			// SP最大値を戻す
//	SetFlag(SF_CANTGAINEXP, 0)					// 経験値入手禁止を解除
	SetFlag(SF_CANTLEARN_SKILL,0)				// スキル習得禁止を解除
	SetFlag(GF_EXPOWER_BAK_DANA,FLAG[SF_EXPOWER])	//過去編のEXゲージをバックアップ
	SetFlag(SF_EXPOWER,FLAG[GF_EXPOWER_BAK_ADOL])	//現代編のEXゲージをリストア

		// 冒険具の設定
	SetFlag(SF_ITEMSLOT_NUM, FLAG[SF_ITEMSLOT_NUMBK])	// スロット数を戻す

//		// 不要なアイテムの削除（装備や初期所持品等）		// ◆PS4版ではバックアップ時に消されているので、設定不要に。
//	DeleteItem(ICON3D_WP_DANA_004, 999)
//	DeleteItem(ICON3D_AM_023, 999)				//ダーナ初期防具削除
//	DeleteItem(ICON3D_DOUBLEJUMP, 999)
//	DeleteItem(ICON3D_AC_024, 999)				// アクセサリ：森羅の護符

	CopyStatus("PARTY_DANAOLD", "PARTY_DANA")	// 過去のダーナのステータス／装備／スキル設定をバックアップ

		// パーティ編成可能状況を戻す
	SetFlag(SF_ADOL_JOINOK, FLAG[SF_ADOL_JOINOKBK])
	SetFlag(SF_LAXIA_JOINOK, FLAG[SF_LAXIA_JOINOKBK])
	SetFlag(SF_SAHAD_JOINOK, FLAG[SF_SAHAD_JOINOKBK])
	SetFlag(SF_HUMMEL_JOINOK, FLAG[SF_HUMMEL_JOINOKBK])
	SetFlag(SF_RICOTTA_JOINOK, FLAG[SF_RICOTTA_JOINOKBK])
	SetFlag(SF_DANA_JOINOK, FLAG[SF_DANA_JOINOKBK])

//	CallFunc("system:SaveFruits")				// 過去編の果物を保存	// ◆PS4版ではバックアップからリストアされているはずなので、設定不要に。

		// アイテムとかステータスとかリストア
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_DANA)	// ダーナ編アイテムをバックアップ
	CopyStatus("PARTY_DANA", "PARTY_DANACOPY")	// バックアップから現在のダーナに上書き
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムをリストア
	ItemBackup(BACKUP_MERGE, BACKUP_STACK_DANA)		// ダーナ編の素材をマージ
	ItemBackup(BACKUP_DELETE_MATERIAL, BACKUP_STACK_DANA)	// ダーナ編から素材を削除
	RestorePartyMember()						// パーティメンバーを戻す

		// 特殊処理：初期スキルのNewマークを消す
	DelSkillNewMark(PARTY_DANA, SKILL_DANA_SP_C3)	//ウォーターシュート
	DelSkillNewMark(PARTY_DANA, SKILL_DANA_SP_C4)	//竜気
	DelSkillNewMark(PARTY_DANA, SKILL_DANA_SP_B5)	//ミストラルエッジ
	DelSkillNewMark(PARTY_DANA, SKILL_DANA_SP_A2)	//蒼輪舞踏

	//HP装備付け替え分を回復
	HP_Recover( 9999 )
													
		// 冒険メモ処理
	//SetFlag( SF_MISSIONNO, (FLAG[GF_BACKUP_SF_MISSIONNO]) )		//バックアップ戻す

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

//-------------------

function "BackTo_EPISODE_D3"		//ダーナ編③開始
{
//▼▼▼▼▼▼　ステータス設定：過去ダーナ：ダーナ③　▼▼▼▼▼▼	//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 1)
	//SetFlag(SF_PAST_AGAIN, 1)		//再訪できない
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_D3_WALK_CAPITAL, 1)	//▼ダーナ編③王都を歩く

	UseFood(-1)		// 料理効果解除

		// アイテムとかステータスとかバックアップ＆所持品削除
	SavePartyMember()							// 現在のパーティ編成を覚える
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現在のアイテムをバックアップ＆消去
	CopyStatus("PARTY_DANACOPY", "PARTY_DANA")	// 現在のダーナ―のステータス／装備／スキル設定をバックアップ
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_DANA)	// ダーナ編のバックアップでリストアする

		// パーティ編成可能状況バックアップ
	SetFlag(SF_ADOL_JOINOKBK, FLAG[SF_ADOL_JOINOK])
	SetFlag(SF_LAXIA_JOINOKBK, FLAG[SF_LAXIA_JOINOK])
	SetFlag(SF_SAHAD_JOINOKBK, FLAG[SF_SAHAD_JOINOK])
	SetFlag(SF_HUMMEL_JOINOKBK, FLAG[SF_HUMMEL_JOINOK])
	SetFlag(SF_RICOTTA_JOINOKBK, FLAG[SF_RICOTTA_JOINOK])
	SetFlag(SF_DANA_JOINOKBK, FLAG[SF_DANA_JOINOK])

		// ダーナ一人だけにする
	SetFlag(SF_ADOL_JOINOK, 0)
	SetFlag(SF_LAXIA_JOINOK, 0)
	SetFlag(SF_SAHAD_JOINOK, 0)
	SetFlag(SF_HUMMEL_JOINOK, 0)
	SetFlag(SF_RICOTTA_JOINOK, 0)
	SetFlag(SF_DANA_JOINOK, 1)
	SetPartyMember(PARTY_DANA, -1, -1)			// ダーナ一人に

		// 冒険具の設定（バックアップはItemBackupで終わっている）
	SetFlag(SF_ITEMSLOT_NUMBK, FLAG[SF_ITEMSLOT_NUM])		// スロット数バックアップ
	SetFlag(SF_ITEMSLOT_NUM, 1)					// スロットは一つに
	ChangeItemSlot(0, ICON3D_DOUBLEJUMP)		// ２段ジャンプブーツ設定
	ChangeItemSlot(1, -1)						// 外す
	ChangeItemSlot(2, -1)						// 外す
	ChangeItemSlot(3, -1)						// 外す
	ChangeItemSlot(4, -1)						// 外す
	ChangeItemSlot(5, -1)						// 外す
	
		// その他バックアップ＆設定
	SetFlag(SF_SPMAXBK, FLAG[SF_SPMAX])			// SP最大値を控える
	SetFlag(SF_SPMAX, 200)						// SP最大値を200に
//	SetFlag(SF_CANTGAINEXP, 1)					// 経験値入手禁止
	SetFlag(SF_CANTLEARN_SKILL,1)				// スキル習得禁止
	SetFlag(GF_EXPOWER_BAK_ADOL,FLAG[SF_EXPOWER])	//現代編のEXゲージをバックアップ
	SetFlag(SF_EXPOWER,FLAG[GF_EXPOWER_BAK_DANA])	//過去編のEXゲージをリストア

	//レコード表記の制御
	SetFlag(GF_ADOLSIDE_FAME,0)			//レコード：アドルサイドの名声値表記名をOFF
	SetFlag(GF_DANASIDE_FAME,1)			//レコード：ダーナサイドの名声値表記名をON

		// レベル設定
	if (DANAOLD.CHRWORK[CWK_LV] < 2)
	{
		// 過去編初めての場合はステータスを設定する
		SetFlag(SF_DEBUG, 1)		// SetLevelを現在レベルに関係なく適用できるようにする
		SetLevel(DANA, 43)							// LV60に
		SetFlag(SF_DEBUG, 0)		// 解除
		GetSkill(PARTY_DANA, -1, -1)				// スキル全部忘れる
		//SetSkillShortCut(PARTY_DANA, -1, -1)		// スキルショートカットを全て外す
		//GetSkill(PARTY_DANA, -1, 3)					// 現在のレベルで習得できる物を全て習得する
		//SetSkillShortCut(PARTY_DANA, -1, 0)			// 現在のレベルに見合ったものに自動設定
		GetSkill(PARTY_DANA, SKILL_DANA_SP_C3, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_C4, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_B5, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_A2, 1)
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_CIRCLE,	SKILL_DANA_SP_C3)	//ウォーターシュート
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_CROSS,		SKILL_DANA_SP_B5)	//ミストラルエッジ
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_SQUARE,	SKILL_DANA_SP_A2)	//蒼輪舞踏
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_TRIANGLE,	SKILL_DANA_SP_C4)	//竜気

		// 初期入手アイテム
		GetItem(ICON3D_DOUBLEJUMP, 1)				// ２段ジャンプを取得
		GetItem(ICON3D_WP_DANA_000, 1)				// 武器
		GetItem(ICON3D_AM_023, 1)					// 防具
		//GetItem(ICON3D_AC_024, 1)					// アクセサリ：森羅の護符

		ChangeItemSlot(0, ICON3D_DOUBLEJUMP)		// ２段ジャンプブーツ設定

			// 装備設定
		EquipWeapon(DANA, ICON3D_WP_DANA_000)		// エーデルスフィア
		EquipArmor(DANA, ICON3D_AM_023)				// ダーナ初期防具
		//EquipAccessory(DANA, ICON3D_AC_024,0)		// アクセサリ：森羅の護符

	}
	else
	{
		CopyStatus("PARTY_DANA", "PARTY_DANAOLD")	// 過去のダーナのステータス／装備／スキル設定から読み出す

		//ダーナ編②でもらった装備
		GetItem(ICON3D_WP_DANA_000, 1)				// 武器
		EquipWeapon(DANA, ICON3D_WP_DANA_000)		// エーデルスフィア
	}

	//HP装備付け替え分を回復
	HP_Recover( 9999 )

		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ
	//SetFlag( SF_MISSIONNO, MS_08_D3 )	//★冒険メモ：王都を一回りしてからエタニア王宮へ向かおう

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_D3"		//ダーナ編③終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	//SetFlag(SF_PAST_AGAIN, 0)		//再訪できない
	SetFlag(GF_PAST_EPISODE_D3_WALK_CAPITAL, 0)	//▼ダーナ編③王都を歩く

	//レコード表記の制御
	SetFlag(GF_ADOLSIDE_FAME,1)			//レコード：アドルサイドの名声値表記名をON
	SetFlag(GF_DANASIDE_FAME,0)			//レコード：ダーナサイドの名声値表記名をOFF

	UseFood(-1)		// 料理効果解除

//		// 装備品を外す（レベル・スキルはCopyStatusで戻るので特に何もしない）		// ◆PS4版ではバックアップ時に消されているので、設定不要に。
//	EquipWeapon(DANA, -1)						// エーデルスフィア
//	EquipArmor(DANA, -1)						// 防具外す

		// その他リストア＆設定戻し
	SetFlag(SF_SPMAX, FLAG[SF_SPMAXBK])			// SP最大値を戻す
//	SetFlag(SF_CANTGAINEXP, 0)					// 経験値入手禁止を解除
	SetFlag(SF_CANTLEARN_SKILL,0)				// スキル習得禁止を解除
	SetFlag(GF_EXPOWER_BAK_DANA,FLAG[SF_EXPOWER])	//過去編のEXゲージをバックアップ
	SetFlag(SF_EXPOWER,FLAG[GF_EXPOWER_BAK_ADOL])	//現代編のEXゲージをリストア

		// 冒険具の設定
	SetFlag(SF_ITEMSLOT_NUM, FLAG[SF_ITEMSLOT_NUMBK])	// スロット数を戻す

//		// 不要なアイテムの削除（装備や初期所持品等）		// ◆PS4版ではバックアップ時に消されているので、設定不要に。
//	DeleteItem(ICON3D_WP_DANA_000, 999)
//	DeleteItem(ICON3D_AM_023, 999)				//ダーナ初期防具削除
//	DeleteItem(ICON3D_DOUBLEJUMP, 999)
//	DeleteItem(ICON3D_AC_024, 999)				// アクセサリ：森羅の護符

	CopyStatus("PARTY_DANAOLD", "PARTY_DANA")	// 過去のダーナのステータス／装備／スキル設定をバックアップ

		// パーティ編成可能状況を戻す
	SetFlag(SF_ADOL_JOINOK, FLAG[SF_ADOL_JOINOKBK])
	SetFlag(SF_LAXIA_JOINOK, FLAG[SF_LAXIA_JOINOKBK])
	SetFlag(SF_SAHAD_JOINOK, FLAG[SF_SAHAD_JOINOKBK])
	SetFlag(SF_HUMMEL_JOINOK, FLAG[SF_HUMMEL_JOINOKBK])
	SetFlag(SF_RICOTTA_JOINOK, FLAG[SF_RICOTTA_JOINOKBK])
	SetFlag(SF_DANA_JOINOK, FLAG[SF_DANA_JOINOKBK])

//	CallFunc("system:SaveFruits")				// 過去編の果物を保存	// ◆PS4版ではバックアップからリストアされているはずなので、設定不要に。

		// アイテムとかステータスとかリストア
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_DANA)	// ダーナ編アイテムをバックアップ
	CopyStatus("PARTY_DANA", "PARTY_DANACOPY")	// バックアップから現在のダーナに上書き
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムをリストア
	ItemBackup(BACKUP_MERGE, BACKUP_STACK_DANA)		// ダーナ編の素材をマージ
	ItemBackup(BACKUP_DELETE_MATERIAL, BACKUP_STACK_DANA)	// ダーナ編から素材を削除
	RestorePartyMember()						// パーティメンバーを戻す

	//HP装備付け替え分を回復
	HP_Recover( 9999 )

		// 冒険メモ処理
	//SetFlag( SF_MISSIONNO, (FLAG[GF_BACKUP_SF_MISSIONNO]) )		//バックアップ戻す

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

//-------------------

function "BackTo_EPISODE_1"		//過去Ⅰ開始
{

//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅰ　▼▼▼▼▼▼	//◆ステータス仮

	// 過去編に入る
	SetFlag(SF_PAST_MODE, 1)
	SetFlag(SF_PAST_AGAIN, 1)
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_1_GO_CAMP, 1)	//▼過去編Ⅰアドルがいたポイントへ向かう
	SetFlag(GF_PAST_EPISODE_1B_REARRIVE, 1)	//▽過去編ⅠＢ再訪時	※メインイベント内ではOFFにします

	SetFlag( SF_WARP_DISABLED, 1 )		//ワープ使用不可

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない

		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ

	if(FLAG[GF_SUBEV_PAST_01_SPIRITA_2])	//一度クリアしている（再訪である）
	{
		//SetFlag( SF_MISSIONNO, MS_08_01C )	//★冒険メモ：改めて王都東の郊外へ向かおう
	}
	else
	{
		//SetFlag( SF_MISSIONNO, MS_08_01 )	//★冒険メモ：あの赤毛の剣士がいた、王都東の郊外へ向かおう
	}

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_1"		//過去Ⅰ終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	SetFlag(SF_PAST_AGAIN, 0)
	SetFlag(GF_PAST_EPISODE_1_GO_CAMP, 0)	//▼過去編Ⅰアドルがいたポイントへ向かう
	SetFlag(GF_PAST_EPISODE_1B_REARRIVE, 0)	//▽過去編ⅠＢ再訪時

	SetFlag( SF_WARP_DISABLED, 0 )		//ワープ使用許可

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない
}

//-------------------

function "BackTo_EPISODE_2"		//過去Ⅱ開始
{

//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅱ　▼▼▼▼▼▼	//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 1)
	SetFlag(SF_PAST_AGAIN, 1)
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_2_GO_SOUTHGATE, 1)	//▼過去編Ⅱ南門へ向かう
	SetFlag(GF_PAST_EPISODE_2B_REARRIVE, 1)	//▽過去編ⅡＢ再訪時	※メインイベント内ではOFFにします

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない
	
		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ

	if(FLAG[GF_SUBEV_PAST_02_QUEST_C])	//一度クリアしている（再訪である）
	{
		//SetFlag( SF_MISSIONNO, MS_08_02F )	//★冒険メモ：改めて王都南の橋へ向かおう
	}
	else
	{
		//SetFlag( SF_MISSIONNO, MS_08_02 )	//★冒険メモ：アドルさんを導くために、王都南の橋へ向かおう
	}

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_2"		//過去Ⅱ終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	SetFlag(SF_PAST_AGAIN, 0)
	SetFlag(GF_PAST_EPISODE_2_GO_SOUTHGATE, 0)	//▼過去編Ⅱ南門へ向かう
	SetFlag(GF_PAST_EPISODE_2B_REARRIVE, 0)	//▽過去編ⅡＢ再訪時

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない
}

//-------------------

function "BackTo_EPISODE_3"		//過去Ⅲ開始
{
//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅲ　▼▼▼▼▼▼	//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 1)
	SetFlag(SF_PAST_AGAIN, 1)
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_3_GO_BAHA, 1)	//▼過去編Ⅲバハの塔へ向かう
	SetFlag(GF_PAST_EPISODE_3B_REARRIVE, 1)	//▽過去編ⅢＢ再訪時	※メインイベント内ではOFFにします

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない
	
		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ

	if(FLAG[GF_SUBEV_PAST_03_HUNTA_KILL])	//一度クリアしている（再訪である）
	{
		//SetFlag( SF_MISSIONNO, MS_08_03C )	//★冒険メモ：バハの塔付近の脇道を調べてみよう
	}
	else
	{
		//SetFlag( SF_MISSIONNO, MS_08_03 )	//★冒険メモ：アドルさんを導くために、バハの塔へ向かおう
	}

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_3"		//過去Ⅲ終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	SetFlag(SF_PAST_AGAIN, 0)
	SetFlag(GF_PAST_EPISODE_3_GO_BAHA, 0)	//▼過去編Ⅲバハの塔へ向かう
	SetFlag(GF_PAST_EPISODE_3B_REARRIVE, 0)	//▽過去編ⅢＢ再訪時	※メインイベント内ではOFFにします

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない
}

//-------------------

function "BackTo_EPISODE_4"		//過去Ⅳ開始
{

//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅳ　▼▼▼▼▼▼	//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 1)
	SetFlag(SF_PAST_AGAIN, 1)
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_4_GO_CASTLE, 1)	//▼過去編Ⅳ王宮前へ向かう
	SetFlag(GF_PAST_EPISODE_4B_REARRIVE, 1)	//▽過去編ⅣＢ再訪時	※メインイベント内ではOFFにします

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない
	
		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ

//	if(FLAG[GF_05MP6202_GOTO_SKYWAY])	//一度クリアしている（再訪である）
//	{
//		//SetFlag( SF_MISSIONNO, MS_08_04 )	//★冒険メモ：アドルさんを導くために、エタニア王宮へ向かおう
//	}
//	else
//	{
//		//SetFlag( SF_MISSIONNO, MS_08_04 )	//★冒険メモ：アドルさんを導くために、エタニア王宮へ向かおう
//	}

	//SetFlag( SF_MISSIONNO, MS_08_04 )	//★冒険メモ：アドルさんを導くために、エタニア王宮へ向かおう

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_4"		//過去Ⅳ終了
{
		// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	SetFlag(SF_PAST_AGAIN, 0)
	SetFlag(GF_PAST_EPISODE_4_GO_CASTLE, 0)	//▼過去編Ⅳ王宮前へ向かう
	SetFlag(GF_PAST_EPISODE_4B_REARRIVE, 0)	//▽過去編ⅣＢ再訪時

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない
}

//-------------------

function "BackTo_EPISODE_4_2"		//過去Ⅳ－２開始
{
//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅳ－２　▼▼▼▼▼▼	//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 1)
	//SetFlag(SF_PAST_AGAIN, 1)		//再訪できない
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_4_2_GO_OUT, 1)	//▼過去編Ⅳ-２王宮の外へ向かう

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない

		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ
	//SetFlag( SF_MISSIONNO, MS_08_042 )	//★冒険メモ：救援に向かうために、王宮外の空中回廊に急ごう

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_4_2"		//過去Ⅳ－２終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	//SetFlag(SF_PAST_AGAIN, 0)		//再訪できない
	SetFlag(GF_PAST_EPISODE_4_2_GO_OUT, 0)	//▼過去編Ⅳ-２王宮の外へ向かう

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない
}

//-------------------

function "BackTo_EPISODE_5"		//過去Ⅴ開始
{
//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅴ　▼▼▼▼▼▼	//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 2)	//紋章なし化を無視する
	SetFlag(SF_PAST_AGAIN, 1)
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_5_GO_VALLAY, 1)	//▼過去編Ⅴ王家の谷へ向かう
	SetFlag(GF_PAST_EPISODE_5B_REARRIVE, 1)	//▽過去編ⅤＢ再訪時	※メインイベント内ではOFFにします

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない

		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ

//	if(FLAG[GF_05MP6203_GOTO_VALLEY])	//一度クリアしている（再訪である）
//	{
//		//SetFlag( SF_MISSIONNO, MS_08_05 )	//★冒険メモ：アドルさんを導くために、王家の谷の入り口を目指そう
//	}
//	else
//	{
//		//SetFlag( SF_MISSIONNO, MS_08_05 )	//★冒険メモ：アドルさんを導くために、王家の谷の入り口を目指そう
//	}

	//SetFlag( SF_MISSIONNO, MS_08_05 )	//★冒険メモ：アドルさんを導くために、王家の谷の入り口を目指そう

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_5"		//過去Ⅴ終了
{

	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	SetFlag(SF_PAST_AGAIN, 0)
	SetFlag(GF_PAST_EPISODE_5_GO_VALLAY, 0)	//▼過去編Ⅴ王家の谷へ向かう
	SetFlag(GF_PAST_EPISODE_5B_REARRIVE, 0)	//▽過去編ⅤＢ再訪時

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない

	if(FLAG[GF_SUBEV_PAST_05_QUEST_C] && !FLAG[GF_OLDITEM_TBOX_KEY])	//はぐれた避難民をクリア済なら現代編で鍵を入手
	{
		SetFlag(GF_OLDITEM_TBOX_KEY,1)
		GetItem(ICON3D_TBOX_KEY,1)		//宝箱の鍵
	}
}

//-------------------

function "BackTo_EPISODE_6"		//過去Ⅵ開始
{
//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅵ　▼▼▼▼▼▼		//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 2)	//紋章なし化を無視する
	SetFlag(SF_PAST_AGAIN, 1)
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２
	SetFlag(GF_PAST_EPISODE_6_GO_GARDEN, 1)	//▼過去編Ⅵセレンの園へ向かう
	SetFlag(GF_PAST_EPISODE_6B_REARRIVE, 1)	//▽過去編ⅥＢ再訪時	※メインイベント内ではOFFにします

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない

		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ

	if(FLAG[GF_SUBEV_PAST_06_GATE])	//一度クリアしている（再訪である）
	{
		//SetFlag( SF_MISSIONNO, MS_08_06D )	//★冒険メモ：中央区への抜け道を探そう
	}
	else
	{
		//SetFlag( SF_MISSIONNO, MS_08_06 )	//★冒険メモ：アドルさんを導くために、セレンの園を目指そう
	}
	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_6"		//過去Ⅵ終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	SetFlag(SF_PAST_AGAIN, 0)
	SetFlag(GF_PAST_EPISODE_6_GO_GARDEN, 0)	//▼過去編Ⅵセレンの園へ向かう
	SetFlag(GF_PAST_EPISODE_6B_REARRIVE, 0)	//▽過去編ⅥＢ再訪時

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない
}

function "BackTo_EPISODE_7"		//過去Ⅶ開始
{
//▼▼▼▼▼▼　ステータス設定：過去ダーナ：過去Ⅵ　▼▼▼▼▼▼		//◆ステータス仮
	// 過去編に入る
	SetFlag(SF_PAST_MODE, 2)	//紋章なし化を無視する
	SetFlag(SF_PAST_AGAIN, 1)
	SetFlag(GF_MENUSAVE_PAST_ITEM_ITEM, 0)// 過去アイテムメニュー位置リセット１
	SetFlag(GF_MENUSAVE_PAST_SCR_ITEM, 0)// 過去アイテムメニュー位置リセット２

	SetFlag(GF_PAST_EPISODE_7_ENDEPISODE, 1)	//▼過去編Ⅵセレンの園へ向かう
	if(FLAG[GF_SUBEV_PAST_07_TALK_OLGA])		// 過去編Ⅶ：▼オルガに報告する２　を見た
	{
		SetFlag(GF_PAST_EPISODE_7B_REARRIVE, 1)	//▽過去編ⅦＢ再訪時
	}

	CallFunc("system:ReturnFrom_Common")	//過去編開始共通処理	※ダーナ編には適用できない

		// 冒険メモ処理
	SetFlag( GF_BACKUP_SF_MISSIONNO, (FLAG[SF_MISSIONNO]) )		//バックアップ

	
	if(FLAG[GF_SUBEV_PAST_07_INTO_LAST])	//未クリアでも再訪可能なので全段階分岐する
	{
		//SetFlag( SF_MISSIONNO, MS_08_07D )	//★冒険メモ：地下聖堂で新たなに発見した階層を進んでみよう
	}
	else if(FLAG[GF_SUBEV_PAST_07_LOOK_STEP])
	{
		//SetFlag( SF_MISSIONNO, MS_08_07C )	//★冒険メモ：地下聖堂に入ったと思われるイオを追いかけよう
	}
	else if(FLAG[GF_SUBEV_PAST_07_TALK_OLGA])
	{
		//SetFlag( SF_MISSIONNO, MS_08_07B )	//★冒険メモ：王都を見て回ろう
	}
	else
	{
		//SetFlag( SF_MISSIONNO, MS_08_07 )	//★冒険メモ：王座の前にいるオルガに話しかけよう
	}
	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}

function "ReturnFrom_EPISODE_7"		//過去Ⅶ終了
{
	// 過去編から戻る（念の為、入る時の逆順で処理する）
	SetFlag(SF_PAST_MODE, 0)

	SetFlag(SF_PAST_AGAIN, 0)
	SetFlag(GF_PAST_EPISODE_7_ENDEPISODE, 0)	//▼過去編Ⅵセレンの園へ向かう
	SetFlag(GF_PAST_EPISODE_7B_REARRIVE, 0)	//▽過去編ⅥＢ再訪時

	CallFunc("system:BackTo_common")	//過去編終了-共通処理　※ダーナ編①③には対応できない
}

// 過去編メニューから「意識交代」
function "ReturnFrom_PastMenu"
{
	//開始処理ここから-----------------------------------------------
	SetStopFlag(STOPFLAG_EVENT)
	SetChrInfoFlag("LEADER",INFOFLAG_FLING)
	
//	SetStopFlag(STOPFLAG_FREEZE)
//	CrossFade(FADE_NORMAL)

	SetMotSpd("PLAYER1" , -1 , 0 )

//	ResetStopFlag(STOPFLAG_FREEZE)

	Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
	Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 0.0f, 0x00ffffff, 0x00000000)
	//Portrait_Anime(1 ,PR_ANIME_SCALE, 30.0f, 17.0f, 0, 0, 0)

	SetSkipScript(system:ReturnFrom_PastMenu_ED)

	Effect2(3900570, 879.794f , 4.292f , -94.925f, 0.0f, 0, 0, 0, 0, 0, 1.7f, 1.0f)	// 過去に飛ぶ時の画面切り替えエフェクト
	PlaySE(SE_GO_KAKO_1, 100, 1, 1500, 0, 1.0f, 0)	//水晶石と交信エフェクトループ	

	//Wait(180)
	Wait(90)
	PlaySE(SE_GO_KAKO_2, 80, 0, 0, 0, 1.0f, 0)	//	発光（過去編ワープ）
	Wait(60)
	PlaySE(SE_GO_KAKO_2, 80, 0, 0, 0, 1.0f, 0)	//	発光（過去編ワープ）
	Wait(30)

	StopBGM(120)
	PlaySE(SE_GO_KAKO_3, 100, 0, 0, 0, 1.0f, 0)	//	ホワイトアウト
	SetEnvSEPlayState(-1, 0)	//環境SE全停止
	StopSE(SE_GO_KAKO_1, 2000)

	// フェードアウト
	FadeOut(FADE_WHITE, FADE_SLOW)
	Wait(30)
	PlaySE(SE_GO_KAKO_2, 70, 0, 0, 0, 1.0f, 0)	//	発光（過去編ワープ）
	WaitFade()
	
	Wait(60)
	
	// 擬似フェードアウト表示
	Portrait_Anime(1 ,PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 1.0f, 0)

	// フェードイン
	FadeIn(FADE_WHITE, FADE_NORMAL)
	WaitFade()
	
	// フェードアウト
	FadeOut(FADE_BLACK, 0)
	WaitFade()

	CallFunc("system:ReturnFrom_PastMenu_ED")
}



function "ReturnFrom_PastMenu_ED"
{
	SetSkipScript("")												//終了処理はスキップ禁止

	SetMotSpd("PLAYER1" , -1 , 1.0f )
	VisualNameEnd()

	//NowLoading 時の Tips 表示をカット
	SetFlag( TF_LOADING_TIPS_OFF, 1 )

	//GF_PAST_EPISODE_1B_REARRIVE,		//▽過去編ⅠＢ再訪時
	//GF_PAST_EPISODE_2B_REARRIVE,		//▽過去編ⅡＢ再訪時
	//GF_PAST_EPISODE_3B_REARRIVE,		//▽過去編ⅢＢ再訪時
	//GF_PAST_EPISODE_4B_REARRIVE,		//▽過去編ⅣＢ再訪時
	//GF_PAST_EPISODE_5B_REARRIVE,		//▽過去編ⅤＢ再訪時
	//GF_PAST_EPISODE_6B_REARRIVE,		//▽過去編ⅥＢ再訪時

	if(FLAG[GF_PAST_EPISODE_1B_REARRIVE]){
		CallFunc("system:ReturnFrom_EPISODE_1")
		LoadArg("map/mp6101/mp6101.arg")
		EventCue("mp6101:SubEV_Past_01_Return_Relocate")
	}
	else if (FLAG[GF_PAST_EPISODE_2B_REARRIVE]) {
		CallFunc("system:ReturnFrom_EPISODE_2")
		LoadArg("map/mp6201/mp6201.arg")
		EventCue("mp6201:SubEV_Past_02_Return_Relocate")
	}
	else if (FLAG[GF_PAST_EPISODE_3B_REARRIVE]) {
		CallFunc("system:ReturnFrom_EPISODE_3")
		LoadArg("map/mp6110/mp6110.arg")
		EventCue("mp6110:SubEV_Past_03_Return_Relocate")
	}
	else if (FLAG[GF_PAST_EPISODE_4B_REARRIVE]) {
		CallFunc("system:ReturnFrom_EPISODE_4")
		LoadArg("map/mp6204/mp6204.arg")
		EventCue("mp6204:SubEV_Past_04_Return_Relocate")
	}
	else if (FLAG[GF_PAST_EPISODE_5B_REARRIVE]) {
		CallFunc("system:ReturnFrom_EPISODE_5")
		LoadArg("map/mp6105/mp6105.arg")
		EventCue("mp6105:SubEV_Past_05_Return_Relocate")
	}
	else if (FLAG[GF_PAST_EPISODE_6B_REARRIVE]) {
		CallFunc("system:ReturnFrom_EPISODE_6")
		if( !FLAG[GF_06MP4109_CLEAR_MIST] )	//山門の霧を突破する
		{
			LoadArg("map/mp6409v1/mp6409v1.arg")
			EventCue("mp6409v1:SubEV_Past_06_Return_RelocateA")
		}
		else
		{
			LoadArg("map/mp6408/mp6408.arg")
			EventCue("mp6408:SubEV_Past_06_Return_RelocateB")
		}
	}
	else if (FLAG[GF_PAST_EPISODE_7_ENDEPISODE]) {
		CallFunc("system:ReturnFrom_EPISODE_7")
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:SubEV_Past_07_Return_Relocate")
	}
	else {
		//バグ抜け用
		FadeIn(FADE_BLACK, 0)
		WaitFade()
	}

	ResetChrInfoFlag("LEADER",INFOFLAG_FLING)
	ResetChrInfoFlag("LEADER",INFOFLAG_INVISIBLE)

	Portrait_Close( -1 )
	Portrait_Unload( -1 )

	//ResetStopFlag(STOPFLAG_FREEZE)
	ResetStopFlag(STOPFLAG_EVENT)
}

function "ReturnFrom_Common"		//過去編開始-共通処理　★★ダーナ編①③には対応できないので注意★★
{
	UseFood(-1)		// 料理効果解除
	VisualNameEnd()

	// アイテムとかステータスとかバックアップ＆所持品削除
	SavePartyMember()							// 現在のパーティ編成を覚える
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現在のアイテムをバックアップ＆消去
	CopyStatus("PARTY_DANACOPY", "PARTY_DANA")	// 現在のダーナ―のステータス／装備／スキル設定をバックアップ
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_DANA)	// ダーナ編のバックアップでリストアする

		// パーティ編成可能状況バックアップ
	SetFlag(SF_ADOL_JOINOKBK, FLAG[SF_ADOL_JOINOK])
	SetFlag(SF_LAXIA_JOINOKBK, FLAG[SF_LAXIA_JOINOK])
	SetFlag(SF_SAHAD_JOINOKBK, FLAG[SF_SAHAD_JOINOK])
	SetFlag(SF_HUMMEL_JOINOKBK, FLAG[SF_HUMMEL_JOINOK])
	SetFlag(SF_RICOTTA_JOINOKBK, FLAG[SF_RICOTTA_JOINOK])
	SetFlag(SF_DANA_JOINOKBK, FLAG[SF_DANA_JOINOK])

		// ダーナ一人だけにする
	SetFlag(SF_ADOL_JOINOK, 0)
	SetFlag(SF_LAXIA_JOINOK, 0)
	SetFlag(SF_SAHAD_JOINOK, 0)
	SetFlag(SF_HUMMEL_JOINOK, 0)
	SetFlag(SF_RICOTTA_JOINOK, 0)
	SetFlag(SF_DANA_JOINOK, 1)
	SetPartyMember(PARTY_DANA, -1, -1)			// ダーナ一人に

	// スタイルチェンジ
	if(FLAG[GF_GET_GRATICA] || FLAG[GF_GET_LUMINOUS]) //ダーナが変身可能になっている場合
	{
		SetFlag(SF_CHRSWITCH_MODE, 1)			// Zwei方式のキャラチェンジに。

		if(FLAG[GF_GET_GRATICA])
		{
			SetFlag(SF_DANA2_JOINOK, 1)
			JoinParty(PARTY_DANA2);		// ダーナ２参加
		}
		if(FLAG[GF_GET_LUMINOUS])
		{
			SetFlag(SF_DANA3_JOINOK, 1)
			JoinParty(PARTY_DANA3);		// ダーナ３参加
		}
	}

		// 冒険具の設定（バックアップはItemBackupで終わっている）
	SetFlag(SF_ITEMSLOT_NUMBK, FLAG[SF_ITEMSLOT_NUM])		// スロット数バックアップ
	SetFlag(SF_ITEMSLOT_NUM, 1)					// スロットは一つに
	ChangeItemSlot(0, ICON3D_DOUBLEJUMP)		// ２段ジャンプブーツ設定
	ChangeItemSlot(1, -1)						// 外す
	ChangeItemSlot(2, -1)						// 外す
	ChangeItemSlot(3, -1)						// 外す
	ChangeItemSlot(4, -1)						// 外す
	ChangeItemSlot(5, -1)						// 外す

		// その他バックアップ＆設定
	SetFlag(SF_SPMAXBK, FLAG[SF_SPMAX])			// SP最大値を控える
	SetFlag(SF_SPMAX, 200)						// SP最大値を200に
	SetFlag(SF_CANTLEARN_SKILL,1)				// スキル習得禁止
	SetFlag(GF_EXPOWER_BAK_ADOL,FLAG[SF_EXPOWER])	//現代編のEXゲージをバックアップ
	SetFlag(SF_EXPOWER,FLAG[GF_EXPOWER_BAK_DANA])	//過去編のEXゲージをリストア

	//レコード表記の制御
	SetFlag(GF_ADOLSIDE_FAME,0)			//レコード：アドルサイドの名声値表記名をOFF
	SetFlag(GF_ADOLSIDE_VIRTURE,0)			//レコード：アドルサイドの徳表記名をOFF

	SetFlag(GF_DANASIDE_FAME,1)			//レコード：ダーナサイドの名声値表記名をON
	if(FLAG[GF_VIRTURE_POINT] > 0 )		//レコード：徳が１以上ならダーナ再度の徳表記名をON
	{
		SetFlag(GF_DANASIDE_VIRTURE,1)
	}
	
		// レベル設定
	if (DANAOLD.CHRWORK[CWK_LV] < 2)
	{
		// 過去編初めての場合はステータスを設定する
		SetFlag(SF_DEBUG, 1)		// SetLevelを現在レベルに関係なく適用できるようにする
		SetLevel(DANA, 43)							// LV60に
		SetFlag(SF_DEBUG, 0)		// 解除
		GetSkill(PARTY_DANA, -1, -1)				// スキル全部忘れる
		//SetSkillShortCut(PARTY_DANA, -1, -1)		// スキルショートカットを全て外す
		//GetSkill(PARTY_DANA, -1, 3)					// 現在のレベルで習得できる物を全て習得する
		//SetSkillShortCut(PARTY_DANA, -1, 0)			// 現在のレベルに見合ったものに自動設定
		GetSkill(PARTY_DANA, SKILL_DANA_SP_C3, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_C4, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_B5, 1)
		GetSkill(PARTY_DANA, SKILL_DANA_SP_A2, 1)
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_CIRCLE,	SKILL_DANA_SP_C3)	//ウォーターシュート
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_CROSS,		SKILL_DANA_SP_B5)	//ミストラルエッジ
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_SQUARE,	SKILL_DANA_SP_A2)	//蒼輪舞踏
		SetSkillShortCut(PARTY_DANA,	ATKSKILL_TRIANGLE,	SKILL_DANA_SP_C4)	//竜気

		// 初期入手アイテム
		GetItem(ICON3D_DOUBLEJUMP, 1)				// ２段ジャンプを取得
		GetItem(ICON3D_WP_DANA_000, 1)				// 武器
		GetItem(ICON3D_AM_023, 1)					// 防具
		//GetItem(ICON3D_AC_024, 1)					// アクセサリ：森羅の護符

		ChangeItemSlot(0, ICON3D_DOUBLEJUMP)		// ２段ジャンプブーツ設定

			// 装備設定
		EquipWeapon(DANA, ICON3D_WP_DANA_000)		// エーデルスフィア
		EquipArmor(DANA, ICON3D_AM_023)				// ダーナ初期防具
		//EquipAccessory(DANA, ICON3D_AC_024,0)		// アクセサリ：森羅の護符

	}
	else
	{
		CopyStatus("PARTY_DANA", "PARTY_DANAOLD")	// 過去のダーナのステータス／装備／スキル設定から読み出す
	}

	//HP装備付け替え分を回復
	HP_Recover( 9999 )

	if(!FLAG[GF_PAST_EPISODE_4_2_GO_OUT])			//過去編Ⅳ-2以外
	{
		CallFunc("system:SetMarkerDANA")		//過去編マーカーセット
	}
}


function "BackTo_common"		//過去編終了-共通処理　★★ダーナ編①③には対応できないので注意★★
{
	//レコード表記の制御
	SetFlag(GF_DANASIDE_FAME,0)			//レコード：ダーナサイドの名声値表記名をOFF
	SetFlag(GF_DANASIDE_VIRTURE,0)		//レコード：ダーナサイドの徳表記名をOFF

	SetFlag(GF_ADOLSIDE_FAME,1)			//レコード：アドルサイドの名声値表記名をON
	if(FLAG[GF_VIRTURE_POINT] > 0 )		//レコード：徳が１以上ならアドル再度の徳表記名をON
	{
		SetFlag(GF_ADOLSIDE_VIRTURE,1)
	}

	UseFood(-1)		// 料理効果解除
	VisualNameEnd()

	//CallFunc("system:OldItem_Check")	//過去編から現代に持ち越せるアイテムのチェック		宝箱開封フラグで判定する事にした

		// その他リストア＆設定戻し
	SetFlag(SF_SPMAX, FLAG[SF_SPMAXBK])			// SP最大値を戻す
	SetFlag(SF_CANTLEARN_SKILL,0)				// スキル習得禁止を解除
	SetFlag(GF_EXPOWER_BAK_DANA,FLAG[SF_EXPOWER])	//過去編のEXゲージをバックアップ
	SetFlag(SF_EXPOWER,FLAG[GF_EXPOWER_BAK_ADOL])	//現代編のEXゲージをリストア

		// 冒険具の設定
	SetFlag(SF_ITEMSLOT_NUM, FLAG[SF_ITEMSLOT_NUMBK])	// スロット数を戻す

	// スタイルチェンジテスト用
	SeparateParty(PARTY_DANA2);					// ダーナ２解放
	SeparateParty(PARTY_DANA3);					// ダーナ３解放
	SetFlag(SF_DANA2_JOINOK, 0)
	SetFlag(SF_DANA3_JOINOK, 0)

	SetFlag(SF_CHRSWITCH_MODE, 0)			// Zwei方式のキャラチェンジ終了
	CopyStatus("PARTY_DANAOLD", "PARTY_DANA")	// 過去のダーナのステータス／装備／スキル設定をバックアップ

		// パーティ編成可能状況を戻す
	SetFlag(SF_ADOL_JOINOK, FLAG[SF_ADOL_JOINOKBK])
	SetFlag(SF_LAXIA_JOINOK, FLAG[SF_LAXIA_JOINOKBK])
	SetFlag(SF_SAHAD_JOINOK, FLAG[SF_SAHAD_JOINOKBK])
	SetFlag(SF_HUMMEL_JOINOK, FLAG[SF_HUMMEL_JOINOKBK])
	SetFlag(SF_RICOTTA_JOINOK, FLAG[SF_RICOTTA_JOINOKBK])
	SetFlag(SF_DANA_JOINOK, FLAG[SF_DANA_JOINOKBK])

		// アイテムとかステータスとかリストア
	ItemBackup(BACKUP_NORMAL, BACKUP_STACK_DANA)	// ダーナ編アイテムをバックアップ
	CopyStatus("PARTY_DANA", "PARTY_DANACOPY")	// バックアップから現在のダーナに上書き
	ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムをリストア
	ItemBackup(BACKUP_MERGE, BACKUP_STACK_DANA)		// ダーナ編の素材をマージ
	ItemBackup(BACKUP_DELETE_MATERIAL, BACKUP_STACK_DANA)	// ダーナ編から素材を削除
	RestorePartyMember()						// パーティメンバーを戻す

	//HP装備付け替え分を回復
	HP_Recover( 9999 )

		// 冒険メモ処理
	//SetFlag( SF_MISSIONNO, (FLAG[GF_BACKUP_SF_MISSIONNO]) )		//バックアップ戻す

	CallFunc("system:ResetMarkerDANA")		//過去編マーカーリセット

	SetFlag(SF_SETRAMSAVE,1)		//リトライセーブ
}


function "SetMarkerDANA"			//ダーナ編・過去編のマーカーセット
{
	CallFunc("system:ResetMarkerDANA")				//マーカー一度全消し

	//-----------------------------------------------------------------------
	//地下聖堂のマーカーは特定のタイミングに置かれる
	if(FLAG[GF_OPEN_FLOOR_02] && !FLAG[GF_SUBEV_PAST_MONOLITH_B2])
	{
		if(!FLAG[GF_PAST_EPISODE_1_GO_CAMP] && !FLAG[GF_PAST_EPISODE_2_GO_SOUTHGATE])		//２層は過去Ⅲ以降
		{
			//SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B2,-429.60f, 948.08f, 14.00f,-429.60f, 948.08f,	MARKER_SUBEV_PAST_B2, MN_F_MP6211m,	0)	// 開放
			SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6521M, MARKER_SUBEV_PAST_B2M,0.02f, 404.84f, 12.61f ,0.02f, 404.84f,	MARKER_SUBEV_PAST_B2M, MN_D_MP6529M,	0)	// モノリス
		}
	}
	else if(FLAG[GF_OPEN_FLOOR_03] && !FLAG[GF_SUBEV_PAST_MONOLITH_B3])
	{
		if(FLAG[GF_PAST_EPISODE_4_GO_CASTLE] || FLAG[GF_PAST_EPISODE_5_GO_VALLAY] || (FLAG[GF_PAST_EPISODE_6_GO_GARDEN] && FLAG[GF_SUBEV_PAST_06_GATE]))		//３層は過去Ⅳ以降
		{
			//SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B3,-429.60f, 948.08f, 14.00f,-429.60f, 948.08f,	MARKER_SUBEV_PAST_B3, MN_F_MP6211m,	1)	// 開放
			SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6531M, MARKER_SUBEV_PAST_B3M,0.03f, 697.56f, 16.50f ,0.03f, 697.56f,	MARKER_SUBEV_PAST_B3M, MN_D_MP6539M,	1)	// モノリス
		}
	}
	else if(FLAG[GF_OPEN_FLOOR_04] && !FLAG[GF_SUBEV_PAST_MONOLITH_B4])
	{
		if(FLAG[GF_PAST_EPISODE_5_GO_VALLAY] || (FLAG[GF_PAST_EPISODE_6_GO_GARDEN] && FLAG[GF_SUBEV_PAST_06_GATE]))			//４層は過去Ⅴ以降
		{
			//SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B4,-429.60f, 948.08f, 14.00f,-429.60f, 948.08f,	MARKER_SUBEV_PAST_B4, MN_F_MP6211m,	0)	// 開放
			SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6541M, MARKER_SUBEV_PAST_B4M,0.02f, 427.07f, 8.38f ,0.02f, 427.07f,	MARKER_SUBEV_PAST_B4M, MN_D_MP6549M,	0)	// モノリス
		}
	}
	else if(FLAG[GF_OPEN_FLOOR_05] && !FLAG[GF_SUBEV_PAST_MONOLITH_B5])
	{
		if( FLAG[GF_PAST_EPISODE_6_GO_GARDEN] && FLAG[GF_SUBEV_PAST_06_GATE])			// 過去編Ⅵ：【サブイベント：山門で修道女たちに見送られる】を見た
		{
			//SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B5,-429.60f, 948.08f, 14.00f,-429.60f, 948.08f,	MARKER_SUBEV_PAST_B5, MN_F_MP6211m,	0)	// 開放
			SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6551M, MARKER_SUBEV_PAST_B5M,-0.01f, 314.90f, 32.53f  ,-0.01f, 314.90f,	MARKER_SUBEV_PAST_B5M, MN_D_MP6559M,	0)	// モノリス
		}
	}
	//-----------------------------------------------------------------------
	//地下聖堂の精霊は過去編にまたがって救出できる
	if (!FLAG[GF_PAST_EPISODE_1_GO_CAMP])			//過去Ⅰ以外
	{
		if( FLAG[GF_PAST_EPISODE_6_GO_GARDEN] && !FLAG[GF_SUBEV_PAST_06_GATE])			// 過去編Ⅵ：【サブイベント：山門で修道女たちに見送られる】を見ていない
		{

		}
		else if(FLAG[GF_PAST_EPISODE_7_ENDEPISODE] && !FLAG[GF_SUBEV_PAST_07_LOOK_STEP])	// 過去編Ⅶ：▼地下聖堂入口が開いているのを見る　を見ていない
		{

		}
		else if(!FLAG[GF_SUBEV_PAST_SPIRITD] && FLAG[GF_SUBEV_PAST_02_QUEST_G])	// 過去編Ⅲ：精霊救出D(リンデル)を見ていない　且つ　１層に到達している
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MP6511M, MARKER_SUBEV_PAST_3_Q2, -159.92f,243.92f,8.00f, -159.92f,243.92f,MARKER_SUBEV_PAST_3_Q2,MN_D_MP6515M,0)		// 過去編Ⅱ以降：精霊救出D（リンデル
		}
	}

	if (FLAG[GF_PAST_EPISODE_5_GO_VALLAY] || FLAG[GF_PAST_EPISODE_6_GO_GARDEN] || FLAG[GF_PAST_EPISODE_7_ENDEPISODE])			//過去Ⅴ以降：精霊救出I（クシュナ
	{
		if( FLAG[GF_PAST_EPISODE_6_GO_GARDEN] && !FLAG[GF_SUBEV_PAST_06_GATE])			// 過去編Ⅵ：【サブイベント：山門で修道女たちに見送られる】を見た
		{

		}
		else if(FLAG[GF_PAST_EPISODE_7_ENDEPISODE] && !FLAG[GF_SUBEV_PAST_07_LOOK_STEP])	// 過去編Ⅶ：▼オルガに報告する２　を見た
		{

		}
		else if(!FLAG[GF_SUBEV_PAST_SPIRITI] && FLAG[GF_OPEN_FLOOR_04])	// 過去編Ⅴ：精霊救出I(クシュナ)をクリアしていない　且つ　４層を開放予知を見ている
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MP6541M, MARKER_SUBEV_PAST_5_Q6, -151.97f,16.14f,0.00f,-151.97f,16.14f,MARKER_SUBEV_PAST_5_Q6,MN_D_MP6542M,0)
		}
	}
	//-----------------------------------------------------------------------

	if (FLAG[GF_PAST_EPISODE_1_GO_CAMP])			//過去Ⅰ
	{
		if(!FLAG[GF_SUBEV_PAST_01_GIMMICK_A])
		{
			SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MF001, MARKER_SUBEV_PAST_1_Q2,	-71.099f , 688.450f , 109.683f,-71.099f , 688.450f,	MARKER_SUBEV_PAST_1_Q2, MN_F_MP5103M,	0)	// 過去編Ⅰ：水路の修理
		}
	}
	else if (FLAG[GF_PAST_EPISODE_2_GO_SOUTHGATE])		//過去Ⅱ
	{
		if(!FLAG[GF_SUBEV_PAST_02_GIMMICK_A])		//[【過去ギミック②：鍵の話を聞く】
		{
			SetMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_2_Q1,-514.62f,838.37f,1.25f,-514.62f,838.37f,MARKER_SUBEV_PAST_2_Q1, MN_F_MP6203M,	0)	// 過去編Ⅱ：水底に消えた鍵
		}
	}
	else if (FLAG[GF_PAST_EPISODE_3_GO_BAHA])			//過去Ⅲ
	{
		if(!FLAG[GF_SUBEV_PAST_03_GIMMICK_L] && !FLAG[GF_SUBEV_PAST_03_GIMMICK_A])	// 過去編Ⅲ：【過去ギミック③：動物を助ける】を見てもクリアもしていない
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF003, MARKER_SUBEV_PAST_3_Q0, 21.41f, 1316.90f, 66.94f, 21.41f, 1316.90f,MARKER_SUBEV_PAST_3_Q0,MN_F_MP6110M,0)		// 過去編Ⅲ：巫女の施し（開封前）
		}
		else if(FLAG[GF_SUBEV_PAST_03_GIMMICK_L] && !FLAG[GF_SUBEV_PAST_03_GIMMICK_A])	// 過去編Ⅲ：【過去ギミック③：動物を助ける】を見て、クリアしていない
		{
			SetMapMarker( SMI_DANA_QUEST ,PAGE_MF003, MARKER_SUBEV_PAST_3_Q1, 21.41f, 1316.90f, 66.94f, 21.41f, 1316.90f,MARKER_SUBEV_PAST_3_Q1,MN_F_MP6110M,0)		// 過去編Ⅲ：巫女の施し（開封後）
		}

	}
	else if (FLAG[GF_PAST_EPISODE_4_GO_CASTLE])			//過去Ⅳ
	{
		if(!FLAG[GF_SUBEV_PAST_04_GIMMICK])	// 過去編Ⅳ：古き祝福の大扉をクリアしていない
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF002, MARKER_SUBEV_PAST_4_Q1, -532.05f, 830.61f, 5.64f, -532.05f, 830.61f,MARKER_SUBEV_PAST_4_Q1,MN_F_MP6203M,0)
		}
		if(!FLAG[GF_SUBEV_PAST_SPIRITE])	// 過去編Ⅳ：精霊救出E(プラウ)をクリアしていない
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF002, MARKER_SUBEV_PAST_4_Q2, -278.33f, 988.05f, 1.43f, -278.33f, 988.05f,MARKER_SUBEV_PAST_4_Q2,MN_F_MP6202M,0)
		}
		if(!FLAG[GF_SUBEV_PAST_SPIRITF])	// 過去編Ⅳ：精霊救出F(エルド)をクリアしていない
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MP6401m, MARKER_SUBEV_PAST_4_Q3, 49.55f, 37.63f, 0.00f, 49.55f, 37.63f,MARKER_SUBEV_PAST_4_Q3,MN_F_MP6401m,0)
		}
	}
	else if (FLAG[GF_PAST_EPISODE_5_GO_VALLAY])			//過去Ⅴ
	{

		if(!FLAG[GF_SUBEV_PAST_05_QUEST_A] && !FLAG[GF_SUBEV_PAST_05_QUEST_C])	// 過去編Ⅴ：はぐれた避難民　を見ておらず、クリアしていない
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF005, MARKER_SUBEV_PAST_5_Q1, -731.648f , 799.839f , 26.131f ,-731.648f , 799.839f,MARKER_SUBEV_PAST_5_Q1,MN_F_MP6113M,0)
		}
		if(FLAG[GF_SUBEV_PAST_05_QUEST_A] && !FLAG[GF_SUBEV_PAST_05_QUEST_C])	// 過去編Ⅴ：はぐれた避難民　を見たが、クリアしていない
		{
			SetMapMarker( SMI_DANA_QUEST ,PAGE_MF005, MARKER_SUBEV_PAST_5_Q2, -728.34f, 660.18f, 41.66f ,-728.34f, 660.18f,MARKER_SUBEV_PAST_5_Q2,MN_F_MP6113M,0)
		}

		if(!FLAG[GF_SUBEV_PAST_05_HUNTB_LOOK] && !FLAG[GF_SUBEV_PAST_05_HUNTB_KILL])	// 過去編Ⅴ：竜種討伐②を見ておらず、クリアしていない
		{
			SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF005, MARKER_SUBEV_PAST_5_Q4, -921.56f, 633.26f, 31.75f ,-921.56f, 633.26f,MARKER_SUBEV_PAST_5_Q4,MN_F_MP6106M,0)
		}
		else if(FLAG[GF_SUBEV_PAST_05_HUNTB_LOOK] && !FLAG[GF_SUBEV_PAST_05_HUNTB_KILL])	// 過去編Ⅴ：竜種討伐②を見て、クリアしていない
		{
			SetMapMarker( SMI_DANA_QUEST ,PAGE_MF005, MARKER_SUBEV_PAST05_2, -921.56f, 633.26f, 31.75f ,-921.56f, 633.26f,MARKER_SUBEV_PAST05_2,MN_F_MP6106M,0)
		}
		if(!FLAG[GF_SUBEV_PAST_SPIRITH])	// 過去編Ⅴ：精霊救出H(オリヴィス)をクリアしていない
		{
				SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF005, MARKER_SUBEV_PAST_5_Q5, -989.96f, 636.61f, 34.42f ,-989.96f, 636.61f,MARKER_SUBEV_PAST_5_Q5,MN_F_MP6106M,0)
		}
	}
	else if (FLAG[GF_PAST_EPISODE_6_GO_GARDEN])			//過去Ⅵ
	{
		if(FLAG[GF_SUBEV_PAST_06_GATE])			// 過去編Ⅵ：【サブイベント：山門で修道女たちに見送られる】を見た
		{
			if(!FLAG[GF_SUBEV_PAST_06_HUNTC_LOOK] && !FLAG[GF_SUBEV_PAST_06_HUNTC_KILL])	// 過去編Ⅵ：竜種討伐③を見ておらず、クリアしていない
			{
				SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF006, MARKER_SUBEV_PAST_6_Q1, -1050.49f, 767.43f, 26.11f,-1050.49f, 767.43f,MARKER_SUBEV_PAST_6_Q1,MN_F_MP6107M,0)
			}
			else if(FLAG[GF_SUBEV_PAST_06_HUNTC_LOOK] && !FLAG[GF_SUBEV_PAST_06_HUNTC_KILL])	// 過去編Ⅴ：竜種討伐②を見て、クリアしていない
			{
				SetMapMarker( SMI_DANA_QUEST ,PAGE_MF006, MARKER_SUBEV_PAST06_3, -1050.49f, 767.43f, 26.11f,-1050.49f, 767.43f,MARKER_SUBEV_PAST06_3,MN_F_MP6107M,0)
			}
			
			if(!FLAG[GF_SUBEV_PAST_06_GIMMICK_A] && !FLAG[GF_SUBEV_PAST_06_GIMMICK_B])	// 過去編Ⅵ：枯れゆく大地に恵み　を見ておらず、クリアしていない
			{
				SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MF006, MARKER_SUBEV_PAST_6_Q2, -836.102f , 1026.203f , 36.932f,-836.102f , 1026.203f,MARKER_SUBEV_PAST_6_Q2,MN_F_MP6107M,0)
			}
			else if(FLAG[GF_SUBEV_PAST_06_GIMMICK_A] && !FLAG[GF_SUBEV_PAST_06_GIMMICK_B])	// 過去編Ⅵ：枯れゆく大地に恵み　を見て、クリアしていない
			{
				SetMapMarker( SMI_DANA_QUEST ,PAGE_MF006, MARKER_SUBEV_PAST06_4, -904.180f , 1069.792f , 41.769f,-904.180f , 1069.792f ,MARKER_SUBEV_PAST06_4,MN_F_MP6107M,0)
			}

			if(!FLAG[GF_SUBEV_PAST_06_SPIRITJ_L] && !FLAG[GF_SUBEV_PAST_06_SPIRITJ])	// 過去編Ⅵ：【精霊救出Ｊ：渦から精霊を救出する】を見ておらず、クリアしていない
			{
				SetMapMarker( SMI_DANA_SUBEVENT ,PAGE_MP6108m, MARKER_SUBEV_PAST_6_Q3, -180.54f,-0.59f,0.45f ,-180.54f,-0.59f,MARKER_SUBEV_PAST_6_Q3,MN_F_MP6107M,0)
			}
			if(FLAG[GF_SUBEV_PAST_06_SPIRITJ_L] && !FLAG[GF_SUBEV_PAST_06_SPIRITJ])	// 過去編Ⅵ：【精霊救出Ｊ：渦から精霊を救出する】を見て、クリアしていない
			{
				SetMapMarker( SMI_DANA_QUEST ,PAGE_MP6108m, MARKER_SUBEV_PAST_6_Q4, -180.54f,-0.59f,0.45f ,-180.54f,-0.59f,MARKER_SUBEV_PAST_6_Q4,MN_F_MP6107M,0)
			}
		}
	}
	else if (FLAG[GF_PAST_EPISODE_7_ENDEPISODE])		//過去Ⅶ
	{
		if(FLAG[GF_SUBEV_PAST_07_TALK_OLGA])	// 過去編Ⅶ：▼オルガに報告する２　を見た
		{
			//サブクエスト
			if(!FLAG[GF_SUBEV_PAST_07_TALK_IO])	//イオと会話していない
			{
				SetMapMarker( SMI_DANA_QUEST ,PAGE_MF002, MARKER_SUBEV_PAST_7_2, -395.97f, 987.12f, 11.68f, -395.97f, 987.12f,MARKER_SUBEV_PAST_7_2,MN_F_MP6201M,0)		// 過去編Ⅶ：イオを発見する
			}
			else if(!FLAG[GF_SUBEV_PAST_07_CLEAR])
			{
				if(!FLAG[GF_SUBEV_PAST_07_LOOK_STEP])
				{
					SetMapMarker( SMI_DANA_QUEST ,PAGE_MF002, MARKER_SUBEV_PAST_7_3, -430.08f, 953.72f, 13.57f , -430.08f, 953.72f	,MARKER_SUBEV_PAST_7_3,MN_F_MP6211m,0)		// 過去編Ⅶ：地下聖堂を調べてみる
				}
				else if(FLAG[GF_SUBEV_PAST_07_LOOK_STEP] && !FLAG[GF_SUBEV_PAST_07_INTO_LAST])
				{
					SetMapMarker( SMI_DANA_QUEST ,PAGE_MP6551M, MARKER_SUBEV_PAST_7_4, 0.10f, 259.83f, 31.95f  , 0.10f, 259.83f		,MARKER_SUBEV_PAST_7_4,MN_D_MP6559M,0)		// 過去編Ⅶ：地下聖堂を調べてみる
				}
				else if(FLAG[GF_SUBEV_PAST_07_INTO_LAST])
				{
					SetMapMarker( SMI_DANA_QUEST ,PAGE_MP6561M, MARKER_SUBEV_PAST_7_5, 0.47f, -117.94f, 49.00f , 0.47f, -117.94f	,MARKER_SUBEV_PAST_7_5,MN_D_MP6569M,0)		// 過去編Ⅶ：地下聖堂を調べてみる
				}
			}
			//▼クエスト
			if (!FLAG[GF_SUBEV_PAST_07_QUEST_A])	// 過去編Ⅶ：【過去クエスト⑦：理術士オドの遺体を見る】を見ていない
			{
				SetMapMarker(SMI_DANA_SUBEVENT ,PAGE_MP6222m2, MARKER_SUBEV_PAST_7_Q0, 39.476f , -285.595f , 143.443f , 39.476f , -285.595f ,MARKER_SUBEV_PAST_7_Q0,MN_F_MP6222m2,0)
			}
			else if (FLAG[GF_SUBEV_PAST_07_QUEST_A] && !FLAG[GF_SUBEV_PAST_07_QUEST_B])	// 過去編Ⅶ：【過去クエスト⑦：理術士オドの遺体を見る】を見た
			{		
				SetMapMarker(SMI_DANA_QUEST ,PAGE_MF002, MARKER_SUBEV_PAST_7_Q1, -502 , 895, 2 , -502 , 895 ,MARKER_SUBEV_PAST_7_Q1,MN_F_MP6203M,0)	
			}
			else if (FLAG[GF_SUBEV_PAST_07_QUEST_B] && !FLAG[GF_SUBEV_PAST_07_QUEST_C])	// 過去編Ⅶ：【過去クエスト⑦：花を見つける】を見た
			{		
				SetMapMarker(SMI_DANA_QUEST ,PAGE_MP6222m2, MARKER_SUBEV_PAST_7_Q2,39.476f , -285.595f , 143.443f , 39.476f , -285.595f ,MARKER_SUBEV_PAST_7_Q2,MN_F_MP6222m2,0)
			}
		}
	}
}

function "ResetMarkerDANA"			//ダーナ編・過去編のマーカー【リセット】
{

	//地下聖堂のマーカーはタイミング関係なく置かれる
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B2, 0, 0)		// 開放
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B3, 0, 0)		// 開放
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B4, 0, 0)		// 開放
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_B5, 0, 0)		// 開放

	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6521M, MARKER_SUBEV_PAST_B2M, 0, 0)		// モノリス
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6531M, MARKER_SUBEV_PAST_B3M, 0, 0)		// モノリス
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6541M, MARKER_SUBEV_PAST_B4M, 0, 0)		// モノリス
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6551M, MARKER_SUBEV_PAST_B5M, 0, 0)		// モノリス

	//過去Ⅰ
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF001, MARKER_SUBEV_PAST_1_Q2, 0, 0)		// 過去編Ⅰ：水路の修理

	//過去Ⅱ
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_2_Q1, 0, 0)		// 過去編Ⅱ：水底に消えた鍵

	//過去Ⅲ
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF003, MARKER_SUBEV_PAST_3_Q0, 0, 0)	// 過去編Ⅲ：巫女の施し（開封前）
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF003, MARKER_SUBEV_PAST_3_Q1, 0, 0)	// 過去編Ⅲ：巫女の施し（開封後）
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6511M, MARKER_SUBEV_PAST_3_Q2, 0, 0)	// 過去編Ⅲ：精霊救出D(リンデル)

	//過去Ⅳ
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_4_Q1, 0, 0)		// 過去編Ⅳ：古き祝福の大扉
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF002, MARKER_SUBEV_PAST_4_Q2, 0, 0)		// 過去編Ⅳ：精霊救出E(プラウ)
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6401m, MARKER_SUBEV_PAST_4_Q3, 0, 0)	// 過去編Ⅳ：精霊救出F(エルド)

	//過去Ⅴ
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF005, MARKER_SUBEV_PAST_5_Q1, 0, 0)		// 過去編Ⅴ：はぐれた避難民
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF005, MARKER_SUBEV_PAST_5_Q2, 0, 0)		// 過去編Ⅴ：はぐれた避難民２
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF005, MARKER_SUBEV_PAST_5_Q3, 0, 0)		// 過去編Ⅴ：はぐれた避難民３
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF005, MARKER_SUBEV_PAST_5_Q4, 0, 0)		// 過去編Ⅴ：竜種討伐②
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF005, MARKER_SUBEV_PAST05_2, 0, 0)		// 過去編Ⅴ：竜種討伐②（開封後）
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF005, MARKER_SUBEV_PAST_5_Q5, 0, 0)		// 過去編Ⅴ：精霊救出H(オリヴィス)
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6541M, MARKER_SUBEV_PAST_5_Q6, 0, 0)	// 過去編Ⅴ：精霊救出I(クシュナ)

	//過去Ⅵ
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF006, MARKER_SUBEV_PAST_6_Q1, 0, 0)		// 過去編Ⅵ：竜種討伐③
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF006, MARKER_SUBEV_PAST06_3, 0, 0)		// 過去編Ⅵ：竜種討伐③（開封後）
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MF006, MARKER_SUBEV_PAST_6_Q2, 0, 0)		// 過去編Ⅵ：枯れゆく大地に恵みを
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF006, MARKER_SUBEV_PAST06_4, 0, 0)		// 過去編Ⅵ：枯れゆく大地に恵みを（開封後）
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6108m, MARKER_SUBEV_PAST_6_Q3, 0, 0)	// 過去編Ⅵ：精霊救出J(セレネ)
	DelMapMarker( SMI_DANA_QUEST, PAGE_MP6108m, MARKER_SUBEV_PAST06_4, 0, 0)	// 過去編Ⅵ：精霊救出J(セレネ)（開封後）

	//過去Ⅶ
	DelMapMarker( SMI_DANA_SUBEVENT, PAGE_MP6222m2,MARKER_SUBEV_PAST_7_Q0 , 0,0)	// 過去編Ⅶ：【過去クエスト⑦：達成イベント】を見ていない
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF002,MARKER_SUBEV_PAST_7_Q1 , 0,0)
	DelMapMarker( SMI_DANA_QUEST, PAGE_MP6222m2,MARKER_SUBEV_PAST_7_Q2 , 0,0)	// 過去編Ⅶ：【過去クエスト⑦：達成イベント】を見た
	DelMapMarker( SMI_DANA_QUEST, PAGE_MP6222m2, MARKER_SUBEV_PAST_7_1, 0, 0)	// 過去編Ⅶ：オルガに報告する
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF002, MARKER_SUBEV_PAST_7_2, 0, 0)		// 過去編Ⅶ：イオを発見する
	DelMapMarker( SMI_DANA_QUEST, PAGE_MF002,  MARKER_SUBEV_PAST_7_3, 0, 0)		// 過去編Ⅶ：地下聖堂を調べてみる
	DelMapMarker( SMI_DANA_QUEST, PAGE_MP6551M, MARKER_SUBEV_PAST_7_4, 0, 0)		// 過去編Ⅶ：地下聖堂エレベーター
	DelMapMarker( SMI_DANA_QUEST, PAGE_MP6561M, MARKER_SUBEV_PAST_7_5, 0, 0)		// 過去編Ⅶ：地下聖堂最奥
	
}

function "EV_FloorOpen"		//ダーナ編　地下聖堂開放の予知
{
	SetFlag(TF_MENU_SELECT,0)	//初期化

	if(!FLAG[GF_OPEN_FLOOR_02] && (FLAG[GF_VIRTURE_POINT] >= 30))	//２層を開いていない
	{
		SetFlag(GF_OPEN_FLOOR_02,1)		//開いた予知を見た
		SetFlag(TF_MENU_SELECT,2)
	}
	else if(!FLAG[GF_OPEN_FLOOR_03] && (FLAG[GF_VIRTURE_POINT] >= 50))	//３階層を開いていない
	{
		SetFlag(GF_OPEN_FLOOR_03,1)		//開いた予知を見た
		SetFlag(TF_MENU_SELECT,3)
	}
	else if(!FLAG[GF_OPEN_FLOOR_04] && (FLAG[GF_VIRTURE_POINT] >= 70))	//４階層を開いていない
	{
		SetFlag(GF_OPEN_FLOOR_04,1)		//開いた予知を見た
		SetFlag(TF_MENU_SELECT,4)
	}
	else if(!FLAG[GF_OPEN_FLOOR_05] && (FLAG[GF_VIRTURE_POINT] >= 90))	//５層を開いていない
	{
		SetFlag(GF_OPEN_FLOOR_05,1)		//開いた予知を見た
		SetFlag(TF_MENU_SELECT,5)
	}

	////////////////////////////////////////////////////////////////////////////
	//共通演出部分
	if(FLAG[TF_MENU_SELECT])	//どこかの扉が開いたら
	{
		SetStopFlag(STOPFLAG_SIMPLEEVENT2)
		Wait(30)	//前のイベントのフェード待ち

		CallFunc("system:SetMarkerDANA")		//マーカーセット

		FadeBGM( 0 , 120 )
		PlaySE(SE_KAKO_1_01, 100, 0, 0, 0, 1.0f, 0)
		SetEnvSEPlayState(-1, 0)	//環境SE全停止

		FadeOut(FADE_WHITE,45)
		WaitFade()

	////////////////////////////////////////////////////////////////////////////
	//階層ごとのポートレート読み込み

		if(FLAG[TF_MENU_SELECT] == 5)	//開いた扉が５層
		{
			Portrait_Load( 1 , "visual/portrait/p_20050.itp" )	//閉じ
			Portrait_Create(1 , 0 , 0 ,
							0 , 0 , 3840,2160,
							1.0f,0x00ffffff,0x00000000)

			Portrait_Load( 2 , "visual/portrait/p_20051.itp" )	//開き
			Portrait_Create(2 , 0 , 0 ,
							0 , 0 , 3840,2160,
							0.0f,0x00ffffff,0x00000000)
		}
		else if(FLAG[TF_MENU_SELECT] == 4)	//開いた扉が４層
		{
			Portrait_Load( 1 , "visual/portrait/p_20040.itp" )	//閉じ
			Portrait_Create(1 , 0 , 0 ,
							0 , 0 , 3840,2160,
							1.0f,0x00ffffff,0x00000000)

			Portrait_Load( 2 , "visual/portrait/p_20041.itp" )	//開き
			Portrait_Create(2 , 0 , 0 ,
							0 , 0 , 3840,2160,
							0.0f,0x00ffffff,0x00000000)

		}
		else if(FLAG[TF_MENU_SELECT] == 3)	//開いた扉が３層
		{
			Portrait_Load( 1 , "visual/portrait/p_20030.itp" )	//閉じ
			Portrait_Create(1 , 0 , 0 ,
							0 , 0 , 3840,2160,
							1.0f,0x00ffffff,0x00000000)

			Portrait_Load( 2 , "visual/portrait/p_20031.itp" )	//開き
			Portrait_Create(2 , 0 , 0 ,
							0 , 0 , 3840,2160,
							0.0f,0x00ffffff,0x00000000)
		}
		else if(FLAG[TF_MENU_SELECT] == 2)	//開いた扉が２層
		{
			Portrait_Load( 1 , "visual/portrait/p_20020.itp" )	//閉じ
			Portrait_Create(1 , 0 , 0 ,
							0 , 0 , 3840,2160,
							1.0f,0x00ffffff,0x00000000)

			Portrait_Load( 2 , "visual/portrait/p_20021.itp" )	//開き
			Portrait_Create(2 , 0 , 0 ,
							0 , 0 , 3840,2160,
							0.0f,0x00ffffff,0x00000000)
		}

		Portrait_Anime( 1 , PR_ANIME_SCALE ,0.5 , 0.5 ,-1,-1 ,0 )
		Portrait_Anime( 2 , PR_ANIME_SCALE ,0.5 , 0.5 ,-1,-1 ,0 )

	////////////////////////////////////////////////////////////////////////////
	//共通演出部分

		Wait(30)

		FadeIn(FADE_WHITE,FADE_SLOW)
		WaitFade()
		
		Wait(60)

		PlaySE(SE_GIM_PAST_DOOR_EFX, 100, 1, 100, 0, 1.0f, 0)

		Portrait_Anime(2 ,PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 1.0f, 60)
		Wait(60)
		PlaySE(SE_GIM_PAST_DOOR_STOP_EFX, 100, 0, 0, 0, 1.0f, 0)
		StopSE(SE_GIM_PAST_DOOR_EFX, 200)

		Wait(60)


		PlaySE(SE_KAKO_1_01, 100, 0, 0, 0, 1.0f, 0)
		SetEnvSEPlayState(-1, 1)	//環境SE戻ってくる

		FadeOut(FADE_WHITE,FADE_SLOW)
		WaitFade()

		Portrait_Close( -1 )
		Portrait_Unload( -1 )
		FadeBGM( 100 , 120 )

		FadeIn(FADE_WHITE,FADE_SLOW)
		WaitFade()
		
		Wait(10)

	////////////////////////////////////////////////////////////////////////////
	//シナリオにそってセリフ変化

		if(FLAG[GF_PAST_EPISODE_1_GO_CAMP])
		{
			TalkPopup("LEADER",0,0,0,0,0)
			{
				"#000e#000m今の予知は何だろう。"
				"どこかの扉みたいだったけど……\p"
				"いつか行く事になる場所なのかな。\p"
			}
			WaitPrompt()
			WaitCloseWindow()
		}
		else if (FLAG[GF_PAST_EPISODE_2_GO_SOUTHGATE])
		{
			ActiveVoiceStop(ACTIVEVOICESTOP_WINDOWOFF)
			ActiveVoiceStart(EACT_EVID_1505, 1, 0)	//	扉を開く予知を見たら

			//TalkPopup("LEADER",0,0,0,0,0)
			//{
			//	"#000e#000m今のは……もしかして"
			//	"あの扉が開く条件が整ったのかな。\p"
			//	"余裕があれば行ってみよう。"
			//}
			//WaitPrompt()
			//WaitCloseWindow()
		}
		else if (FLAG[GF_PAST_EPISODE_3_GO_BAHA])
		{
			////──────────────────────────────
			////	【PS4】【過去ギミック③：動物を助ける】
			////──────────────────────────────
			//
			////　　徳ポイントを+5する。
			////　　★徳ポイントがフロア２開封必要量に達している場合。
			////　　予知演出と共に、地下聖堂フロア１の
			////　　扉が開いているポートレートを表示。

			TalkPopup("LEADER",0,0,0,0,0)
			{
				"#000e#000m今のは……"
				"地下聖堂の扉が開く予知？"
			}
			WaitPrompt()
			WaitCloseWindow()
			
			
			TalkPopup("LEADER",0,0,0,0,0)
			{
				"#000e#000m私の取った行動で扉が開く？\p"
				"……余裕のある時に"
				"　地下聖堂にも行ってみよう。"
			}

			WaitPrompt()
			WaitCloseWindow()
		}
		else if (FLAG[GF_PAST_EPISODE_4_GO_CASTLE])
		{
			////──────────────────────────────
			////	【PS4】【サブイベント：徳ポイントが規定量以上になった（フロア３開放）】
			////──────────────────────────────
			////　　クエストなどで徳ポイントが加算された際に
			////　　新しいフロアの開放条件が整った場合は、
			////　　各イベントのラストに挿入する形でイベントを起こす。
			////　　（過去編Ⅳ・Ⅳ-２・Ⅴ・Ⅵで起きる可能性がある）
			////　　予知演出と共に、地下聖堂フロア２の扉が解除される
			////　　回想ポートレートを表示する。
			////　　暗転明けで操作許可を戻す。
			////──────────────────────────────
			////　　その後、過去編Ⅳ-２以外の場合であれば
			////　　以下のアクティブボイスを鳴らす。

			ActiveVoiceStop(ACTIVEVOICESTOP_WINDOWOFF)
			ActiveVoiceStart(EACT_EVID_1505, 1, 0)	//	扉を開く予知を見たら

//			TalkPopup("LEADER",0,0,0,0,0)
//			{
//				"#000e#000m今のは……もしかして"
//				"あの扉が開く条件が整ったのかな。\p"
//				"余裕があれば行ってみよう。"
//			}
//			WaitPrompt()
//			WaitCloseWindow()
		}
		else if (FLAG[GF_PAST_EPISODE_5_GO_VALLAY])
		{
			//──────────────────────────────
			//	【PS4】【サブイベント：徳ポイントが規定量以上になった（フロア４開放）】
			//──────────────────────────────
			////　　その後以下のアクティブボイスを鳴らす。

			ActiveVoiceStop(ACTIVEVOICESTOP_WINDOWOFF)
			ActiveVoiceStart(EACT_EVID_1509, 1, 0)	//	扉を開く予知を見たら

//			TalkPopup("LEADER",0,0,0,0,0)
//			{
//				"#000e#000m地下聖堂の扉が開いたのかな……\p"
//				"あまり時間もないけど、"
//				"あそこへ行けば判ることもあるかも……"
//			}
//			WaitPrompt()
//			WaitCloseWindow()
		}
		else if (FLAG[GF_PAST_EPISODE_6_GO_GARDEN])
		{
			//──────────────────────────────
			//	【PS4】【サブイベント：徳ポイントが規定量以上になった（フロア５開放）】
			//──────────────────────────────
			//　　クエストなどで徳ポイントが加算された際に
			//　　新しいフロアの開放条件が整った場合は、
			//　　各イベントのラストに挿入する形でイベントを起こす。
			//　　予知演出と共に、地下聖堂フロア４の扉が解除される回想ポートレートを表示する。
			//　　暗転を挟んで操作許可を戻す。
			//──────────────────────────────
			//　　その後以下のアクティブボイスを鳴らす。

			ActiveVoiceStop(ACTIVEVOICESTOP_WINDOWOFF)
			ActiveVoiceStart(EACT_EVID_1601, 1, 0)	//	扉を開く予知を見たら

//			TalkPopup("LEADER",0,0,0,0,0)
//			{
//				"#000e#000m……今の予知は……\p"
//				"……私はできる事をやろう。"
//				"この手が届く限り……！"
//			}
//			WaitPrompt()
//			WaitCloseWindow()
		}

	////////////////////////////////////////////////////////////////////////////
	//初回は地下聖堂転位について説明する
		
		if(!FLAG[GF_1ST_FORESIGHT])
		{
			Wait(15)
		
			PlaySE(SE_TUTORIAL, 100, 0, 0, 0, 1.0f, 0)		//チュートリアル
		
			TalkPopup(UNDEF,0,5,0,0,0)
			{
				"#-1W#4C地下聖堂には"
				"#4C地図メニューから転位が可能です。#10W"
			}
			Wait(10)
			WaitPrompt()
			WaitCloseWindow()
			
			SetFlag(GF_1ST_FORESIGHT,1)

		}
		SetFlag(TF_MENU_SELECT,0)	//初期化
		ResetStopFlag(STOPFLAG_SIMPLEEVENT2)

	}
}

function "Get_DanaSpirit"		//全ての精霊救出トロフィー
{
	if(FLAG[GF_TROPHY_ETERNIASPIRIT_01] && FLAG[GF_TROPHY_ETERNIASPIRIT_02]
	&& FLAG[GF_TROPHY_ETERNIASPIRIT_03] && FLAG[GF_TROPHY_ETERNIASPIRIT_04]
	&& FLAG[GF_TROPHY_ETERNIASPIRIT_05] && FLAG[GF_TROPHY_ETERNIASPIRIT_06]
	&& FLAG[GF_TROPHY_ETERNIASPIRIT_07] && FLAG[GF_TROPHY_ETERNIASPIRIT_08]
	&& FLAG[GF_TROPHY_ETERNIASPIRIT_09] && FLAG[GF_TROPHY_ETERNIASPIRIT_10])	//精霊を全て救出した
	{
		GetTrophy("TROPHY_MASTERSPIRIT")		//全てのエタニアの精霊を救出した。「精霊を従えし者」
		SetFlag(GF_SUBEV_SPIRIT_ALL,1)			//過去編：精霊を全て救出した
	}
}

function "OldItem_Check"
{
	if(!FLAG[GF_OLDITEM_GET_01] && GOTITEMWORK[ICON3D_AC_546])	//過去編で万世の奉輪を入手している
	{
		SetFlag(GF_OLDITEM_GET_01,1)
	}
	if(!FLAG[GF_OLDITEM_GET_02] && GOTITEMWORK[ICON3D_AC_547])	//過去編で万象の奉冠を入手している
	{
		SetFlag(GF_OLDITEM_GET_02,1)
	}
	if(!FLAG[GF_OLDITEM_GET_03] && GOTITEMWORK[ICON3D_AC_548])	//過去編で万古の奉石を入手している
	{
		SetFlag(GF_OLDITEM_GET_03,1)
	}
	if(!FLAG[GF_OLDITEM_GET_04] && GOTITEMWORK[ICON3D_AC_549])	//過去編で万言の奉袢を入手している
	{
		SetFlag(GF_OLDITEM_GET_04,1)
	}
	if(!FLAG[GF_OLDITEM_GET_05] && GOTITEMWORK[ICON3D_AR_052])	//過去編で万理の奉腕 を入手している
	{
		SetFlag(GF_OLDITEM_GET_05,1)
	}
}

function "warp_crypt"
{
	SetStopFlag(STOPFLAG_TALKTURN)


	if(FLAG[GF_BOSSFLOOR_NUM] >= 1)		//一層目最奥まで到達している
	{

		SetFlag(TF_MENU_SELECT,0)

		MenuReset()
		MenuType(MENUTYPE_POPUP)
		MenuAdd(10,"第一層・燈火の間 入口")
		MenuAdd(11,"第一層・燈火の間 最奥")

		if( FLAG[GF_PAST_EPISODE_3_GO_BAHA] || FLAG[GF_PAST_EPISODE_4_GO_CASTLE] || 
			FLAG[GF_PAST_EPISODE_5_GO_VALLAY] || FLAG[GF_PAST_EPISODE_6_GO_GARDEN] || 
			FLAG[GF_PAST_EPISODE_7_ENDEPISODE])
		{
			if(FLAG[GF_SUBEV_PAST_GETTO_B2])
			{
				MenuAdd(20,"第二層・封石の間 入口")
			}
			if(FLAG[GF_BOSSFLOOR_NUM] >= 2 )
			{
				MenuAdd(21,"第二層・封石の間 最奥")
			}
		}
		if( FLAG[GF_PAST_EPISODE_4_GO_CASTLE] || FLAG[GF_PAST_EPISODE_5_GO_VALLAY] || 
			FLAG[GF_PAST_EPISODE_6_GO_GARDEN] || FLAG[GF_PAST_EPISODE_7_ENDEPISODE])
		{
			if(FLAG[GF_SUBEV_PAST_GETTO_B3])
			{
				MenuAdd(30,"第三層・瞳力の間 入口")
			}
			if(FLAG[GF_BOSSFLOOR_NUM] >= 3 )
			{
				MenuAdd(31,"第三層・瞳力の間 最奥")
			}
		}
		if( FLAG[GF_PAST_EPISODE_5_GO_VALLAY] || FLAG[GF_PAST_EPISODE_6_GO_GARDEN] || 
			FLAG[GF_PAST_EPISODE_7_ENDEPISODE])
		{
			if(FLAG[GF_SUBEV_PAST_GETTO_B4])
			{
				MenuAdd(40,"第四層・氷結の間 入口")
			}
			if(FLAG[GF_BOSSFLOOR_NUM] >= 4 )
			{
				MenuAdd(41,"第四層・氷結の間 最奥")
			}
		}
		if( FLAG[GF_PAST_EPISODE_6_GO_GARDEN] || FLAG[GF_PAST_EPISODE_7_ENDEPISODE])
		{
			if(FLAG[GF_SUBEV_PAST_GETTO_B5])
			{
				MenuAdd(50,"第五層・灼熱の間 入口")
			}
			if(FLAG[GF_BOSSFLOOR_NUM] >= 5 )
			{
				MenuAdd(51,"第五層・灼熱の間 最奥")
			}
		}
		if(FLAG[GF_PAST_EPISODE_7_ENDEPISODE])
		{
			if(FLAG[GF_SUBEV_PAST_07_INTO_LAST])
			{
				MenuAdd(60,"第六層・最終試練の間 入口")
			}
			if(FLAG[GF_BOSSFLOOR_NUM] >= 6 )
			{
				MenuAdd(61,"第六層・最終試練の間 最奥")
			}
		}
		MenuAdd(-1,"やめる")
		MenuOpen( TF_MENU_SELECT , -1 , ADOLMENU_PPOSY , -2 , -2 , 10 , 1)
		WaitMenu(0)
		MenuClose(10,0)

		if(FLAG[TF_MENU_SELECT] == 10 )
		{
			LoadArg("map/mp6511m/mp6511m.arg")
			EventCue("mp6511m:Relocate_B1")
		}
		else if(FLAG[TF_MENU_SELECT] == 11 )
		{
			LoadArg("map/mp6519m/mp6519m.arg")
			EventCue("mp6519m:Relocate_B1b")
		}
		else if(FLAG[TF_MENU_SELECT] == 20 )
		{
			LoadArg("map/mp6521m/mp6521m.arg")
			EventCue("mp6521m:Relocate_B2")
		}
		else if(FLAG[TF_MENU_SELECT] == 21 )
		{
			LoadArg("map/mp6529m/mp6529m.arg")
			EventCue("mp6529m:Relocate_B2b")
		}
		else if(FLAG[TF_MENU_SELECT] == 30 )
		{
			LoadArg("map/mp6531m/mp6531m.arg")
			EventCue("mp6531m:Relocate_B3")
		}
		else if(FLAG[TF_MENU_SELECT] == 31 )
		{
			LoadArg("map/mp6539m/mp6539m.arg")
			EventCue("mp6539m:Relocate_B3b")
		}
		else if(FLAG[TF_MENU_SELECT] == 40 )
		{
			LoadArg("map/mp6541m/mp6541m.arg")
			EventCue("mp6541m:Relocate_B4")
		}
		else if(FLAG[TF_MENU_SELECT] == 41 )
		{
			LoadArg("map/mp6549m/mp6549m.arg")
			EventCue("mp6549m:Relocate_B4b")
		}
		else if(FLAG[TF_MENU_SELECT] == 50 )
		{
			LoadArg("map/mp6551m/mp6551m.arg")
			EventCue("mp6551m:Relocate_B5")
		}
		else if(FLAG[TF_MENU_SELECT] == 51 )
		{
			LoadArg("map/mp6554m/mp6554m.arg")
			EventCue("mp6554m:Relocate_B5b")
		}
		else if(FLAG[TF_MENU_SELECT] == 60 )
		{
			LoadArg("map/mp6561m/mp6561m.arg")
			EventCue("mp6561m:Relocate_B6")
		}
		else if(FLAG[TF_MENU_SELECT] == 61 )
		{
			LoadArg("map/mp6561m/mp6561m.arg")
			EventCue("mp6561m:Relocate_B6b")
		}
	}
	else if(!FLAG[GF_BOSSFLOOR_NUM])
	{
		TalkPopup(UNDEF,0,3,SYSTEM_PPOSX,SYSTEM_PPOSY,0)
		{
			"#7C水晶石は淡い光を湛えている……"
			"#7C微弱だが確かな理力が通っているようだ。"
		}
		WaitPrompt()
		WaitCloseWindow()

		TalkPopup("LEADER",0,0,0,0,0)
		{
			"#000e#000mこの理力は……"
			"どこかに転位する為のものだね。"
		}
		WaitPrompt()
		WaitCloseWindow()

		TalkPopup("LEADER",0,0,0,0,0)
		{
			"#000e#000m今は反応しないみたいだけど……\p"
			"まずはこの先に進む必要があるのかも。"
		}
		WaitPrompt()
		WaitCloseWindow()
	}

	ResetStopFlag(STOPFLAG_TALKTURN)

}


function "Monolith_fadein"
{
	SetFlag(TF_MENU_SELECT2,1)
	ExecuteFunc(2000,"system:Monolith_light")

	Portrait_Anime(10 ,PR_ANIME_SCALE, 0.45f, 0.45f, 0, 0, 0)
	Portrait_Anime(10 ,PR_ANIME_SCALE, 0.6f, 0.6f, 0, 0, 0)
	Portrait_Anime(10 ,PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0.5f, 25)
	Wait(35)
	ExecuteFunc(2001,"system:Monolith_Action")

}
function "Monolith_light"
{
	while(FLAG[TF_MENU_SELECT2])
	{
		Portrait_Anime(10 ,PR_ANIME_SPECULAR, 0.25f, 0.25f, 0.25f, 0, 60)
		Wait(60)
		Portrait_Anime(10 ,PR_ANIME_SPECULAR, 0.01f, 0.01f, 0.01f, 0, 60)
		Wait(60)
	}
}
function "Monolith_Action"
{
	while(FLAG[TF_MENU_SELECT2])
	{
		SetFlag(TF_MENU_SELECT,(rand() % 10 ))

		if(rand()%100 < 40)
		{		
			Portrait_Anime(10 ,PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0.350f, FLAG[TF_MENU_SELECT])
			Wait(FLAG[TF_MENU_SELECT])
			Portrait_Anime(10 ,PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0.450f, FLAG[TF_MENU_SELECT])
			Wait(FLAG[TF_MENU_SELECT])
		}
//		else
//		{
//			Portrait_Anime(10 ,PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0.200f, FLAG[TF_MENU_SELECT])
//			Wait(FLAG[TF_MENU_SELECT])
//			Portrait_Anime(10 ,PR_ANIME_COLOR, 1.0f, 1.0f, 1.0f, 0.450f, FLAG[TF_MENU_SELECT])
//			Wait(FLAG[TF_MENU_SELECT])
//		}
	}
}


//function "SaveFruits"	//果物を保存
//{
//
//		//果物の退避と廃棄
//	SetFlag(GF_STOCK_BERRY        , (ALLITEMWORK[ICON3D_US_BERRY]        ))
//	SetFlag(GF_STOCK_COCONUT      , (ALLITEMWORK[ICON3D_US_COCONUT]      ))
//	SetFlag(GF_STOCK_MANGO        , (ALLITEMWORK[ICON3D_US_MANGO]        ))
//	SetFlag(GF_STOCK_DRAGONFRUIT  , (ALLITEMWORK[ICON3D_US_DRAGONFRUIT]  ))
//	SetFlag(GF_STOCK_BERRY_S      , (ALLITEMWORK[ICON3D_US_BERRY_S]      ))
//	SetFlag(GF_STOCK_COCONUT_S    , (ALLITEMWORK[ICON3D_US_COCONUT_S]    ))
//	SetFlag(GF_STOCK_MANGO_S      , (ALLITEMWORK[ICON3D_US_MANGO_S]      ))
//	SetFlag(GF_STOCK_DRAGONFRUIT_S, (ALLITEMWORK[ICON3D_US_DRAGONFRUIT_S]))
//
//	DeleteItem(ICON3D_US_BERRY        , 999)
//	DeleteItem(ICON3D_US_COCONUT      , 999)
//	DeleteItem(ICON3D_US_MANGO        , 999)
//	DeleteItem(ICON3D_US_DRAGONFRUIT  , 999)
//	DeleteItem(ICON3D_US_BERRY_S      , 999)
//	DeleteItem(ICON3D_US_COCONUT_S    , 999)
//	DeleteItem(ICON3D_US_MANGO_S      , 999)
//	DeleteItem(ICON3D_US_DRAGONFRUIT_S, 999)
//
////	Message("SaveFruits")
////	WaitPrompt()
//}
//
//function "LoadFruits"	//果物を復帰
//{
//
//		//果物を復帰
//	GetItem(ICON3D_US_BERRY        , (FLAG[GF_STOCK_BERRY]         ))
//	GetItem(ICON3D_US_COCONUT      , (FLAG[GF_STOCK_COCONUT]       ))
//	GetItem(ICON3D_US_MANGO        , (FLAG[GF_STOCK_MANGO]         ))
//	GetItem(ICON3D_US_DRAGONFRUIT  , (FLAG[GF_STOCK_DRAGONFRUIT]   ))
//	GetItem(ICON3D_US_BERRY_S      , (FLAG[GF_STOCK_BERRY_S]       ))
//	GetItem(ICON3D_US_COCONUT_S    , (FLAG[GF_STOCK_COCONUT_S]     ))
//	GetItem(ICON3D_US_MANGO_S      , (FLAG[GF_STOCK_MANGO_S]       ))
//	GetItem(ICON3D_US_DRAGONFRUIT_S, (FLAG[GF_STOCK_DRAGONFRUIT_S] ))
//
////	Message("LoadFruits")
////	WaitPrompt()
//}

///////////////////////////////////////////////////////////////
// アドルEX演出用カメラ
///////////////////////////////////////////////////////////////
function "adolEXcamera"
{
	// 以下はテスト
	CrossFade(10)

	SetStopFlag(STOPFLAG_BTLCAMERA)

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1);	// ニアクリップをオフにする
	ResetMoveVec("PLAYER1")						// 移動ベクトルをリセットする

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 1)	// 強制クリップ

	FixCamera()
	SaveCamera()
	ResetCameraObserver(0)

	//--------------------
	// Pos Key
	KeyAnimeCreate(KEYANIME_EXSKILLPOS, 12)
	KeyAnimeSet(0, -0.000, 0.000, 0.800, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(14, -0.000, 0.000, 0.800, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(15, -0.000, 0.000, 0.800, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(32, -0.000, 0.000, 0.837, 2.222, 0.000, 0.000, 0.004, -0.000, 0.000, 0.000, 0.004, -0.000)
	KeyAnimeSet(54, -0.000, 0.000, 0.960, 2.222, 0.000, 0.000, 0.005, -0.000, 0.000, 0.000, 0.005, -0.000)
	KeyAnimeSet(75, -0.000, 0.000, 1.040, 2.222, 0.000, 0.000, 0.006, 0.000, 0.000, 0.000, 0.006, 0.000)
	KeyAnimeSet(93, -0.000, 0.000, 1.180, 2.222, 0.000, 0.000, 0.006, 0.000, 0.000, 0.000, 0.006, 0.000)
	KeyAnimeSet(113, -0.000, 0.000, 1.268, 2.222, 0.000, 0.000, 0.003, -0.000, 0.000, 0.000, 0.003, -0.000)
	KeyAnimeSet(127, -0.000, 0.000, 1.296, 2.222, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.001, 0.000)
	KeyAnimeSet(135, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(136, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(155, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	
	// Rot Key
	KeyAnimeCreate(KEYANIME_EXSKILLROT, 12)
	KeyAnimeSet(0, -12.642, 0.000, 510.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(14, -12.642, 0.000, 510.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(15, -12.642, 0.000, 510.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(32, -9.900, -5.730, 530.157, 40.000, 0.301, -0.470, 2.108, 0.128, 0.301, -0.470, 2.108, 0.128)
	KeyAnimeSet(54, -0.892, -18.335, 593.194, 45.000, 0.616, -0.240, 3.918, 0.163, 0.616, -0.240, 3.918, 0.163)
	KeyAnimeSet(75, 16.585, -16.043, 698.612, 47.000, 0.757, 0.558, 4.936, 0.000, 0.757, 0.558, 4.936, 0.000)
	KeyAnimeSet(93, 28.612, 3.438, 785.716, 45.000, -0.059, 0.520, 4.559, -0.184, -0.059, 0.520, 4.559, -0.184)
	KeyAnimeSet(113, 14.330, 10.724, 871.839, 40.000, -0.552, -0.101, 3.329, -0.029, -0.552, -0.101, 3.329, -0.029)
	KeyAnimeSet(127, 9.844, 10.000, 898.885, 44.000, -0.089, 0.000, 0.534, 0.125, -0.089, 0.000, 0.534, 0.125)
	KeyAnimeSet(135, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(136, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	KeyAnimeSet(155, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	
	// Camera Anime
	KeyAnimeCamera(2.5f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)
	
	// Key Release
	KeyAnimeRelease(KEYANIME_EXSKILLPOS)
	KeyAnimeRelease(KEYANIME_EXSKILLROT)
	//----------

//	RestoreCamera(INTERPOLATE_LINEAR, 15)		// 線形補間
//	RestoreCamera(INTERPOLATE_SPHERE, 15)		// 最初と最後ゆっくり
	RestoreCamera(INTERPOLATE_COS, 15)			// 最後ゆっくり
	Wait(15)

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1)	// ニアクリップオフ解除

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除

	ResetStopFlag(STOPFLAG_BTLCAMERA)
}
///////////////////////////////////////////////////////////////
//▼ アドルEX演出用カメラ：
///////////////////////////////////////////////////////////////
function "c000EX"
{
	// 以下はテスト
	
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 1)	//操作キャラのスキップノードオフ
	
	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1);	// ニアクリップをオフにする
	ResetMoveVec("PLAYER1")						// 移動ベクトルをリセットする

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	
	CrossFade(10)

	SetStopFlag(STOPFLAG_BTLCAMERA)
	FixCamera()
	SaveCamera()
	ResetCameraObserver(0)

//--------------------
// Pos Key
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 11)
KeyAnimeSet(0, -0.000, 0.000, 1.400, 1.400, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -0.000, 0.000, 1.400, 1.500, -0.002, 0.000, -0.000, 0.006, -0.002, 0.000, -0.000, 0.006)
KeyAnimeSet(52, -0.000, 0.000, 1.375, 1.700, -0.001, 0.000, -0.001, 0.013, -0.001, 0.000, -0.001, 0.013)
KeyAnimeSet(74, -0.000, 0.000, 1.360, 2.000, 0.000, 0.000, -0.000, 0.010, 0.000, 0.000, -0.000, 0.010)
KeyAnimeSet(95, -0.000, 0.000, 1.355, 2.122, 0.000, 0.000, -0.000, 0.006, 0.000, 0.000, -0.000, 0.006)
KeyAnimeSet(113, -0.000, 0.000, 1.350, 2.222, 0.000, 0.000, -0.001, 0.003, 0.000, 0.000, -0.001, 0.003)
KeyAnimeSet(133, -0.000, 0.000, 1.325, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(147, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(155, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(156, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(175, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 11)
KeyAnimeSet(0, 15.642, 8.000, 530.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, 12.642, 5.000, 530.972, 40.000, -0.110, -0.140, 0.177, 0.038, -0.110, -0.140, 0.177, 0.038)
KeyAnimeSet(52, 9.900, 0.730, 540.157, 42.000, -0.294, -0.583, 1.556, 0.125, -0.294, -0.583, 1.556, 0.125)
KeyAnimeSet(74, 0.892, -18.335, 593.194, 45.000, 0.155, -0.390, 3.685, 0.116, 0.155, -0.390, 3.685, 0.116)
KeyAnimeSet(95, 16.585, -16.043, 698.612, 47.000, 0.711, 0.558, 4.936, 0.000, 0.711, 0.558, 4.936, 0.000)
KeyAnimeSet(113, 28.612, 3.438, 785.716, 45.000, -0.059, 0.704, 4.559, -0.184, -0.059, 0.704, 4.559, -0.184)
KeyAnimeSet(133, 14.330, 8.724, 871.839, 40.000, -0.552, 0.046, 3.329, -0.029, -0.552, 0.046, 3.329, -0.029)
KeyAnimeSet(147, 9.844, 5.000, 898.885, 44.000, -0.236, -0.306, 1.423, 0.227, -0.236, -0.306, 1.423, 0.227)
KeyAnimeSet(155, 9.136, 2.000, 903.155, 45.000, -0.079, -0.333, 0.474, 0.111, -0.079, -0.333, 0.474, 0.111)
KeyAnimeSet(156, 9.136, 2.000, 903.155, 45.000, 0.000, -0.100, 0.000, 0.000, 0.000, -0.100, 0.000, 0.000)
KeyAnimeSet(175, 9.136, 0.000, 903.155, 45.000, 0.000, -0.105, 0.000, 0.000, 0.000, -0.105, 0.000, 0.000)


/*
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 11)
KeyAnimeSet(0, -0.000, 0.000, 1.400, 1.400, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -0.000, 0.000, 1.400, 1.500, -0.002, 0.000, -0.000, 0.006, -0.002, 0.000, -0.000, 0.006)
KeyAnimeSet(52, -0.000, 0.000, 1.375, 1.700, -0.001, 0.000, -0.001, 0.013, -0.001, 0.000, -0.001, 0.013)
KeyAnimeSet(74, -0.000, 0.000, 1.360, 2.000, 0.000, 0.000, -0.000, 0.010, 0.000, 0.000, -0.000, 0.010)
KeyAnimeSet(95, -0.000, 0.000, 1.355, 2.122, 0.000, 0.000, -0.000, 0.006, 0.000, 0.000, -0.000, 0.006)
KeyAnimeSet(113, -0.000, 0.000, 1.350, 2.222, 0.000, 0.000, -0.001, 0.003, 0.000, 0.000, -0.001, 0.003)
KeyAnimeSet(133, -0.000, 0.000, 1.325, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(147, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(155, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(156, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(175, -0.000, 0.000, 1.300, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 11)
KeyAnimeSet(0, 15.642, 8.000, 530.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, 12.642, 5.000, 530.972, 40.000, -0.110, -0.140, 0.177, 0.038, -0.110, -0.140, 0.177, 0.038)
KeyAnimeSet(52, 9.900, 0.730, 540.157, 42.000, -0.294, -0.583, 1.556, 0.125, -0.294, -0.583, 1.556, 0.125)
KeyAnimeSet(74, 0.892, -18.335, 593.194, 45.000, 0.155, -0.390, 3.685, 0.116, 0.155, -0.390, 3.685, 0.116)
KeyAnimeSet(95, 16.585, -16.043, 698.612, 47.000, 0.711, 0.558, 4.936, 0.000, 0.711, 0.558, 4.936, 0.000)
KeyAnimeSet(113, 28.612, 3.438, 785.716, 45.000, -0.059, 0.704, 4.559, -0.184, -0.059, 0.704, 4.559, -0.184)
KeyAnimeSet(133, 14.330, 10.724, 871.839, 40.000, -0.552, 0.193, 3.329, -0.029, -0.552, 0.193, 3.329, -0.029)
KeyAnimeSet(147, 9.844, 10.000, 898.885, 44.000, -0.236, -0.033, 1.423, 0.227, -0.236, -0.033, 1.423, 0.227)
KeyAnimeSet(155, 9.136, 10.000, 903.155, 45.000, -0.079, 0.000, 0.474, 0.111, -0.079, 0.000, 0.474, 0.111)
KeyAnimeSet(156, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(175, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
*/	
	// Camera Anime
	KeyAnimeCamera(2.5f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)
	
	// Key Release
	KeyAnimeRelease(KEYANIME_EXSKILLPOS)
	KeyAnimeRelease(KEYANIME_EXSKILLROT)
	//----------

	RestoreCamera(INTERPOLATE_SPHERE, 20)

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1)	// ニアクリップオフ解除

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	
	Wait(25)
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 0)	//スキップノードON
	
	ResetStopFlag(STOPFLAG_BTLCAMERA)
}
///////////////////////////////////////////////////////////////
//▼ サハドEX演出用カメラ：
///////////////////////////////////////////////////////////////
function "c001EX"
{
	// 以下はテスト
	
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 1)	//操作キャラのスキップノードオフ

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1);	// ニアクリップをオフにする
	ResetMoveVec("PLAYER1")						// 移動ベクトルをリセットする
	
	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	
	CrossFade(10)

	SetStopFlag(STOPFLAG_BTLCAMERA)
	FixCamera()
	SaveCamera()
	ResetCameraObserver(0)
//--------------------
// Pos Key
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 8)
KeyAnimeSet(0, 0.000, 0.000, 1.430, 1.400, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, 0.000, 0.000, 1.490, 1.500, 0.000, 0.000, -0.002, 0.010, 0.000, 0.000, -0.002, 0.010)
KeyAnimeSet(52, 0.000, 0.000, 1.330, 1.934, 0.000, 0.000, -0.007, 0.022, 0.000, 0.000, -0.007, 0.022)
KeyAnimeSet(74, 0.000, 0.000, 1.210, 2.384, 0.000, 0.000, -0.007, 0.013, 0.000, 0.000, -0.007, 0.013)
KeyAnimeSet(95, 0.000, 0.000, 1.010, 2.506, 0.000, 0.000, -0.002, 0.001, 0.000, 0.000, -0.002, 0.001)
KeyAnimeSet(133, 0.000, 0.000, 1.068, 2.426, 0.000, 0.000, 0.002, -0.005, 0.000, 0.000, 0.002, -0.005)
KeyAnimeSet(147, 0.000, 0.000, 1.096, 2.222, 0.000, 0.000, 0.001, 0.003, 0.000, 0.000, 0.001, 0.003)
KeyAnimeSet(175, 0.000, 0.000, 1.096, 2.534, 0.000, 0.000, 0.000, 0.011, 0.000, 0.000, 0.000, 0.011)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 8)
KeyAnimeSet(0, -12.642, 0.000, 150.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -12.642, 0.000, 150.972, 40.000, 0.053, -0.110, 0.369, 0.038, 0.053, -0.110, 0.369, 0.038)
KeyAnimeSet(52, -9.900, -5.730, 170.157, 42.000, 0.294, -0.458, 2.056, 0.125, 0.294, -0.458, 2.056, 0.125)
KeyAnimeSet(74, -0.892, -18.335, 233.194, 45.000, 0.616, -0.240, 3.918, 0.116, 0.616, -0.240, 3.918, 0.116)
KeyAnimeSet(95, 16.585, -16.043, 338.612, 47.000, 0.137, 0.493, 4.733, -0.085, 0.137, 0.493, 4.733, -0.085)
KeyAnimeSet(133, 7.168, 10.724, 512.412, 40.000, -0.190, 0.501, 3.851, -0.058, -0.190, 0.501, 3.851, -0.058)
KeyAnimeSet(147, 6.693, 10.000, 538.885, 44.000, -0.011, -0.017, 0.630, 0.095, -0.011, -0.017, 0.630, 0.095)
KeyAnimeSet(175, 6.693, 10.000, 538.886, 44.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Camera Anime
KeyAnimeCamera(2.5f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)

// Key Release
KeyAnimeRelease(KEYANIME_EXSKILLPOS)
KeyAnimeRelease(KEYANIME_EXSKILLROT)
//----------




//	RestoreCamera(INTERPOLATE_SPHERE, 20)
//	RestoreCamera(INTERPOLATE_LINEAR, 15)		// 線形補間
//	RestoreCamera(INTERPOLATE_SPHERE, 15)		// 最初と最後ゆっくり
//	RestoreCamera(INTERPOLATE_COS, 20)			// 最後ゆっくり
	RestoreCamera(INTERPOLATE_SPHERE, 20)
	
	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1)	// ニアクリップオフ解除
	
	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除

	Wait(25)
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 0)	//スキップノードON
	
	ResetStopFlag(STOPFLAG_BTLCAMERA)
}
///////////////////////////////////////////////////////////////
//▼ ラクシャEX演出用カメラ：
///////////////////////////////////////////////////////////////
function "c002EX"
{
	// 以下はテスト
	
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 1)	//操作キャラのスキップノードオフ

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1);	// ニアクリップをオフにする
	ResetMoveVec("PLAYER1")						// 移動ベクトルをリセットする
	
	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	
	CrossFade(10)

	SetStopFlag(STOPFLAG_BTLCAMERA)
	FixCamera()
	SaveCamera()
	ResetCameraObserver(0)

// Pos Key
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 8)
KeyAnimeSet(0, -0.000, 0.000, 1.370, 1.400, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -0.000, 0.000, 1.350, 1.500, 0.000, 0.000, -0.002, 0.006, 0.000, 0.000, -0.002, 0.006)
KeyAnimeSet(52, -0.000, 0.000, 1.270, 1.700, 0.000, 0.000, -0.006, 0.013, 0.000, 0.000, -0.006, 0.013)
KeyAnimeSet(74, -0.000, 0.000, 1.090, 2.000, 0.000, 0.000, -0.005, 0.010, 0.000, 0.000, -0.005, 0.010)
KeyAnimeSet(95, -0.000, 0.000, 1.010, 2.122, 0.000, 0.000, -0.001, 0.006, 0.000, 0.000, -0.001, 0.006)
KeyAnimeSet(113, -0.000, 0.000, 1.065, 2.196, 0.000, 0.000, 0.004, 0.003, 0.000, 0.000, 0.004, 0.003)
KeyAnimeSet(147, -0.000, 0.000, 1.116, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(175, -0.000, 0.000, 1.116, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 8)
KeyAnimeSet(0, -12.642, 0.000, 150.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -12.642, 0.000, 150.972, 40.000, 0.053, -0.110, 0.369, 0.038, 0.053, -0.110, 0.369, 0.038)
KeyAnimeSet(52, -9.327, -5.730, 170.157, 42.000, 0.294, -0.458, 2.056, 0.125, 0.294, -0.458, 2.056, 0.125)
KeyAnimeSet(74, -0.892, -18.335, 233.194, 45.000, 0.389, -0.240, 3.898, 0.116, 0.389, -0.240, 3.898, 0.116)
KeyAnimeSet(95, 7.418, -16.043, 337.753, 47.000, 0.441, 0.558, 4.936, 0.000, 0.441, 0.558, 4.936, 0.000)
KeyAnimeSet(113, 13.574, -2.943, 427.608, 43.908, 0.182, 0.704, 4.581, -0.184, 0.182, 0.704, 4.581, -0.184)
KeyAnimeSet(147, 9.844, 0.000, 531.150, 44.000, -0.163, -0.030, 1.127, 0.167, -0.163, -0.030, 1.127, 0.167)
KeyAnimeSet(175, 8.698, 0.000, 544.042, 44.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	
	// Camera Anime
	KeyAnimeCamera(2.5f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)
	
	// Key Release
	KeyAnimeRelease(KEYANIME_EXSKILLPOS)
	KeyAnimeRelease(KEYANIME_EXSKILLROT)
	//----------

	RestoreCamera(INTERPOLATE_SPHERE, 20)
	
	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1)	// ニアクリップオフ解除
	
	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除

	Wait(25)
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 0)	//スキップノードON
	
	ResetStopFlag(STOPFLAG_BTLCAMERA)
}
///////////////////////////////////////////////////////////////
//▼ ヒュンメルEX演出用カメラ：
///////////////////////////////////////////////////////////////
function "c003EX"
{
	// 以下はテスト
	
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 1)	//操作キャラのスキップノードオフ

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1);	// ニアクリップをオフにする
	ResetMoveVec("PLAYER1")						// 移動ベクトルをリセットする
	
	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	
	CrossFade(10)

	SetStopFlag(STOPFLAG_BTLCAMERA)
	FixCamera()
	SaveCamera()
	ResetCameraObserver(0)

// Pos Key
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 8)
KeyAnimeSet(0, -0.000, 0.000, 1.570, 1.400, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -0.000, 0.000, 1.550, 1.500, 0.000, 0.000, -0.002, 0.006, 0.000, 0.000, -0.002, 0.006)
KeyAnimeSet(52, -0.000, 0.000, 1.440, 1.700, 0.000, 0.000, -0.006, 0.013, 0.000, 0.000, -0.006, 0.013)
KeyAnimeSet(74, -0.000, 0.000, 1.270, 2.000, 0.000, 0.000, -0.005, 0.010, 0.000, 0.000, -0.005, 0.010)
KeyAnimeSet(95, -0.000, 0.000, 1.130, 2.122, 0.000, 0.000, -0.001, 0.006, 0.000, 0.000, -0.001, 0.006)
KeyAnimeSet(113, -0.000, 0.000, 1.195, 2.196, 0.000, 0.000, 0.004, 0.003, 0.000, 0.000, 0.004, 0.003)
KeyAnimeSet(147, -0.000, 0.000, 1.246, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(175, -0.000, 0.000, 1.246, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 8)
KeyAnimeSet(0, -12.642, 0.000, 150.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -12.642, 0.000, 150.972, 40.000, 0.053, -0.110, 0.369, 0.038, 0.053, -0.110, 0.369, 0.038)
KeyAnimeSet(52, -10.327, -5.730, 170.157, 42.000, 0.294, -0.458, 2.056, 0.125, 0.294, -0.458, 2.056, 0.125)
KeyAnimeSet(74, -7.892, -18.335, 233.194, 45.000, 0.389, -0.240, 3.898, 0.116, 0.389, -0.240, 3.898, 0.116)
KeyAnimeSet(95, -5.418, -16.043, 337.753, 47.000, 0.441, 0.558, 4.936, 0.000, 0.441, 0.558, 4.936, 0.000)
KeyAnimeSet(113, 0.574, -2.943, 427.608, 43.908, 0.197, 0.309, 3.719, -0.058, 0.197, 0.309, 3.719, -0.058)
KeyAnimeSet(147, 4.844, 0.000, 531.150, 44.000, 0.070, 0.047, 1.878, 0.001, 0.070, 0.047, 1.878, 0.001)
KeyAnimeSet(175, 4.898, 0.000, 544.042, 44.000, 0.002, 0.000, 0.460, 0.000, 0.002, 0.000, 0.460, 0.000)

//KeyAnimeSet(0, -12.642, 0.000, 150.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
//KeyAnimeSet(34, -12.642, 0.000, 150.972, 40.000, 0.053, -0.110, 0.369, 0.038, 0.053, -0.110, 0.369, 0.038)
//KeyAnimeSet(52, -10.327, -5.730, 170.157, 42.000, 0.294, -0.458, 2.056, 0.125, 0.294, -0.458, 2.056, 0.125)
//KeyAnimeSet(74, -7.892, -18.335, 233.194, 45.000, 0.389, -0.240, 3.898, 0.116, 0.389, -0.240, 3.898, 0.116)
//KeyAnimeSet(95, -5.418, -16.043, 337.753, 47.000, 0.441, 0.558, 4.936, 0.000, 0.441, 0.558, 4.936, 0.000)
//KeyAnimeSet(113, 0.574, -2.943, 427.608, 43.908, 0.182, 0.704, 4.581, -0.184, 0.182, 0.704, 4.581, -0.184)
//KeyAnimeSet(147, 4.844, 10.000, 531.150, 44.000, -0.163, -0.030, 1.127, 0.167, -0.163, -0.030, 1.127, 0.167)
//KeyAnimeSet(175, 4.898, 10.000, 544.042, 44.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	
	// Camera Anime
	KeyAnimeCamera(2.5f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)
	
	// Key Release
	KeyAnimeRelease(KEYANIME_EXSKILLPOS)
	KeyAnimeRelease(KEYANIME_EXSKILLROT)
	//----------

	RestoreCamera(INTERPOLATE_SPHERE, 20)
	
	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1)	// ニアクリップオフ解除
	
	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除

	Wait(25)
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 0)	//スキップノードON
	
	ResetStopFlag(STOPFLAG_BTLCAMERA)
}
///////////////////////////////////////////////////////////////
//▼ リコッタEX演出用カメラ：
///////////////////////////////////////////////////////////////
function "c004EX"
{
	// 以下はテスト
	
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 1)	//操作キャラのスキップノードオフ
	
	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1);	// ニアクリップをオフにする
	ResetMoveVec("PLAYER1")						// 移動ベクトルをリセットする

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	
	CrossFade(10)

	SetStopFlag(STOPFLAG_BTLCAMERA)
	FixCamera()
	SaveCamera()
	ResetCameraObserver(0)
	
//--------------------
// Pos Key
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 11)
KeyAnimeSet(0, 0.000, 0.000, 1.350, 1.400, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, 0.000, 0.000, 1.200, 1.500, 0.000, 0.000, -0.009, 0.006, 0.000, 0.000, -0.009, 0.006)
KeyAnimeSet(52, 0.000, 0.000, 0.905, 1.700, 0.000, 0.000, -0.011, 0.013, 0.000, 0.000, -0.011, 0.013)
KeyAnimeSet(74, 0.000, 0.000, 0.760, 2.000, 0.000, 0.000, -0.005, 0.010, 0.000, 0.000, -0.005, 0.010)
KeyAnimeSet(95, 0.000, 0.000, 0.705, 2.122, 0.000, 0.000, -0.002, 0.006, 0.000, 0.000, -0.002, 0.006)
KeyAnimeSet(113, 0.000, 0.000, 0.700, 2.222, 0.000, 0.000, -0.000, 0.003, 0.000, 0.000, -0.000, 0.003)
KeyAnimeSet(133, 0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(147, 0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(155, 0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(156, 0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(175, 0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 11)
KeyAnimeSet(0, 15.642, 8.000, 530.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, 12.642, 5.000, 530.972, 40.000, -0.110, -0.140, 0.177, 0.038, -0.110, -0.140, 0.177, 0.038)
KeyAnimeSet(52, 9.900, 0.730, 540.157, 42.000, -0.294, -0.583, 1.556, 0.125, -0.294, -0.583, 1.556, 0.125)
KeyAnimeSet(74, 0.892, -18.335, 593.194, 45.000, 0.155, -0.390, 3.685, 0.116, 0.155, -0.390, 3.685, 0.116)
KeyAnimeSet(95, 16.585, -16.043, 698.612, 47.000, 0.711, 0.558, 4.936, 0.000, 0.711, 0.558, 4.936, 0.000)
KeyAnimeSet(113, 28.612, 3.438, 785.716, 45.000, -0.059, 0.573, 4.559, -0.184, -0.059, 0.573, 4.559, -0.184)
KeyAnimeSet(133, 14.330, 0.724, 871.839, 40.000, -0.552, -0.013, 3.329, -0.029, -0.552, -0.013, 3.329, -0.029)
KeyAnimeSet(147, 9.844, 0.000, 898.885, 44.000, -0.236, -0.215, 1.423, 0.227, -0.236, -0.215, 1.423, 0.227)
KeyAnimeSet(155, 9.136, 0.000, 903.155, 45.000, -0.079, -0.222, 0.474, 0.111, -0.079, -0.222, 0.474, 0.111)
KeyAnimeSet(156, 9.136, 0.000, 903.155, 45.000, 0.000, -0.050, 0.000, 0.000, 0.000, -0.050, 0.000, 0.000)
KeyAnimeSet(175, 9.136, 0.000, 903.155, 45.000, 0.000, -0.053, 0.000, 0.000, 0.000, -0.053, 0.000, 0.000)

//KeyAnimeSet(0, 15.642, 8.000, 530.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
//KeyAnimeSet(34, 12.642, 5.000, 530.972, 40.000, -0.110, -0.140, 0.177, 0.038, -0.110, -0.140, 0.177, 0.038)
//KeyAnimeSet(52, 9.900, 0.730, 540.157, 42.000, -0.294, -0.583, 1.556, 0.125, -0.294, -0.583, 1.556, 0.125)
//KeyAnimeSet(74, 0.892, -18.335, 593.194, 45.000, 0.155, -0.390, 3.685, 0.116, 0.155, -0.390, 3.685, 0.116)
//KeyAnimeSet(95, 16.585, -16.043, 698.612, 47.000, 0.711, 0.558, 4.936, 0.000, 0.711, 0.558, 4.936, 0.000)
//KeyAnimeSet(113, 28.612, 3.438, 785.716, 45.000, -0.059, 0.704, 4.559, -0.184, -0.059, 0.704, 4.559, -0.184)
//KeyAnimeSet(133, 14.330, 10.724, 871.839, 40.000, -0.552, 0.193, 3.329, -0.029, -0.552, 0.193, 3.329, -0.029)
//KeyAnimeSet(147, 9.844, 10.000, 898.885, 44.000, -0.236, -0.033, 1.423, 0.227, -0.236, -0.033, 1.423, 0.227)
//KeyAnimeSet(155, 9.136, 10.000, 903.155, 45.000, -0.079, 0.000, 0.474, 0.111, -0.079, 0.000, 0.474, 0.111)
//KeyAnimeSet(156, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
//KeyAnimeSet(175, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	
// Camera Anime
KeyAnimeCamera(2.5f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)

// Key Release
KeyAnimeRelease(KEYANIME_EXSKILLPOS)
KeyAnimeRelease(KEYANIME_EXSKILLROT)
//----------

	
	
	
	
	
	
	
	
/*
//--------------------
// Pos Key
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 11)
KeyAnimeSet(0, -0.000, 0.000, 0.900, 1.400, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, -0.000, 0.000, 0.825, 1.500, -0.002, 0.000, -0.000, 0.006, -0.002, 0.000, -0.000, 0.006)
KeyAnimeSet(52, -0.000, 0.000, 0.755, 1.700, -0.001, 0.000, -0.001, 0.013, -0.001, 0.000, -0.001, 0.013)
KeyAnimeSet(74, -0.000, 0.000, 0.710, 2.000, 0.000, 0.000, -0.000, 0.010, 0.000, 0.000, -0.000, 0.010)
KeyAnimeSet(95, -0.000, 0.000, 0.705, 2.122, 0.000, 0.000, -0.000, 0.006, 0.000, 0.000, -0.000, 0.006)
KeyAnimeSet(113, -0.000, 0.000, 0.700, 2.222, 0.000, 0.000, -0.001, 0.003, 0.000, 0.000, -0.001, 0.003)
KeyAnimeSet(133, -0.000, 0.000, 0.700, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(147, -0.000, 0.000, 0.700, 2.222, 0.000, 0.000, -0.001, 0.000, 0.000, 0.000, -0.001, 0.000)
KeyAnimeSet(155, -0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(156, -0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(175, -0.000, 0.000, 0.700, 2.222, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 11)
KeyAnimeSet(0, 15.642, 8.000, 530.972, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(34, 12.642, 5.000, 530.972, 40.000, -0.110, -0.140, 0.177, 0.038, -0.110, -0.140, 0.177, 0.038)
KeyAnimeSet(52, 9.900, 0.730, 540.157, 42.000, -0.294, -0.583, 1.556, 0.125, -0.294, -0.583, 1.556, 0.125)
KeyAnimeSet(74, 0.892, -18.335, 593.194, 45.000, 0.155, -0.390, 3.685, 0.116, 0.155, -0.390, 3.685, 0.116)
KeyAnimeSet(95, 16.585, -16.043, 698.612, 47.000, 0.711, 0.558, 4.936, 0.000, 0.711, 0.558, 4.936, 0.000)
KeyAnimeSet(113, 28.612, 3.438, 785.716, 45.000, -0.059, 0.704, 4.559, -0.184, -0.059, 0.704, 4.559, -0.184)
KeyAnimeSet(133, 14.330, 10.724, 871.839, 40.000, -0.552, 0.193, 3.329, -0.029, -0.552, 0.193, 3.329, -0.029)
KeyAnimeSet(147, 9.844, 10.000, 898.885, 44.000, -0.236, -0.033, 1.423, 0.227, -0.236, -0.033, 1.423, 0.227)
KeyAnimeSet(155, 9.136, 10.000, 903.155, 45.000, -0.079, 0.000, 0.474, 0.111, -0.079, 0.000, 0.474, 0.111)
KeyAnimeSet(156, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(175, 9.136, 10.000, 903.155, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	
	// Camera Anime
	KeyAnimeCamera(2.5f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)
	
	// Key Release
	KeyAnimeRelease(KEYANIME_EXSKILLPOS)
	KeyAnimeRelease(KEYANIME_EXSKILLROT)
	//----------
*/
	RestoreCamera(INTERPOLATE_SPHERE, 20)

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1)	// ニアクリップオフ解除

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	
	Wait(25)
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 0)	//スキップノードON
	
	ResetStopFlag(STOPFLAG_BTLCAMERA)
}
///////////////////////////////////////////////////////////////
//▼ ダーナEX演出用カメラ：
///////////////////////////////////////////////////////////////
function "c005EX"
{
	// 以下はテスト
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 1)	//操作キャラのスキップノードオフ

	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1);	// ニアクリップをオフにする
	ResetMoveVec("PLAYER1")						// 移動ベクトルをリセットする

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 1)	// 強制クリップ
	
	CrossFade(10)

	SetStopFlag(STOPFLAG_BTLCAMERA)
	FixCamera()
	SaveCamera()
	ResetCameraObserver(0)

//--------------------
// Pos Key
KeyAnimeCreate(KEYANIME_EXSKILLPOS, 7)
KeyAnimeSet(0, -0.000, 0.000, 1.500, 1.028, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(18, -0.000, 0.000, 1.460, 1.188, 0.000, 0.000, -0.003, 0.012, 0.000, 0.000, -0.003, 0.012)
KeyAnimeSet(29, -0.000, 0.000, 1.409, 1.368, 0.000, 0.000, -0.008, 0.014, 0.000, 0.000, -0.008, 0.014)
KeyAnimeSet(38, -0.000, 0.000, 1.302, 1.463, 0.000, 0.000, -0.011, 0.015, 0.000, 0.000, -0.011, 0.015)
KeyAnimeSet(46, -0.000, 0.000, 1.226, 1.629, 0.000, 0.000, -0.006, 0.018, 0.000, 0.000, -0.006, 0.018)
KeyAnimeSet(60, -0.000, 0.000, 1.181, 1.869, 0.000, 0.000, -0.002, 0.014, 0.000, 0.000, -0.002, 0.014)
KeyAnimeSet(82, -0.000, 0.000, 1.140, 2.144, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

// Rot Key
KeyAnimeCreate(KEYANIME_EXSKILLROT, 7)
KeyAnimeSet(0, -4.984, 0.265, 180.139, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
KeyAnimeSet(18, -6.552, -5.313, 185.009, 40.000, -0.173, -0.297, 1.364, 0.031, -0.173, -0.297, 1.364, 0.031)
KeyAnimeSet(29, -10.005, -8.335, 219.708, 40.895, -0.408, -0.219, 4.624, 0.075, -0.408, -0.219, 4.624, 0.075)
KeyAnimeSet(38, -14.703, -9.695, 277.492, 41.491, -0.428, -0.153, 9.180, 0.083, -0.428, -0.153, 9.180, 0.083)
KeyAnimeSet(46, -17.282, -10.934, 375.765, 42.298, 0.044, 0.159, 10.096, 0.094, 0.044, 0.159, 10.096, 0.094)
KeyAnimeSet(60, -13.738, -6.205, 499.601, 43.550, 0.280, 0.311, 4.610, 0.075, 0.280, 0.311, 4.610, 0.075)
KeyAnimeSet(82, -7.193, 0.0, 541.723, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)

//KeyAnimeSet(0, -4.984, 0.265, 180.139, 40.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
//KeyAnimeSet(18, -6.552, -5.313, 185.009, 40.000, -0.173, -0.297, 1.364, 0.031, -0.173, -0.297, 1.364, 0.031)
//KeyAnimeSet(29, -10.005, -8.335, 219.708, 40.895, -0.408, -0.219, 4.624, 0.075, -0.408, -0.219, 4.624, 0.075)
//KeyAnimeSet(38, -14.703, -9.695, 277.492, 41.491, -0.428, -0.153, 9.180, 0.083, -0.428, -0.153, 9.180, 0.083)
//KeyAnimeSet(46, -17.282, -10.934, 375.765, 42.298, 0.044, 0.159, 10.096, 0.094, 0.044, 0.159, 10.096, 0.094)
//KeyAnimeSet(60, -13.738, -6.205, 499.601, 43.550, 0.280, 0.311, 4.610, 0.075, 0.280, 0.311, 4.610, 0.075)
//KeyAnimeSet(82, -7.193, 0.260, 541.723, 45.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000)
	
// Camera Anime
KeyAnimeCamera(1.0f, KEYANIME_EXSKILLPOS, KEYANIME_EXSKILLROT, 2)

// Key Release
KeyAnimeRelease(KEYANIME_EXSKILLPOS)
KeyAnimeRelease(KEYANIME_EXSKILLROT)
//----------





	RestoreCamera(INTERPOLATE_SPHERE, 20)

	Wait(10)
	SetChrWork("PLAYER1", CWK_NEARCLIP_OFF, 1)	// ニアクリップオフ解除

	SetChrWork("PLAYER2", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER3", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	SetChrWork("PLAYER4", CWK_FORCECLIP_ON, 0)	// 強制クリップ解除
	
//	Wait(25)
	Wait(20)
	SetChrWork("PLAYER1", CWK_DEFAULT_SKIPNODE_OFF, 0)	//スキップノードON
	
	ResetStopFlag(STOPFLAG_BTLCAMERA)
}


///////////////////////////////////////////////////////////////
//▼ リトルパロのマーカー登録ボイス
function "SetMarkerParoVoice"		//リトルパロのマーカー登録ボイス
{
	//最初に乱数
	SetFlag( TF_BREAK_RND, (rand() %3) )

	if(FLAG[TF_BREAK_RND] == 0) {
		ActiveVoiceStart(EACT_EVID_P_MARK01, 1, 0)	//マーカー登録	サア、イッテコイ！
	} else if(FLAG[TF_BREAK_RND] == 1) {
		ActiveVoiceStart(EACT_EVID_P_MARK02, 1, 0)	//マーカー登録	タンサク、ガンバレ！
	} else if(FLAG[TF_BREAK_RND] == 2) {
		ActiveVoiceStart(EACT_EVID_P_MARK03, 1, 0)	//マーカー登録	オマエラ、カンシャシロ！
	}
}

///////////////////////////////////////////////////////////////
//▼ ロケーション発見ボイス
function "FindLocationVoice"		//ロケーション発見ボイス ALL
{
	// 喋らせる人をランダムで選出
	SetFlag( TF_VOICEPLY_CHR, 0)			// 必要ないがおまじない
	SetFlag( TF_VOICEPLY_CHR, (WORK[WK_RANDJOINMB]))
	
	SetFlag( TF_BREAK_RND, (rand() %3) )

	if(FLAG[TF_VOICEPLY_CHR] == ADOL)
	{
		//	アドル（ボイス再生／表示なし）
		if(FLAG[TF_BREAK_RND] == 0) {
			PlayVoice(Y8V_0105,"ADOL",100)			//見事な場所だな…！
		} else if(FLAG[TF_BREAK_RND] == 1) {
			PlayVoice(Y8V_0106,"ADOL",100)			//これは絶景だな…！
		} else {
			PlayVoice(Y8V_0107,"ADOL",100)			//興味深いな…！
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == LAXIA)
	{
		//	ラクシャ（ボイス再生／表示なし）
		if(FLAG[TF_BREAK_RND] == 0) {
			PlayVoice(Y8V_0311,"LAXIA",100)			// こんな場所があるなんて…
		} else if(FLAG[TF_BREAK_RND] == 1) {
			PlayVoice(Y8V_0312,"LAXIA",100)			// わぁ、見事な景色ですね
		} else {
			PlayVoice(Y8V_0313,"LAXIA",100)			// これは面白いですね
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == SAHAD)
	{
		//	サハド（ボイス再生／表示なし）
		if(FLAG[TF_BREAK_RND] == 0) {
			PlayVoice(Y8V_1349,"SAHAD",100)			// こりゃあ見事な場所だな！
		} else if(FLAG[TF_BREAK_RND] == 1) {
			PlayVoice(Y8V_1350,"SAHAD",100)			// ガハハ、最高の景色だぜ！
		} else {
			PlayVoice(Y8V_1351,"SAHAD",100)			// ほう、こいつぁ面白いな！
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == HUMMEL)
	{
		//	ヒュンメル（ボイス再生／表示なし）
		if(FLAG[TF_BREAK_RND] == 0) {
			PlayVoice(Y8V_2108,"HUMMEL",100)		// フム、見事なものだな
		} else if(FLAG[TF_BREAK_RND] == 1) {
			PlayVoice(Y8V_2109,"HUMMEL",100)		// これは癒されるな
		} else {
			PlayVoice(Y8V_2110,"HUMMEL",100)		// なるほど…興味深いな
		}
	}
	else if(FLAG[TF_VOICEPLY_CHR] == RICOTTA)
	{
		//	リコッタ（ボイス再生／表示なし）
		if(FLAG[TF_BREAK_RND] == 0) {
			PlayVoice(Y8V_2501,"RICOTTA",100)		// なはは、スゴイ景色だな！
		} else if(FLAG[TF_BREAK_RND] == 1) {
			PlayVoice(Y8V_2502,"RICOTTA",100)		// スゴイ…綺麗だな…
		} else {
			PlayVoice(Y8V_2503,"RICOTTA",100)		// ふむふむ、面白いな…！
		}
	}
	else
	{
		//	ダーナ（ボイス再生／表示なし）
		if(FLAG[TF_BREAK_RND] == 0) {
			PlayVoice(Y8V_2936,"DANA",100)			// ふふ、いい場所だね
		} else if(FLAG[TF_BREAK_RND] == 1) {
			PlayVoice(Y8V_2937,"DANA",100)			// わぁ、絶景だね！
		} else {
			PlayVoice(Y8V_2938,"DANA",100)			// ふふ、面白いね
		}
	}
}

function "FindLocationVoice_A"		//ロケーション発見ボイス
{
	// 喋らせる人をランダムで選出
	SetFlag( TF_VOICEPLY_CHR, 0)			// 必要ないがおまじない
	SetFlag( TF_VOICEPLY_CHR, (WORK[WK_RANDJOINMB]))

	if(FLAG[TF_VOICEPLY_CHR] == ADOL)
	{
		//	アドル（ボイス再生／表示なし）
		PlayVoice(Y8V_0105,"ADOL",100)			//見事な場所だな…！
	}
	else if(FLAG[TF_VOICEPLY_CHR] == LAXIA)
	{
		//	ラクシャ（ボイス再生／表示なし）
		PlayVoice(Y8V_0311,"LAXIA",100)			// こんな場所があるなんて…
	}
	else if(FLAG[TF_VOICEPLY_CHR] == SAHAD)
	{
		//	サハド（ボイス再生／表示なし）
		PlayVoice(Y8V_1349,"SAHAD",100)			// こりゃあ見事な場所だな！
	}
	else if(FLAG[TF_VOICEPLY_CHR] == HUMMEL)
	{
		//	ヒュンメル（ボイス再生／表示なし）
		PlayVoice(Y8V_2108,"HUMMEL",100)		// フム、見事なものだな
	}
	else if(FLAG[TF_VOICEPLY_CHR] == RICOTTA)
	{
		//	リコッタ（ボイス再生／表示なし）
		PlayVoice(Y8V_2501,"RICOTTA",100)		// なはは、スゴイ景色だな！
	}
	else
	{
		//	ダーナ（ボイス再生／表示なし）
		PlayVoice(Y8V_2936,"DANA",100)			// ふふ、いい場所だね
	}
}

function "FindLocationVoice_B"		//ロケーション発見ボイス
{
	// 喋らせる人をランダムで選出
	SetFlag( TF_VOICEPLY_CHR, 0)			// 必要ないがおまじない
	SetFlag( TF_VOICEPLY_CHR, (WORK[WK_RANDJOINMB]))
	
	if(FLAG[TF_VOICEPLY_CHR] == ADOL)
	{
		//	アドル（ボイス再生／表示なし）
		PlayVoice(Y8V_0106,"ADOL",100)			//これは絶景だな…！
	}
	else if(FLAG[TF_VOICEPLY_CHR] == LAXIA)
	{
		//	ラクシャ（ボイス再生／表示なし）
		PlayVoice(Y8V_0312,"LAXIA",100)			// わぁ、見事な景色ですね
	}
	else if(FLAG[TF_VOICEPLY_CHR] == SAHAD)
	{
		//	サハド（ボイス再生／表示なし）
		PlayVoice(Y8V_1350,"SAHAD",100)			// ガハハ、最高の景色だぜ！
	}
	else if(FLAG[TF_VOICEPLY_CHR] == HUMMEL)
	{
		//	ヒュンメル（ボイス再生／表示なし）
		PlayVoice(Y8V_2109,"HUMMEL",100)		// これは癒されるな
	}
	else if(FLAG[TF_VOICEPLY_CHR] == RICOTTA)
	{
		//	リコッタ（ボイス再生／表示なし）
		PlayVoice(Y8V_2502,"RICOTTA",100)		// スゴイ…綺麗だな…
	}
	else
	{
		//	ダーナ（ボイス再生／表示なし）
		PlayVoice(Y8V_2937,"DANA",100)			// わぁ、絶景だね！
	}
}

function "FindLocationVoice_C"		//ロケーション発見ボイス
{
	// 喋らせる人をランダムで選出
	SetFlag( TF_VOICEPLY_CHR, 0)			// 必要ないがおまじない
	SetFlag( TF_VOICEPLY_CHR, (WORK[WK_RANDJOINMB]))
	
	//種類のランダム
	SetFlag( TF_BREAK_RND, (rand() %3) )

	if(FLAG[TF_VOICEPLY_CHR] == ADOL)
	{
		//	アドル（ボイス再生／表示なし）
		PlayVoice(Y8V_0107,"ADOL",100)			//興味深いな…！
	}
	else if(FLAG[TF_VOICEPLY_CHR] == LAXIA)
	{
		//	ラクシャ（ボイス再生／表示なし）
		PlayVoice(Y8V_0313,"LAXIA",100)			// これは面白いですね
	}
	else if(FLAG[TF_VOICEPLY_CHR] == SAHAD)
	{
		//	サハド（ボイス再生／表示なし）
		PlayVoice(Y8V_1351,"SAHAD",100)			// ほう、こいつぁ面白いな！
	}
	else if(FLAG[TF_VOICEPLY_CHR] == HUMMEL)
	{
		//	ヒュンメル（ボイス再生／表示なし）
		PlayVoice(Y8V_2110,"HUMMEL",100)		// なるほど…興味深いな
	}
	else if(FLAG[TF_VOICEPLY_CHR] == RICOTTA)
	{
		//	リコッタ（ボイス再生／表示なし）
		PlayVoice(Y8V_2503,"RICOTTA",100)		// ふむふむ、面白いな…！
	}
	else
	{
		//	ダーナ（ボイス再生／表示なし）
		PlayVoice(Y8V_2938,"DANA",100)			// ふふ、面白いね
	}
}

///////////////////////////////////////////////////////////////
//▼ ＮＰＣのマーカー全セット：
///////////////////////////////////////////////////////////////
//
//	CallFunc("system:SetMarkerNPC")	ＮＰＣにマーカーを付けるマップの init に記述しておく
//
function "SetMarkerNPC"
{

	//リセット
		SetEventNPC( "Laxia" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Hummel" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Sahad" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Dogi" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Katrin" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "LP_STOP_1110_1113" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Dina" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Alison" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Licht" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Barbaross" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Kiergaard" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Curran" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Aaron" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Nia" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Ricotta" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Reja" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Ed" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Thanatos" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Austen" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Sepa" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Kajura" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Rastell" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Rastell2" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Kashu" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Dana" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Silvia" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Griselda" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Kuina" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Miralda" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Franz" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Paro" , -1, -1, EV_NPC_TYPE_FRIEND)
		SetEventNPC( "ev_QS400_Monkey" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "ev_QS_401_Picard" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "LP_QS_401_PICARD_A" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "LP_QS_401_PICARD_B" , -1, -1, EV_NPC_TYPE_SUB)
		
		SetEventNPC( "Monkey" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Silvia_b" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Picard_1114" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Meer" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "Yuka" , -1, -1, EV_NPC_TYPE_SUB)

		SetEventNPC( "D_Laxia" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Hummel" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Sahad" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Dogi" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Katrin" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Dina" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Alison" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Licht" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Barbaross" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Kiergaard" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Curran" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Aaron" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Nia" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Ricotta" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Reja" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Ed" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Thanatos" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Austen" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Kashu" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Dana" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Silvia" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Griselda" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Kuina" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Miralda" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Franz" , -1, -1, EV_NPC_TYPE_SUB)
		SetEventNPC( "D_Paro" , -1, -1, EV_NPC_TYPE_FRIEND)

		SetEventNPC( "Doran" , -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Ulugnata", -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Shenna", -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Cesil", -1, -1, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Atra", -1, -1, EV_NPC_TYPE_MAIN )

	if(FLAG[GF_06MPxxxx_6TH_CHAPTER_FINISH])
	{
		//エピローグ
		SetEventNPC( "Sahad" ,GF_07MP1201_VILLAGE_WALK,GF_07MP1201_TALK_SAHAD, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Hummel" ,GF_07MP1201_VILLAGE_WALK,GF_07MP1201_TALK_HUMMEL, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Ricotta" ,GF_07MP1201_VILLAGE_WALK,GF_07MP1201_TALK_RICOTTA, EV_NPC_TYPE_MAIN)

		SetEventNPC( "D_Sahad" ,GF_07MP1201_VILLAGE_WALK,GF_07MP1201_TALK_SAHAD, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Hummel" ,GF_07MP1201_VILLAGE_WALK,GF_07MP1201_TALK_HUMMEL, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Ricotta" ,GF_07MP1201_VILLAGE_WALK,GF_07MP1201_TALK_RICOTTA, EV_NPC_TYPE_MAIN)
	}
	else if(FLAG[GF_05MPxxxx_5TH_CHAPTER_FINISH])
	{
		//６部
		SetEventNPC( "Dogi", GF_TBOX_DUMMY079, GF_06MP1215_APPEAR_ANCIENT, EV_NPC_TYPE_ITC)			//迎撃戦⑪
		SetEventNPC( "D_Dogi", GF_TBOX_DUMMY079, GF_06MP1215_APPEAR_ANCIENT, EV_NPC_TYPE_ITC)		//迎撃戦⑪

		SetEventNPC( "Dogi", GF_06MP6409_OCCUR_INTERCEPT12, GF_TBOX_DUMMY088, EV_NPC_TYPE_ITC)		//迎撃戦⑫
		SetEventNPC( "D_Dogi", GF_06MP6409_OCCUR_INTERCEPT12, GF_TBOX_DUMMY088, EV_NPC_TYPE_ITC)	//迎撃戦⑫

		SetEventNPC( "Dogi", GF_06MP1201_OCCUR_INTERCEPT21, GF_06MP1201_AFTER_INTERCEPT21, EV_NPC_TYPE_ITC)		//迎撃戦
		SetEventNPC( "Dogi", GF_06MP1201_OCCUR_INTERCEPT22, GF_06MP1201_AFTER_INTERCEPT22, EV_NPC_TYPE_ITC)		//迎撃戦
		SetEventNPC( "Dogi", GF_06MP1201_OCCUR_INTERCEPT23, GF_06MP1201_AFTER_INTERCEPT23, EV_NPC_TYPE_ITC)		//迎撃戦
		SetEventNPC( "Dogi", GF_06MP1201_OCCUR_INTERCEPT24, GF_06MP1201_AFTER_INTERCEPT24, EV_NPC_TYPE_ITC)		//迎撃戦
		SetEventNPC( "Dogi", GF_06MP1201_OCCUR_INTERCEPT25, GF_06MP1201_AFTER_INTERCEPT25, EV_NPC_TYPE_ITC)		//迎撃戦
		SetEventNPC( "Dogi", GF_06MP1201_OCCUR_INTERCEPT26, GF_06MP1201_AFTER_INTERCEPT26, EV_NPC_TYPE_ITC)		//迎撃戦
		SetEventNPC( "D_Dogi", GF_06MP1201_OCCUR_INTERCEPT21, GF_06MP1201_AFTER_INTERCEPT21, EV_NPC_TYPE_ITC)	//迎撃戦
		SetEventNPC( "D_Dogi", GF_06MP1201_OCCUR_INTERCEPT22, GF_06MP1201_AFTER_INTERCEPT22, EV_NPC_TYPE_ITC)	//迎撃戦
		SetEventNPC( "D_Dogi", GF_06MP1201_OCCUR_INTERCEPT23, GF_06MP1201_AFTER_INTERCEPT23, EV_NPC_TYPE_ITC)	//迎撃戦
		SetEventNPC( "D_Dogi", GF_06MP1201_OCCUR_INTERCEPT24, GF_06MP1201_AFTER_INTERCEPT24, EV_NPC_TYPE_ITC)	//迎撃戦
		SetEventNPC( "D_Dogi", GF_06MP1201_OCCUR_INTERCEPT25, GF_06MP1201_AFTER_INTERCEPT25, EV_NPC_TYPE_ITC)	//迎撃戦
		SetEventNPC( "D_Dogi", GF_06MP1201_OCCUR_INTERCEPT26, GF_06MP1201_AFTER_INTERCEPT26, EV_NPC_TYPE_ITC)	//迎撃戦
	}
	else if(FLAG[GF_04MPxxxx_4TH_CHAPTER_FINISH])
	{
		//５部
		SetEventNPC( "Dogi", GF_05MP1201_IN_MEETING, GF_05MP1213_INTERCEPT_DANA, EV_NPC_TYPE_ITC)				//迎撃戦⑧
		SetEventNPC( "D_Dogi", GF_05MP1201_IN_MEETING, GF_05MP1213_INTERCEPT_DANA, EV_NPC_TYPE_ITC)				//迎撃戦⑧

		SetEventNPC( "Dogi", GF_05MP1201_OCEANUS_STANDBY, GF_05MP1201_HOLD_PARTY, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Dogi", GF_05MP1201_OCEANUS_STANDBY, GF_05MP1201_HOLD_PARTY, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Dana", GF_05MP1201_HOLD_PARTY, GF_05MP6105_GOTO_VALLAY, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Dana", GF_05MP1201_HOLD_PARTY, GF_05MP6105_GOTO_VALLAY, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Dogi", GF_05MP1201_OCCUR_INTERCEPT9, GF_05MP1201_AFTER_INTERCEPT9, EV_NPC_TYPE_ITC)		//迎撃戦⑨
		SetEventNPC( "D_Dogi", GF_05MP1201_OCCUR_INTERCEPT9, GF_05MP1201_AFTER_INTERCEPT9, EV_NPC_TYPE_ITC)		//迎撃戦⑨
	}
	else if(FLAG[GF_03MPxxxx_3RD_CHAPTER_FINISH])
	{
		//４部
		SetEventNPC("Doran", GF_04MP6204_MEET_DORAN, GF_04MP4111_OUT_CAMP, EV_NPC_TYPE_MAIN)	//門番

		SetEventNPC( "Dogi", GF_04MP5101_OCCUR_INTERCEPT7, GF_04MP5101_AFTER_INTERCEPT7, EV_NPC_TYPE_ITC)		//迎撃戦⑦
		SetEventNPC( "D_Dogi", GF_04MP5101_OCCUR_INTERCEPT7, GF_04MP5101_AFTER_INTERCEPT7, EV_NPC_TYPE_ITC)		//迎撃戦⑦
	}
	else if(FLAG[GF_02MPxxxx_2ND_CHAPTER_FINISH])
	{
		//３部
		SetEventNPC("Laxia", GF_TBOX_DUMMY072, GF_03MP1201_GOTO_GENSD, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Dogi", GF_QS303_QUESTEVENT, GF_QS303_QUESTCLEAR, EV_NPC_TYPE_MAIN)						//制圧戦①

		SetEventNPC( "Dogi", GF_03MP433x_OCCUR_INTERCEPT5, GF_03MP433x_AFTER_INTERCEPT5, EV_NPC_TYPE_ITC)		//迎撃戦⑤
		SetEventNPC( "D_Dogi", GF_03MP433x_OCCUR_INTERCEPT5, GF_03MP433x_AFTER_INTERCEPT5, EV_NPC_TYPE_ITC)		//迎撃戦⑤

		SetEventNPC( "Dogi", GF_03MP1201_ALARM_INTERCEPT, GF_TBOX_DUMMY073, EV_NPC_TYPE_ITC)				//迎撃戦⑥
		SetEventNPC( "D_Dogi", GF_03MP1201_ALARM_INTERCEPT, GF_TBOX_DUMMY073, EV_NPC_TYPE_ITC)			//迎撃戦⑥
	}
	else if(FLAG[GF_01MPxxxx_1ST_CHAPTER_FINISH])
	{
		//２部
		SetEventNPC( "Sahad" ,GF_02MP1202_GET_CLOTHES,GF_02MP1201_TALK_DOGISAHAD, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Dogi" ,GF_02MP1202_GET_CLOTHES,GF_02MP1201_TAKE_BREAKFAST, EV_NPC_TYPE_MAIN)

		SetEventNPC( "LP_STOP_1110_1113" ,GF_NPC_2A_01_START_EXPLORE,GF_02MP1110_REMOVE_OBSTACLE, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Alison" ,GF_02MP1110_REMOVE_OBSTACLE,GF_02MP1201_JOIN_ALISON, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Laxia" ,GF_02MP1201_JOIN_ALISON,GF_02MP1202_OPEN_DRESS, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Alison" ,GF_02MP1201_JOIN_ALISON,GF_02MP1202_OPEN_DRESS, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Katrin" ,GF_02MP1308_KILL_CHAMELEON,GF_02MP1201_JOIN_KATRIN, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Dina" ,GF_02MP1119_LOOK_DINA,GF_02MP1119_JOIN_DINA, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Licht" , GF_02MP2308_KILL_HIPPO, GF_02MP1202_HEAR_SHOUT, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Licht" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_LICHT, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Hummel" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_HUMMEL, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Barbaross" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_BARBAROSS, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Kiergaard" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_KIERGAARD, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Kiergaard" ,GF_02MP1101_LOOK_WAIE,GF_02MP1201_UNMASK_NEMO, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Sahad", GF_SUBEV_1203_CHECK_ROPE, GF_02MP1201_LOOK_CURRAN, EV_NPC_TYPE_MAIN)
		//SetEventNPC( "SubEV_Check_Rope", GF_02MP1201_LOST_CURRAN, GF_SUBEV_1203_CHECK_ROPE, EV_NPC_TYPE_MAIN)

		SetEventNPC( "Dogi", GF_02MP1201_BEFORE_INTERCEPT, GF_02MP1201_AFTER_INTERCEPT, EV_NPC_TYPE_ITC)		//迎撃戦①
		SetEventNPC( "Dogi", GF_02MP43xx_OCCUR_INTERCEPT2, GF_02MP43xx_AFTER_INTERCEPT2, EV_NPC_TYPE_ITC)		//迎撃戦②
		SetEventNPC( "Dogi", GF_02MP23xx_OCCUR_INTERCEPT3, GF_02MP23xx_AFTER_INTERCEPT3, EV_NPC_TYPE_ITC)		//迎撃戦③
		SetEventNPC( "Dogi", GF_02MP1201_BEFORE_INTERCEPT2, GF_02MP1201_START_INTERCEPT2, EV_NPC_TYPE_ITC)		//迎撃戦④	メインの２回目

		//ダミーも
		SetEventNPC( "D_Sahad" ,GF_02MP1202_GET_CLOTHES,GF_02MP1201_TALK_DOGISAHAD, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Dogi" ,GF_02MP1202_GET_CLOTHES,GF_02MP1201_TAKE_BREAKFAST, EV_NPC_TYPE_MAIN)

		SetEventNPC( "D_Alison" ,GF_02MP1110_REMOVE_OBSTACLE,GF_02MP1201_JOIN_ALISON, EV_NPC_TYPE_MAIN)

		SetEventNPC( "D_Laxia" ,GF_02MP1201_JOIN_ALISON,GF_02MP1202_OPEN_DRESS, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Alison" ,GF_02MP1201_JOIN_ALISON,GF_02MP1202_OPEN_DRESS, EV_NPC_TYPE_MAIN)

//		SetEventNPC( "D_Katrin" ,GF_02MP1308_KILL_CHAMELEON,GF_02MP1201_JOIN_KATRIN, EV_NPC_TYPE_MAIN)
//		SetEventNPC( "D_Dina" ,GF_02MP1119_LOOK_DINA,GF_02MP1119_JOIN_DINA, EV_NPC_TYPE_MAIN)

		SetEventNPC( "D_Licht" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_LICHT, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Hummel" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_HUMMEL, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Barbaross" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_BARBAROSS, EV_NPC_TYPE_MAIN)
		SetEventNPC( "D_Kiergaard" , GF_02MP1201_START_HEARING, GF_SUBEV_NEMO_TALK_KIERGAARD, EV_NPC_TYPE_MAIN)

		SetEventNPC( "D_Kiergaard" ,GF_02MP1101_LOOK_WAIE,GF_02MP1201_UNMASK_NEMO, EV_NPC_TYPE_MAIN)

		SetEventNPC( "D_Sahad", GF_SUBEV_1203_CHECK_ROPE, GF_02MP1201_LOOK_CURRAN, EV_NPC_TYPE_MAIN)

		SetEventNPC( "D_Dogi", GF_02MP1201_BEFORE_INTERCEPT, GF_02MP1201_AFTER_INTERCEPT, EV_NPC_TYPE_ITC)		//迎撃戦①
		SetEventNPC( "D_Dogi", GF_02MP43xx_OCCUR_INTERCEPT2, GF_02MP43xx_AFTER_INTERCEPT2, EV_NPC_TYPE_ITC)		//迎撃戦②
		SetEventNPC( "D_Dogi", GF_02MP23xx_OCCUR_INTERCEPT3, GF_02MP23xx_AFTER_INTERCEPT3, EV_NPC_TYPE_ITC)		//迎撃戦③
		SetEventNPC( "D_Dogi", GF_02MP1201_BEFORE_INTERCEPT2, GF_02MP1201_START_INTERCEPT2, EV_NPC_TYPE_ITC)	//迎撃戦④	メインの２回目
	}
	else if(FLAG[GF_00MP0011b_DIVE_OCEAN])
	{
		//１部

	}
	else
	{
		//プロローグ
		SetEventNPC( "Laxia" , GF_00MP0012_START_PATROL, GF_00MP1102_TALK_LAXIA, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Hummel" , GF_00MP0012_START_PATROL, GF_00MP1102_TALK_HUMMEL, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Sahad" , GF_00MP0012_START_PATROL, GF_00MP1102_TALK_SAHAD, EV_NPC_TYPE_MAIN)
		SetEventNPC( "Dogi" , GF_00MP0012_START_PATROL, GF_00MP1102_TALK_DOGI, EV_NPC_TYPE_MAIN)
	}

	//親愛イベント（クエストより発生する優先度が高いので、クエストより前に登録しています）
	if( ( FLAG[GF_02MP1202_HEAR_SHOUT] && !FLAG[GF_02MP1201_BEFORE_INTERCEPT2] )||	// 叫び声を聞いた～！迎撃戦の準備をはじめた
		( FLAG[GF_02MP1111_WOUND_BARBAROSS] && !FLAG[GF_03MP6410M_HEAR_TREE] )||	// バルバロスが致命傷を負う～！ダーナ編①	植樹祭の説明を受ける
		( FLAG[GF_NPC_4_02_SEE_THANATOS] && !FLAG[GF_NPC_5_01_BEFORE_INTERCEPT8] && FLAG[TF_MP6409_NOW] )||	// ▼第四部②タナトスと出会った～！★第五部①迎撃戦⑧が発生	かつ、mp6409にいる間
		( FLAG[GF_NPC_5_02_GOTO_LOOKOUT] && !FLAG[GF_NPC_5_03_GOTO_GHOSTHIP] )||	// ▽第五部見張り台に向かう～！▼第五部③幽霊船を調べに向かう
		( FLAG[GF_NPC_5_06_HOLD_PARTY] && !FLAG[GF_NPC_5_07_GOTO_VALLAY] )||		// ▼第五部⑥宴の漂流村を散策（夜）～！▼第五部⑦王家の谷へ向かう
		( FLAG[GF_NPC_7_01_GOTO_TEM] ))												// ▼エピローグ①寺院前へ向かう
	{
		// この期間は全てのキャラで親愛イベントが行えない
		//	・▼第二部⑫カーラン卿の悲鳴を聞いた　のタイミング
		//	・▽第二部⑱バルバロスが致命傷を負った（浜辺）のタイミング
		//	・「▼中庭でダーナに出会う(mpXXXX)」のタイミング
		//	・▽第五部見張り台に向かう　のタイミング
		//	・▼第五部⑥宴の漂流村を散策（夜）　のタイミング
		//	・エピローグ以降
	}
	else
	{
		//アリスン：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_ALISON] &&			// 親愛イベントを見た
			!FLAG[TF_ED_PRESENT_TALK] &&				//※マップ切り替えるまではエド・アリスンの親愛が起きなくする特殊フラグ
			FLAG[GF_LIKELV_ALISON] >= 2 && FLAG[GF_LIKELV_ED] >= 2 )
		{
			SetEventNPC( "Alison",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Alison",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//エアラン：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_AARON] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_AARON] >= 2 )
		{
			SetEventNPC( "Aaron",		GF_NPC_5_03_GOTO_GHOSTHIP, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Aaron",		GF_NPC_5_03_GOTO_GHOSTHIP, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//エド：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_ED] &&				// 親愛イベントを見た
			!FLAG[TF_ED_PRESENT_TALK] &&				//※マップ切り替えるまではエド・アリスンの親愛が起きなくする特殊フラグ
			FLAG[GF_LIKELV_ALISON] >= 2 && FLAG[GF_LIKELV_ED] >= 2 )
		{
			SetEventNPC( "Ed",			GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Ed",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//オースティン：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_AUSTEN] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_AUSTEN] >= 2 )
		{
			SetEventNPC( "Austen",		GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Austen",	GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//カシュー：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_KASHU] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_KASHU] >= 2 )
		{
			SetEventNPC( "Kashu",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Kashu",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//カトリーン：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_KATRIN] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_KATRIN] >= 2 )
		{
			SetEventNPC( "Katrin",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Katrin",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//カーラン卿：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_CURRAN] &&			// 親愛イベントを見た
			 FLAG[GF_LIKELV_CURRAN] >= 2 )
		{
			SetEventNPC( "Curran",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Curran",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//クイナ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_KUINA] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_KUINA] >= 2 )
		{
			SetEventNPC( "Kuina",		GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Kuina",		GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//グリゼルダ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_GRISELDA] &&		// 親愛イベントを見た
			FLAG[GF_LIKELV_GRISELDA] >= 2 )
		{
			SetEventNPC( "Griselda",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Griselda",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//サハド：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_SAHAD] &&			// 親愛イベントを見た
			FLAG[GF_SUBEV_PRESENT_SAHAD1] &&		// プレゼント1を渡した（サハド）
			FLAG[GF_SUBEV_PRESENT_SAHAD2])			// プレゼント2を渡した（サハド）
		{
			SetEventNPC( "Sahad",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Sahad",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//シスター・ニア：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_NIA] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_NIA] >= 2 )
		{
			SetEventNPC( "Nia",		GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Nia",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//シルヴィア：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_SILVIA] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_SILVIA] >= 2 )
		{
			SetEventNPC( "Silvia",		GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Silvia",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//タナトス：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_THANATOS] &&		// 親愛イベントを見た
			FLAG[GF_LIKELV_THANATOS] >= 2 )
		{
			SetEventNPC( "Thanatos",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Thanatos",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//ダーナ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_DANA] &&			// 親愛イベントを見た
			FLAG[GF_SUBEV_PRESENT_DANA1] &&			// プレゼント1を渡した（ダーナ）
			FLAG[GF_SUBEV_PRESENT_DANA2] )			// プレゼント2を渡した（ダーナ）
		{
			SetEventNPC( "Dana",	GF_NPC_6_04_GET_MISTILTEINN, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Dana",	GF_NPC_6_04_GET_MISTILTEINN, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//ディナ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_DINA] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_DINA] >= 2 )
		{
			SetEventNPC( "Dina",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Dina",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//ドギ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_DOGI] &&			// 親愛イベントを見た
			FLAG[GF_SUBEV_PRESENT_DOGI1] &&			// プレゼント1を渡した（ドギ）
			FLAG[GF_SUBEV_PRESENT_DOGI2])			// プレゼント2を渡した（ドギ）
		{
			SetEventNPC( "Dogi",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Dogi",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//ヒュンメル：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_HUMMEL] &&			// 親愛イベントを見た
			FLAG[GF_SUBEV_PRESENT_HUMMEL1] &&		// プレゼント1を渡した（ヒュンメル）
			FLAG[GF_SUBEV_PRESENT_HUMMEL2])			// プレゼント2を渡した（ヒュンメル）
		{
			SetEventNPC( "Hummel",		GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Hummel",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//フランツ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_FRANZ] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_FRANZ] >= 2 )
		{
			SetEventNPC( "Franz",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Franz",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//ミラルダ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_MIRALDA] &&		// 親愛イベントを見た
			FLAG[GF_LIKELV_MIRALDA] >= 2 )
		{
			SetEventNPC( "Miralda",		GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Miralda",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//ラクシャ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_LAXIA] &&			// 親愛イベントを見た
			FLAG[GF_SUBEV_PRESENT_LAXIA1] &&		// プレゼント1を渡した（ラクシャ）
			FLAG[GF_SUBEV_PRESENT_LAXIA2] )			// プレゼント2を渡した（ラクシャ）
		{
			SetEventNPC( "Laxia",		GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Laxia",		GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//リコッタ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_RICOTTA] &&		// 親愛イベントを見た
			FLAG[GF_SUBEV_PRESENT_RICOTTA1] &&		// プレゼント1を渡した（リコッタ）
			FLAG[GF_SUBEV_PRESENT_RICOTTA2])		// プレゼント2を渡した（リコッタ）
		{
			SetEventNPC( "Ricotta",		GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Ricotta",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//リトル・パロ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_PARO] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_PARO] >= 2 )
		{
			SetEventNPC( "Paro",		GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Paro",		GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//リヒト：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_LICHT] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_LICHT] >= 2 )
		{
			SetEventNPC( "Licht",		GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Licht",		GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
		//レーヤ：親愛イベント
		if( !FLAG[GF_SUBEV_SINAI_REJA] &&			// 親愛イベントを見た
			FLAG[GF_LIKELV_REJA] >= 2 )
		{
			SetEventNPC( "Reja",		GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
			SetEventNPC( "D_Reja",		GF_NPC_5_02_GOTO_BAHA, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_FRIEND )
		}
	}

	//クエスト（依頼人はクエスト可能期間でも、次の追加タイミングになった場合に頭上マーカーを消しています）
	if( FLAG[GF_NPC_6_04_GET_MISTILTEINN] )				//▼第六部④想剣ミストルティンを入手
	{
	 	if( FLAG[GF_QUEST_612] == QUEST_BBS || FLAG[GF_QUEST_612] == QUEST_START ){	// 【QS612】欠けたモノリス（グリゼルダ）
			SetEventNPC( "Griselda",	GF_NPC_6_04_GET_MISTILTEINN, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Griselda",	GF_NPC_6_04_GET_MISTILTEINN, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_6_03_AFTER_INTERCEPT12] )		//☆第六部Ｆ迎撃戦⑫を済ませた
	{
	 	if( FLAG[GF_QUEST_610] < QUEST_SUCCESS ){	// 【QS610】親友の遺言（ダーナ）
			SetEventNPC( "Dana",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Dana",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_611] == QUEST_BBS || FLAG[GF_QUEST_611] == QUEST_START ){	// 【QS611】老いらくの剣（シルヴィア）
			SetEventNPC( "Silvia",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Silvia",GF_NPC_6_03_AFTER_INTERCEPT12, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}

	 	if( FLAG[GF_QUEST_613] == QUEST_BBS || FLAG[GF_QUEST_613] == QUEST_START ){	// 【QS613】卵の奪還
			SetEventNPC( "Hummel",	GF_NPC_6_03_AFTER_INTERCEPT12, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Hummel",GF_NPC_6_03_AFTER_INTERCEPT12, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
		}
	}
	else if( FLAG[GF_NPC_6_02_GOTO_GEND] )			//▼第六部②ジャンダルム頂上へ向かう
	{
	 	if( FLAG[GF_QUEST_600] == QUEST_BBS || FLAG[GF_QUEST_600] == QUEST_START ){	// 【QS600】輝ける鎧（カトリーン）
			SetEventNPC( "Katrin",	GF_NPC_6_02_GOTO_GEND, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Katrin",GF_NPC_6_02_GOTO_GEND, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_601] == QUEST_BBS || FLAG[GF_QUEST_601] == QUEST_START ){	// 【QS601】冒険家への依頼（フランツ）
			SetEventNPC( "Franz",	GF_NPC_6_02_GOTO_GEND, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Franz",	GF_NPC_6_02_GOTO_GEND, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_602] == QUEST_BBS || FLAG[GF_QUEST_602] == QUEST_START ){	// 【QS602】白酒の調達（カシュー）
			SetEventNPC( "Kashu",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Kashu",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_5_07_GOTO_VALLAY] )		//▼第五部⑦王家の谷へ向かう
	{
	 	if( FLAG[GF_QUEST_530] == QUEST_BBS || FLAG[GF_QUEST_530] == QUEST_START ){	// 【QS530】ヴァルクイラの討伐
			SetEventNPC( "Aaron",	GF_NPC_5_07_GOTO_VALLAY, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Aaron",	GF_NPC_5_07_GOTO_VALLAY, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_5_04_GOTO_HOLLOW] )		//▼第五部④大空洞へ向かう
	{
	 	if( FLAG[GF_QUEST_520] == QUEST_BBS || FLAG[GF_QUEST_520] == QUEST_START ){	// 【QS520】真紅の産衣（エド）
			SetEventNPC( "Ed",		GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Ed",	GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_521] == QUEST_BBS || FLAG[GF_QUEST_521] == QUEST_START ){	// 【QS521】巨大な怨敵（タナトス）
			SetEventNPC( "Thanatos",	GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Thanatos",	GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_522] == QUEST_BBS || FLAG[GF_QUEST_522] == QUEST_START ){	// 【QS522】奮起の演奏会（オースティン）
			SetEventNPC( "Austen",	GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Austen",GF_NPC_5_04_GOTO_HOLLOW, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_5_03_GOTO_GHOSTHIP] )		//▼第五部③幽霊船を調べに向かう
	{
	}
	else if( FLAG[GF_NPC_5_02_GOTO_BAHA] )			//▼第五部②バハの塔に向かう
	{
	 	if( FLAG[GF_QUEST_500] == QUEST_BBS || FLAG[GF_QUEST_500] == QUEST_START ){	// 【QS500】脱出船の資材集め（ドギ）
			SetEventNPC( "Dogi",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Dogi",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_501] == QUEST_BBS || FLAG[GF_QUEST_501] == QUEST_START ){	// 【QS501】卵の配達（ヒュンメル）
			SetEventNPC( "Hummel",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Hummel",GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_502] == QUEST_BBS || FLAG[GF_QUEST_502] == QUEST_START ){	// 【QS502】航海のお守り（クイナ）
			SetEventNPC( "Kuina",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Kuina",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_503] == QUEST_BBS || FLAG[GF_QUEST_503] == QUEST_START ){	// 【QS503】グラドゥーナの掃討
			SetEventNPC( "Aaron",	GF_NPC_5_02_GOTO_BAHA, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Aaron",	GF_NPC_5_02_GOTO_BAHA, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
		if( FLAG[GF_QUEST_505] == QUEST_BBS || FLAG[GF_QUEST_505] == QUEST_START )	//【QS505】月光草の採取
		{
			SetEventNPC( "Licht",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Licht",	GF_NPC_5_02_GOTO_BAHA, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
		}
	}
	else if( FLAG[GF_NPC_4_01_GOTO_NORTH] )			//▼第四部①島北部に足を踏み入れた
	{
	 	if( FLAG[GF_QUEST_400] == QUEST_BBS || FLAG[GF_QUEST_400] == QUEST_START ){	// 【QS400】ししょーへの献上（リコッタ）
			SetEventNPC( "Ricotta",		GF_NPC_4_01_GOTO_NORTH, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Ricotta",	GF_NPC_4_01_GOTO_NORTH, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_401] == QUEST_BBS || FLAG[GF_QUEST_401] == QUEST_START ){	// 【QS401】新入りはいずこ（レーヤ）
			SetEventNPC( "Reja",	GF_NPC_4_01_GOTO_NORTH, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Reja",	GF_NPC_4_01_GOTO_NORTH, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_402] == QUEST_BBS || FLAG[GF_QUEST_402] == QUEST_START ){	// 【QS402】栄養満点の肉料理（ミラルダ）
			SetEventNPC( "Miralda",		GF_NPC_4_01_GOTO_NORTH, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Miralda",	GF_NPC_4_01_GOTO_NORTH, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_3_05_BACK_GENSD] )			//▼第三部⑤再びジャンダルムに向かう
	{
	 	if( FLAG[GF_QUEST_310] == QUEST_BBS || FLAG[GF_QUEST_310] == QUEST_START ){	// 【QS310】試作品の性能テスト（エアラン）
			SetEventNPC( "Aaron",	GF_NPC_3_05_BACK_GENSD, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Aaron",	GF_NPC_3_05_BACK_GENSD, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_311] == QUEST_BBS || FLAG[GF_QUEST_311] == QUEST_START ){	// 【QS311】神に祈りを（シスター・ニア）
			SetEventNPC( "Nia",		GF_NPC_3_05_BACK_GENSD, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Nia",	GF_NPC_3_05_BACK_GENSD, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_3_02_GOTO_GENSD] )			//▼第三部②ジャンダルムに向かう
	{
	 	if( FLAG[GF_QUEST_300] == QUEST_BBS || FLAG[GF_QUEST_300] == QUEST_START ){	// 【QS300】祈願の木（サハド）
			SetEventNPC( "Sahad",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_5_03_GOTO_GHOSTHIP, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Sahad",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_5_03_GOTO_GHOSTHIP, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_301] == QUEST_BBS || FLAG[GF_QUEST_301] == QUEST_START ){	// 【QS301】新しい薬の調合（リヒト）
			SetEventNPC( "Licht",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_5_03_GOTO_GHOSTHIP, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Licht",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_5_03_GOTO_GHOSTHIP, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_302] == QUEST_BBS || FLAG[GF_QUEST_302] == QUEST_START ){	// 【QS302】アギアギラの討伐
			SetEventNPC( "Aaron",	GF_NPC_3_02_GOTO_GENSD, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Aaron",	GF_NPC_3_02_GOTO_GENSD, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_2_11_JOIN_DINA] )			//▼第二部⑪ディナを助けた
	{
	 	if( FLAG[GF_QUEST_230] == QUEST_BBS || FLAG[GF_QUEST_230] == QUEST_START ){	// 【QS230】海賊のお宝探し（ディナ）
			SetEventNPC( "Dina",	GF_NPC_2_02_START_EXPLORE, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Dina",	GF_NPC_2_02_START_EXPLORE, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_231] == QUEST_BBS || FLAG[GF_QUEST_231] == QUEST_START ){	// 【QS231】美味なる食事（カーラン卿）
			SetEventNPC( "Curran",		GF_NPC_2_11_JOIN_DINA, GF_NPC_2_12_HEAR_SHOUT, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Curran",	GF_NPC_2_11_JOIN_DINA, GF_NPC_2_12_HEAR_SHOUT, EV_NPC_TYPE_SUB )
	 	}
		if(FLAG[GF_QUEST_232] == QUEST_BBS || FLAG[GF_QUEST_232] == QUEST_START )	//【QS232】闇夜の怪
		{
			SetEventNPC( "Dogi",	GF_NPC_2_11_JOIN_DINA, GF_NPC_2_12_HEAR_SHOUT, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Dogi",	GF_NPC_2_11_JOIN_DINA, GF_NPC_2_12_HEAR_SHOUT, EV_NPC_TYPE_SUB )
		}
	}
	else if( FLAG[GF_NPC_2_08_JOIN_KATRIN] )		//▼第二部⑧カトリーンを助けた
	{
	 	if( FLAG[GF_QUEST_220] == QUEST_BBS || FLAG[GF_QUEST_220] == QUEST_START ){	// 【QS220】見張り台の建設（バルバロス）
			SetEventNPC( "Barbaross",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_3_01_GOTO_LAXIA, EV_NPC_TYPE_SUB )	//期限切れ：なし
			SetEventNPC( "D_Barbaross",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_3_01_GOTO_LAXIA, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_221] == QUEST_BBS || FLAG[GF_QUEST_221] == QUEST_START ){	// 【QS221】小舟の作成（ドギ）
			SetEventNPC( "Dogi",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_2_12_HEAR_SHOUT, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Dogi",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_2_12_HEAR_SHOUT, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_222] == QUEST_BBS || FLAG[GF_QUEST_222] == QUEST_START ){	// 【QS222】仕立ての練習（アリスン）
			SetEventNPC( "Alison",		GF_NPC_2_08_JOIN_KATRIN, GF_NPC_5_03_GOTO_GHOSTHIP, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Alison",	GF_NPC_2_08_JOIN_KATRIN, GF_NPC_5_03_GOTO_GHOSTHIP, EV_NPC_TYPE_SUB )
	 	}
	 	if( FLAG[GF_QUEST_223] == QUEST_BBS || FLAG[GF_QUEST_223] == QUEST_START ){	// 【QS223】ヒュッパーの掃討
			SetEventNPC( "Barbaross",	GF_NPC_2_08_JOIN_KATRIN, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "Aaron",		GF_NPC_2_08_JOIN_KATRIN, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Barbaross",	GF_NPC_2_08_JOIN_KATRIN, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Aaron",		GF_NPC_2_08_JOIN_KATRIN, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_2_04_JOIN_ALISON] )		//▼第二部④アリスンを助けた
	{
	 	if( FLAG[GF_QUEST_210] == QUEST_BBS || FLAG[GF_QUEST_210] == QUEST_START ){	// 【QS210】カーテンの作成（ラクシャ）
			SetEventNPC( "Laxia",	GF_NPC_2_04_JOIN_ALISON, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
			SetEventNPC( "D_Laxia",	GF_NPC_2_04_JOIN_ALISON, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
	 	}
	}
	else if( FLAG[GF_NPC_2_02_START_EXPLORE] )		//▼第二部②探索開始
	{
		if(FLAG[GF_02MP1110_REMOVE_OBSTACLE_1ST] && !FLAG[GF_02MP1110_REMOVE_OBSTACLE])		//倒木撤去中
		{
			//何も表示しない
		}
		else
		{
		 	if( FLAG[GF_QUEST_200] == QUEST_BBS || FLAG[GF_QUEST_200] == QUEST_START ){	// 【QS200】ベッドの作成（バルバロス）
				SetEventNPC( "Barbaross",	GF_NPC_2_02_START_EXPLORE, GF_02MP1118_CALL_PARO, EV_NPC_TYPE_SUB )
				SetEventNPC( "D_Barbaross",	GF_NPC_2_02_START_EXPLORE, GF_02MP1118_CALL_PARO, EV_NPC_TYPE_SUB )
		 	}
		 	if( FLAG[GF_QUEST_201] == QUEST_BBS || FLAG[GF_QUEST_201] == QUEST_START ){	// 【QS201】備蓄用の素材（ドギ）
				SetEventNPC( "Dogi",	GF_NPC_2_02_START_EXPLORE, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
				SetEventNPC( "D_Dogi",	GF_NPC_2_02_START_EXPLORE, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
		 	}
		}
	}
	//クエスト（依頼人以外）
	if( FLAG[GF_QUEST_602] == QUEST_START ){	// 【QS602】白酒の調達（カシュー）
		SetEventNPC( "Thanatos",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_SUB )
		SetEventNPC( "D_Thanatos",	GF_NPC_6_02_GOTO_GEND, GF_NPC_7_01_GOTO_TEM, EV_NPC_TYPE_SUB )
	}
	if( FLAG[GF_QS400_CHECK_EVENT] ){		// 【QS400】▼クエストイベント を見た
		SetEventNPC( "ev_QS400_Monkey",		GF_NPC_4_01_GOTO_NORTH, GF_06MPxxxx_6TH_CHAPTER_FINISH, EV_NPC_TYPE_SUB )
	}
	if( FLAG[GF_QUEST_401] == QUEST_START ){	// 【QS401】新入りはいずこ（レーヤ）
		if( !FLAG[GF_QS401_LOOK_PICARD_2] ||									//【QS401】▼ピッカード捕獲イベント（集会所） を見た
			( FLAG[GF_QS401_LOOK_PICARD_A] && FLAG[GF_QS401_LOOK_PICARD_B] ) ){	//【QS401】▼ピッカード捕獲イベント（屋内Ａ）（屋内Ｂ） を見た
			SetEventNPC( "ev_QS_401_Picard",	GF_NPC_4_01_GOTO_NORTH, GF_NPC_5_06_HOLD_PARTY, EV_NPC_TYPE_SUB )
		}
		SetEventNPC( "LP_QS_401_PICARD_A",	GF_QS401_LOOK_PICARD_2, GF_QS401_LOOK_PICARD_A, EV_NPC_TYPE_SUB )
		SetEventNPC( "LP_QS_401_PICARD_B",	GF_QS401_LOOK_PICARD_2, GF_QS401_LOOK_PICARD_B, EV_NPC_TYPE_SUB )
	}
	if( FLAG[GF_QUEST_522] == QUEST_START ){	// 【QS522】奮起の演奏会（オースティン）
		SetEventNPC( "Sepa",		GF_NPC_5_04_GOTO_HOLLOW, GF_QS522_TALK_SERACH1, EV_NPC_TYPE_SUB )
		SetEventNPC( "Kajura",		GF_QS522_TALK_SERACH1, GF_QS522_TALK_SERACH2, EV_NPC_TYPE_SUB )
		SetEventNPC( "Rastell",		GF_QS522_TALK_SERACH2, GF_QS522_TALK_SERACH3, EV_NPC_TYPE_SUB )
		SetEventNPC( "Rastell2",	GF_QS522_TALK_SERACH2, GF_QS522_TALK_SERACH3, EV_NPC_TYPE_SUB )
	}

// 	//やり込みスキル習得
// 	if( FLAG[GF_QUEST_400] >= QUEST_SUCCESS ){	// 【QS311】ししょーへの献上（リコッタ）
//		SetEventNPC( "Monkey",	GF_NPC_4_01_GOTO_NORTH, GF_SPEEDRUN_SKILL_ADOL, EV_NPC_TYPE_SUB )
// 	}

	//#30962対応
 	//合流イベント
	//if( FLAG[GF_NPC_4_02_SEE_THANATOS] )		//▼第四部②タナトスと出会った
	//{
	//	SetEventNPC( "Silvia_b",	GF_SUBEV_LOOK_SILVIA2, GF_SUBEV_JOIN_SILVIA, EV_NPC_TYPE_SUB )
	//}
	if( FLAG[GF_NPC_2_11_JOIN_DINA] )			//▼第二部⑪ディナを助けた
	{
		SetEventNPC( "Picard_1114",	GF_SUBEV_LOOK_REJA1, GF_SUBEV_JOIN_REJA, EV_NPC_TYPE_SUB )
	}

 	//過去編イベント
	if( FLAG[GF_PAST_EPISODE_6_GO_GARDEN] )				//▼過去編Ⅵセレンの園へ向かう
	{
	}
	else if( FLAG[GF_PAST_EPISODE_5_GO_VALLAY] )		//▼過去編Ⅴ王家の谷へ向かう
	{
		SetEventNPC( "Yuka",	GF_SUBEV_PAST_05_QUEST_A, GF_SUBEV_PAST_05_QUEST_C, EV_NPC_TYPE_SUB )
	}
	else if( FLAG[GF_PAST_EPISODE_4_2_GO_OUT] )			//▼過去編Ⅳ-２王宮の外へ向かう
	{
	}
	else if( FLAG[GF_PAST_EPISODE_4_GO_CASTLE] )		//▼過去編Ⅳ王宮前へ向かう
	{
	}
	else if( FLAG[GF_PAST_EPISODE_3_GO_BAHA] )			//▼過去編Ⅲバハの塔へ向かう
	{
	}
	else if( FLAG[GF_PAST_EPISODE_2_GO_SOUTHGATE] )		//▼過去編Ⅱ南門へ向かう
	{
		if( FLAG[GF_SUBEV_PAST_02_QUEST_A] == 1 )		// 過去編Ⅱ：【過去クエスト②Ａ：かくれんぼの話を聞く】を見た
		{
			SetEventNPC( "Meer",	GF_SUBEV_PAST_02_QUEST_A, GF_SUBEV_PAST_02_QUEST_C, EV_NPC_TYPE_SUB )
		}
	}
	else if( FLAG[GF_PAST_EPISODE_1_GO_CAMP] )			//▼過去編Ⅰアドルがいたポイントへ向かう
	{
	}
	else if( FLAG[GF_PAST_EPISODE_D3_WALK_CAPITAL] )	//▼ダーナ編③王都を歩く
	{
		SetEventNPC( "Darios", GF_04MP6201_IN_AIGIUS, GF_SUBEV_PAST_D3_TALK_DARIOS, EV_NPC_TYPE_MAIN )			// ダーナ編③：聞き込みフラグ：ダリオス執政官
//		SetEventNPC( "Rastell", GF_04MP6201_IN_AIGIUS, GF_SUBEV_PAST_D3_TALK_RAS_TRA, EV_NPC_TYPE_MAIN )		// ダーナ編③：聞き込みフラグ：ラステル
	}
	else if( FLAG[GF_PAST_EPISODE_D1A_TEM] )		//▼ダーナ編①Ａ寺院内を歩く
	{
		SetEventNPC( "Ulugnata", GF_03MP6410M_HEAR_TREE, GF_SUBEV_PAST_D1_TALK_ULUGNATA, EV_NPC_TYPE_MAIN )
		SetEventNPC( "Shenna", GF_03MP6410M_HEAR_TREE, GF_SUBEV_PAST_D1_TALK_SHENNA, EV_NPC_TYPE_MAIN )
		SetEventNPC( "Cesil", GF_03MP6410M_HEAR_TREE, GF_SUBEV_PAST_D1_TALK_CESIL, EV_NPC_TYPE_MAIN )
		SetEventNPC( "Atra", GF_SUBEV_PAST_D1_TALK_ALL, GF_03MP3109M_MOVE_CANYON, EV_NPC_TYPE_MAIN )
		SetEventNPC( "Io", GF_03MP6410M_HEAR_TREE, GF_SUBEV_PAST_D1_TALK_IO, EV_NPC_TYPE_MAIN )

	}


 	//サブイベント
	if( FLAG[GF_NPC_6_02_GOTO_GEND] )			//▼第六部②ジャンダルム頂上へ向かう
	{
		SetEventNPC( "Curran",	GF_SUBEV_06_1111_LOOK_BOAT, GF_SUBEV_JOIN_CURRAN2, EV_NPC_TYPE_SUB )
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// 木箱などのブレイクオブジェクトのドロップ処理
function "BreakDrop"
{
	//最初に乱数の母数
	SetFlag( TF_BREAK_RND, (rand() %100) )

	// 地下聖堂共通
	if( (WORK[WK_MAPNAMENO] == MN_D_MP6511M) || (WORK[WK_MAPNAMENO] == MN_D_MP6521M) || (WORK[WK_MAPNAMENO] == MN_D_MP6531M) || (WORK[WK_MAPNAMENO] == MN_D_MP6541M) || (WORK[WK_MAPNAMENO] == MN_D_MP6551M) || (WORK[WK_MAPNAMENO] == MN_D_MP6561M) )
	{
		if( FLAG[TF_BREAK_RND] < 5)
		{
			DropItem(ICON3D_MT_NR2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//蛍石		（夜ダンジョン素材ＬＶ２）
			SetFlag( TF_BREAK_RND, 100 )
		}
		else
		{
			SetFlag( TF_BREAK_RND, (rand() %100) )
		}
 	}

	//ドロップが発生する数
	if( FLAG[TF_BREAK_RND] < 40)
	{ 
		//　地下聖堂１層　(最高で凶獣セット)
		if (WORK[WK_MAPNAMENO] == MN_D_MP6511M)
	{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_N2_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//丈夫な骨
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_MT_N2_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//透き通った粘液
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_R1_PARTS04, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//柔質繊維
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N3_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N3_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N3_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//煌く粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N3_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//暖かい木
			} else {
				DropItem(ICON3D_MT_N3_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//テクタイト鉱
			}
		}
		//　大樹の寺院　(最高で凶獣セット)
		if (WORK[WK_MAPNAMENO] == MN_D_MP6401)
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_FD_VG_PAPRIKA, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//パプリカ
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_FD_VG_EGGPLANT, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))	//ナス
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_FD_VG_CABBAGE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//キャベツ
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_FD_VG_CORN, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//コーン
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_FD_VG_TOMATO, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//トマト
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_FD_VG_PUMPKIN, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//パンプキン
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N3_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N3_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N3_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//煌く粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N3_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//暖かい木
			} else {
				DropItem(ICON3D_MT_N3_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//テクタイト鉱
			}
		}
		//　大僧院＆海岸洞窟　(最高で凶獣セット)
		if ( (WORK[WK_MAPNAMENO] == MN_D_MP6421) || (WORK[WK_MAPNAMENO] == MN_D_MP6422)  || (WORK[WK_MAPNAMENO] == MN_D_MP7411) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N3_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N3_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N3_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//煌く粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N3_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//暖かい木
			} else {
				DropItem(ICON3D_MT_N3_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//テクタイト鉱
			}
		}
		//　地下聖堂２層　(最高で凶獣セット)
		if (WORK[WK_MAPNAMENO] == MN_D_MP6521M)
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_US_CURE_FREEZE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))	//凍結解除
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N3_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N3_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N3_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//煌く粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N3_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//暖かい木
			} else {
				DropItem(ICON3D_MT_N3_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//テクタイト鉱
			}
		}
		//　バハの塔　(最高で凶獣セット)
		if ( (WORK[WK_MAPNAMENO] == MN_D_MP6322) || (WORK[WK_MAPNAMENO] == MN_D_MP6323)  || (WORK[WK_MAPNAMENO] == MN_D_MP6324)  || (WORK[WK_MAPNAMENO] == MN_D_MP6326)  || (WORK[WK_MAPNAMENO] == MN_D_MP6328) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_US_CURE_FREEZE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))	//凍結解除
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N3_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N3_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//凶獣の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N3_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//煌く粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N3_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//暖かい木
			} else {
				DropItem(ICON3D_MT_N3_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//テクタイト鉱
			}
		}
		//　幽霊船
		if ( (WORK[WK_MAPNAMENO] == MN_D_MP0401) || (WORK[WK_MAPNAMENO] == MN_D_MP0402)  || (WORK[WK_MAPNAMENO] == MN_D_MP0403)  || (WORK[WK_MAPNAMENO] == MN_D_MP0404)  || (WORK[WK_MAPNAMENO] == MN_D_MP0408) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			}
		}
		//　地下聖堂３層
		if (WORK[WK_MAPNAMENO] == MN_D_MP6531M)
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			}
		}
		//　始生代の大穴＆水没墓地
		if ( (WORK[WK_MAPNAMENO] == MN_D_MP6361) || (WORK[WK_MAPNAMENO] == MN_D_MP6362)  || (WORK[WK_MAPNAMENO] == MN_D_MP6365)  || (WORK[WK_MAPNAMENO] == MN_D_MP6368)  || (WORK[WK_MAPNAMENO] == MN_D_MP7481) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			}
		}
		//　地下聖堂４層
		if (WORK[WK_MAPNAMENO] == MN_D_MP6541M)
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			}
		}
		//　王家の谷（最高で理晶石セット）
		if ( (WORK[WK_MAPNAMENO] == MN_D_MP6341) || (WORK[WK_MAPNAMENO] == MN_D_MP6342)  || (WORK[WK_MAPNAMENO] == MN_D_MP6343)  || (WORK[WK_MAPNAMENO] == MN_D_MP6344)  || (WORK[WK_MAPNAMENO] == MN_D_MP6346)  || (WORK[WK_MAPNAMENO] == MN_D_MP6347) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 39) {
				DropItem(ICON3D_MT_R4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//大樹の宝枝
			} else {
				DropItem(ICON3D_MT_R4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜紋岩
			}
		}
		//　地下聖堂５層＆地下聖堂６層
		if ( (WORK[WK_MAPNAMENO] == MN_D_MP6551M) || (WORK[WK_MAPNAMENO] == MN_D_MP6561M) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 39) {
				DropItem(ICON3D_MT_R4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//大樹の宝枝
			} else {
				DropItem(ICON3D_MT_R4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜紋岩
			}
		}
		//　沈黙の塔＆ラスダン＆現代地下聖堂　(アウラ草や轟竜の重殻も1％でドロップする)
		if ( (WORK[WK_MAPNAMENO] == MN_D_MP6411) || (WORK[WK_MAPNAMENO] == MN_D_MP6412)  || (WORK[WK_MAPNAMENO] == MN_D_MP6413)  || (WORK[WK_MAPNAMENO] == MN_D_MP6301)  || (WORK[WK_MAPNAMENO] == MN_D_MP6302)  || (WORK[WK_MAPNAMENO] == MN_D_MP6303)  || (WORK[WK_MAPNAMENO] == MN_D_MP6304) || (WORK[WK_MAPNAMENO] == MN_D_MP6511) || (WORK[WK_MAPNAMENO] == MN_D_MP6521)  || (WORK[WK_MAPNAMENO] == MN_D_MP6531)  || (WORK[WK_MAPNAMENO] == MN_D_MP6541)  || (WORK[WK_MAPNAMENO] == MN_D_MP6551)  || (WORK[WK_MAPNAMENO] == MN_D_MP6561) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_US_ADD_EXP_01, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//甘い妙薬
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_R4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//大樹の宝枝
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_R4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜紋岩
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_R4_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//閃竜の大牙
			} else if( FLAG[TF_BREAK_RND] < 39) {
				DropItem(ICON3D_MT_R5_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//轟竜の重殻
			} else {
				DropItem(ICON3D_MT_R5_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//アウラ草
			}
		}

		//　過去編（現代編に持ち帰れないものは無し）
		if ( (WORK[WK_MAPNAMENO] == MN_F_MP6113M) )
		{
			if( FLAG[TF_BREAK_RND] < 2) {
				DropItem(ICON3D_MT_N1_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//軽い骨
			} else if( FLAG[TF_BREAK_RND] < 4) {
				DropItem(ICON3D_MT_N1_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//薄い皮
			} else if( FLAG[TF_BREAK_RND] < 6) {
				DropItem(ICON3D_MT_N1_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//濁った粘液
			} else if( FLAG[TF_BREAK_RND] < 8) {
				DropItem(ICON3D_MT_N1_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//しなる小枝
			} else if( FLAG[TF_BREAK_RND] < 10) {
				DropItem(ICON3D_MT_N2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//艶やかな木
			} else if( FLAG[TF_BREAK_RND] < 12) {
				DropItem(ICON3D_MT_N1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//小さな葉
			} else if( FLAG[TF_BREAK_RND] < 14) {
				DropItem(ICON3D_MT_N2_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//綺麗な花
			} else if( FLAG[TF_BREAK_RND] < 16) {
				DropItem(ICON3D_MT_N1_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//奇妙な塊
			} else if( FLAG[TF_BREAK_RND] < 18) {
				DropItem(ICON3D_MT_N2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鉄鉱石
			} else if( FLAG[TF_BREAK_RND] < 20) {
				DropItem(ICON3D_MT_R2_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//鍾乳石
			} else if( FLAG[TF_BREAK_RND] < 22) {
				DropItem(ICON3D_MT_R2_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ラテカ樹脂
			} else if( FLAG[TF_BREAK_RND] < 24) {
				DropItem(ICON3D_MT_R1_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//ジギタリスの葉
			} else if( FLAG[TF_BREAK_RND] < 26) {
				DropItem(ICON3D_MT_R3_FLOWER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//リムの花
			} else if( FLAG[TF_BREAK_RND] < 28) {
				DropItem(ICON3D_MT_N4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の木
			} else if( FLAG[TF_BREAK_RND] < 30) {
				DropItem(ICON3D_MT_N4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//理晶石
			} else if( FLAG[TF_BREAK_RND] < 32) {
				DropItem(ICON3D_MT_N4_BONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の骨
			} else if( FLAG[TF_BREAK_RND] < 34) {
				DropItem(ICON3D_MT_N4_LEATHER, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の皮
			} else if( FLAG[TF_BREAK_RND] < 36) {
				DropItem(ICON3D_MT_N4_LIQUID, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//盤古の粘液
			} else if( FLAG[TF_BREAK_RND] < 38) {
				DropItem(ICON3D_MT_R3_PARTS07, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜鱗
			} else if( FLAG[TF_BREAK_RND] < 39) {
				DropItem(ICON3D_MT_R4_WOOD, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//大樹の宝枝
			} else {
				DropItem(ICON3D_MT_R4_STONE, (this.CHRWORK[CWK_POSX]), (this.CHRWORK[CWK_POSY]), (this.CHRWORK[CWK_POSZ]), (LEADER.CHRWORK[CWK_ROT]))		//竜紋岩
			}
		}

	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// タイムアタック水晶の設置チェック
function "ta_crystal_set"
{
	// エンドログラムを倒した事がある。かつ、エピローグではない。
//	if (IsDefeatEnemy(B021) && !FLAG[GF_07MP1202_AWAKE_ADOL])
//	{
		// タイムアタックＯＫ
		LoadChr("ta_crystal")
//	}
//	else
//	{
//		// まだ駄目
//		SetChrPos("ta_crystal", -100000.0f, 0.0f, 0.0f)
//	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// タイムアタック水晶調べた
function "timeatkmenu_lp"
{
	SetStopFlag(STOPFLAG_TALK)

	if( !FLAG[GF_SUBEV_FIRST_TIMEATK] )
	{
	//	//▼初めて黒い水晶石を調べたメッセージ
	//
	//	// テキスト（色替え）
	//	TalkPopup(UNDEF, 0, 3, SYSTEM_PPOSX, SYSTEM_PPOSY, 0) {
	//		"#7C見慣れない漆黒の水晶石がある。\p"
	//		"#7C触れるとなぜか、激戦の記憶が"
	//		"#7C呼び覚まされるようだ……"
	//	}
	//	WaitPrompt()
	//	WaitCloseWindow()
	//	Wait(5)
	//
	//	PlaySE( SE_TUTORIAL , 100 , 0,  0, 0, 1.0f, 0)		//チュートリアル
	//	TalkPopup(UNDEF,0,5,0,0,0)
	//	{
	//		""
	//		"#-1W#4C『タイムアタック』が開放されました。#10W#-1W\p"
	//		"#-1W#4Cこの水晶石を調べると、現在のパーティで"
	//		"#-1W#4Cボス撃破までの時間を競う"
	//		"#-1W#4Cタイムアタックに挑戦することが出来ます。#10W#-1W\p"
	//		"#-1W#4Cレベルや装備、使用アイテムなどは"
	//		"#-1W#4C固定のものになりますが、"
	//		"#-1W#4Cスキルとアクセサリは"
	//		"#-1W#4C現在の状態がそのまま使用されます。#10W"
	//	}
	//	Wait(10)
	//	WaitPrompt()
	//	WaitCloseWindow()

		SetFlag( GF_SUBEV_FIRST_TIMEATK, 1 )			// 初めて黒い水晶石を調べたメッセージ
	}

	FadeOut(FADE_BLACK,10)
	WaitFade()

	// メニューで使うフラグをリセット
	SetFlag(GF_TIMEATK_STAGENO, -1)
	SetFlag(GF_TIMEATK_GAMERANK, -1)
	SetFlag(GF_TIMEATK_GAMEMODE, -1)

	// メニュー呼び出しへ
	EventCue("system:timeatkmenu")
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// タイムアタックメニュー呼び出し
function "timeatkmenu"
{
	SetStopFlag(STOPFLAG_TALK)
	ResetStopFlag(STOPFLAG_AUTOMESSAGE)		// 自動メッセージ送り解除
	ResetStopFlag(STOPFLAG_SKIPOK)			// 高速スキップ解除

	/////////////////////////////////////////////
	// タイムアタック用設定
	SetFlag(SF_VOICE_LAXIA_1ST, 0)
	SetFlag(SF_VOICE_LAXIA_2ND, 1)
	SetFlag(SF_VOICE_RICOTTA_1ST, 0)
	SetFlag(SF_VOICE_RICOTTA_2ND, 1)

	// 拠点強化
	SetWork(WK_ITC_BASE_LV, 9)
	SetWork(WK_ITC_DECOY_NUM, 8)
	SetWork(WK_ITC_DECOY_LV, 5)
	SetWork(WK_ITC_DECOY_OPT, 1)
	SetWork(WK_ITC_BARRICADE_NUM, 4)
	SetWork(WK_ITC_BARRICADE_LV, 5)
	SetWork(WK_ITC_BARRICADE_OPT, 1)
	SetWork(WK_ITC_CATAPULT_NUM, 1)
	SetWork(WK_ITC_CATAPULT_LV, 5)
	SetWork(WK_ITC_CATAPULT_OPT, 1)
	SetWork(WK_ITC_GONG_NUM, 1)
	SetWork(WK_ITC_GONG_LV, 3)
	SetWork(WK_ITC_GONG_OPT, 1)
	
	// NPCパーティイン
	JoinNPC(NPC_BARBAROSS,	 1 )
	JoinNPC(NPC_DOGI,		 0 )
	JoinNPC(NPC_ALISON,		 0 )
	JoinNPC(NPC_KIERGAARD,   1 )
	JoinNPC(NPC_CURRAN,		 1 )
	JoinNPC(NPC_KATRIN,		 0 )
	JoinNPC(NPC_DINA,		 0 )
	JoinNPC(NPC_AARON,		 0 )
	JoinNPC(NPC_LICHT,		 0 )
	JoinNPC(NPC_REJA,		 0 )
	JoinNPC(NPC_MIRALDA,	 0 )
	JoinNPC(NPC_KUINA,		 0 )
	JoinNPC(NPC_NIA,		 0 )
	JoinNPC(NPC_KASHU,		 0 )
	JoinNPC(NPC_FRANZ,		 0 )
	JoinNPC(NPC_THANATOS,	 0 )
	JoinNPC(NPC_ED,			 0 )
	JoinNPC(NPC_GRISELDA,	 0 )
	JoinNPC(NPC_AUSTEN,		 0 )
	JoinNPC(NPC_SILVIA,		 0 )
	JoinNPC(NPC_PARO,		 0 )
	JoinNPC(NPC_SKILLMONKY,	 0 )
	JoinNPC(NPC_BALAENICEPS_REX, 0 )
	// NPC好感度
	SetFlag(GF_LIKELV_BARBAROSS,		2)	// バルバロス船長
	SetFlag(GF_LIKELV_DOGI,				3)	// ドギ
	SetFlag(GF_LIKELV_ALISON,			2)	// アリスン
	SetFlag(GF_LIKELV_KIERGAARD,		2)	// キルゴール
	SetFlag(GF_LIKELV_CURRAN,			2)	// カーラン卿
	SetFlag(GF_LIKELV_KATRIN,			2)	// カトリーン
	SetFlag(GF_LIKELV_DINA,				2)	// ディナ
	SetFlag(GF_LIKELV_AARON,			2)	// エアラン
	SetFlag(GF_LIKELV_LICHT,			2)	// リヒト
	SetFlag(GF_LIKELV_REJA,				2)	// レーヤ
	SetFlag(GF_LIKELV_MIRALDA,			2)	// ミラルダ
	SetFlag(GF_LIKELV_KUINA,			2)	// クイナ
	SetFlag(GF_LIKELV_NIA,				2)	// シスターニア
	SetFlag(GF_LIKELV_KASHU,			2)	// カシュー
	SetFlag(GF_LIKELV_FRANZ,			2)	// フランツ
	SetFlag(GF_LIKELV_THANATOS,			2)	// タナトス
	SetFlag(GF_LIKELV_ED,				2)	// エド				// ※綴り不明
	SetFlag(GF_LIKELV_GRISELDA,			2)	// グリゼルダ
	SetFlag(GF_LIKELV_AUSTEN,			2)	// オースティン		// ※綴り不明
	SetFlag(GF_LIKELV_SILVIA,			2)	// シルビア			// ※綴り不明
	// 非人
	SetFlag(GF_LIKELV_PARO,				2)	// リトル・パロ
	SetFlag(GF_LIKELV_SKILLMONKY,		2)	// スキルザル
	SetFlag(GF_LIKELV_BALAENICEPS_REX,	2)	// ハシビロコウ
	/////////////////////////////////////////////

	FadeOut(FADE_BLACK,0)

	if(!FLAG[SF_SYS_TIMEATKHELP])
	{
		PlaySE(SE_TUTORIAL, 100, 0, 0, 0, 1.0f, 0)		//チュートリアル
	
		TalkPopup("UNDEF",0,5,0,0,0)
		{
			""
			"#-1W#4C　　　　　　 ～タイムアタックについて～ 　　　　　　"
			"#10W#-1W\p"
			"#-1W#4Cこちらのモードでは、"
			"#-1W#4Cゲーム中で戦った事があるボスキャラクターと"
			"#-1W#4C自由に戦闘を楽しむことができます。#10W#-1W\p"
			"#-1W#4C#3Pで１人モード、２人モードなどに切り替えでき、"
			"#-1W#4Cクリアタイムは各モード・各難易度毎に記録されます。#10W#-1W\p"
			"１人モード3行目"
			"#-1W#4Cレベル・防具・腕防具はボスキャラクター毎に設定され、"
			"#-1W#-1W#4Cアクセサリ・スキル・行動メンバーの編成は"
			"#-1W#4C#11Pのキャンプメニューから変更できます。#10W#-1W\p"
		}
		Wait(10)
		WaitPrompt()
		WaitCloseWindow()
		
		SetFlag(SF_SYS_TIMEATKHELP,1)		//タイムアタックヘルプ見た
	}

	// システムセーブ取っておく
	SystemSave()
	
	////////////////////////////
	// 正式版
	////////////////////////////
	while (1)
	{
		SetFlag(SF_ADOL_JOINOK,		1)
		SetFlag(SF_LAXIA_JOINOK,	1)
		SetFlag(SF_SAHAD_JOINOK,	1)
		SetFlag(SF_HUMMEL_JOINOK,	1)
		SetFlag(SF_RICOTTA_JOINOK,	1)
		SetFlag(SF_DANA_JOINOK,		1)
		
		SetWork( WK_BGM , BGM_TIMEATTACK )
		TimeAtkMenuOpen(GF_TIMEATK_GAMERANK, GF_TIMEATK_GAMEMODE, GF_TIMEATK_STAGENO, GF_TIMEATK_MENUCONTROL)
		WaitMenu(0)
		if (FLAG[GF_TIMEATK_MENUCONTROL] == TIMEATK_MENUCTRL_CAMPMENU)
		{
			PlaySE( SE_CAMPMENU , 100 , 0,  0, 0, 1.0f, 0)
		}
		Wait(10)	// メニュー終了時のクロスフェード待ち（メニュー内で直接obj->CrossFade(10)を呼び出している）

		RestorePartyMember()

		// タイムアタックメニューを抜けたときのモード
	//	if (FLAG[GF_TIMEATK_GAMEMODE] == TIMEATK_GAMEMODE_ETANIA)
	//	{
	//		Message("◆エタニアモード")
	//		WaitPrompt()
	//	}
	//	else
	//	{
	//		Message("◆現代モード")
	//		WaitPrompt()
	//	}

	//	if (FLAG[GF_TIMEATK_MENUCONTROL] == TIMEATK_MENUCTRL_CAMPMENU)
	//	{
	//		Message("◆CAMP")
	//		WaitPrompt()
	//	}
	//	if (FLAG[GF_TIMEATK_MENUCONTROL] == TIMEATK_MENUCTRL_SELECTED)
	//	{
	//		Message("◆SELECTED")
	//		WaitPrompt()
	//	}
	//	if (FLAG[GF_TIMEATK_MENUCONTROL] == TIMEATK_MENUCTRL_NONE)
	//	{
	//		Message("◆NONE")
	//		WaitPrompt()
	//	}

		// 難易度を反映
		if (FLAG[GF_TIMEATK_GAMERANK] == TIMEATK_GAMERANK_EASY)
		{
			SetFlag(SF_DIFFICULT, DIFFICULT_EASY)
			SetFlag(SF_INFERNO, 0)
		}
		else if (FLAG[GF_TIMEATK_GAMERANK] == TIMEATK_GAMERANK_NORMAL)
		{
			SetFlag(SF_DIFFICULT, DIFFICULT_NORMAL)
			SetFlag(SF_INFERNO, 0)
		}
		else if (FLAG[GF_TIMEATK_GAMERANK] == TIMEATK_GAMERANK_HARD)
		{
			SetFlag(SF_DIFFICULT, DIFFICULT_HARD)
			SetFlag(SF_INFERNO, 0)
		}
		else if (FLAG[GF_TIMEATK_GAMERANK] == TIMEATK_GAMERANK_NIGHTMARE)
		{
			SetFlag(SF_DIFFICULT, DIFFICULT_NIGHTMARE)
			SetFlag(SF_INFERNO, 0)
		}
		else if (FLAG[GF_TIMEATK_GAMERANK] == TIMEATK_GAMERANK_INFERNO)
		{
			SetFlag(SF_DIFFICULT, DIFFICULT_NIGHTMARE)
			SetFlag(SF_INFERNO, 1)
		}

		// キャンプメニュー
		if (FLAG[GF_TIMEATK_MENUCONTROL] == TIMEATK_MENUCTRL_CAMPMENU)
		{
			SetFlag(SF_CAMP_CANT_ITEM, 1)		// キャンプメニュー：アイテム禁止
		//	SetFlag(SF_CAMP_CANT_FORMATION, 1)	// キャンプメニュー：編成禁止
			SetFlag(SF_CAMP_FORCE_CAN_EQUIP, 1)	// キャンプメニュー：装備変更許可
			SetFlag(SF_CAMP_CANT_DIARY, 1)		// キャンプメニュー：冒険日誌禁止
		//	SetFlag(SF_CAMP_CANT_SYSTEM, 1)		// キャンプメニュー：システムメニュー禁止
			SetFlag(SF_CANTSAVE, 1)				// セーブ不可
			SetFlag(SF_CANTLOAD, 1)				// ロード不可

			if (FLAG[GF_TIMEATK_GAMEMODE] == TIMEATK_GAMEMODE_ETANIA)
			{
				SetFlag(SF_ADOL_JOINOK, 0)
				SetFlag(SF_LAXIA_JOINOK, 0)
				SetFlag(SF_SAHAD_JOINOK, 0)
				SetFlag(SF_HUMMEL_JOINOK, 0)
				SetFlag(SF_RICOTTA_JOINOK, 0)

				ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現在のアイテムをバックアップ＆消去
				CopyStatus("PARTY_DANACOPY", "PARTY_DANA")	// 現在のダーナ―のステータス／装備／スキル設定をバックアップ
				CopyStatus("PARTY_DANA", "PARTY_DANAOLD")	// 過去のダーナのステータス／装備／スキル設定から読み出す
				ItemBackup(BACKUP_RESTORE, BACKUP_STACK_DANA)	// ダーナのアイテムをリストア
			}
			CampMenu(CM_CAMP)		//キャンプメニューを開く
			if (FLAG[GF_TIMEATK_GAMEMODE] == TIMEATK_GAMEMODE_ETANIA)
			{
				SetFlag(SF_ADOL_JOINOK, 1)
				SetFlag(SF_LAXIA_JOINOK, 1)
				SetFlag(SF_SAHAD_JOINOK, 1)
				SetFlag(SF_HUMMEL_JOINOK, 1)
				SetFlag(SF_RICOTTA_JOINOK, 1)

				ItemBackup(BACKUP_NORMAL, BACKUP_STACK_DANA)	// ダーナ編アイテムをバックアップ
				CopyStatus("PARTY_DANAOLD", "PARTY_DANA")	// 過去のダーナ―のステータス／装備／スキル設定をバックアップ
				CopyStatus("PARTY_DANA", "PARTY_DANACOPY")	// 現在のダーナのステータス／装備／スキル設定から読み出す
				ItemBackup(BACKUP_RESTORE, BACKUP_STACK_ADOL)	// アイテムをリストア
			}

			SetFlag(SF_CAMP_CANT_ITEM, 0)
		//	SetFlag(SF_CAMP_CANT_FORMATION, 0)
			SetFlag(SF_CAMP_FORCE_CAN_EQUIP, 0)
			SetFlag(SF_CAMP_CANT_DIARY, 0)
		//	SetFlag(SF_CAMP_CANT_SYSTEM, 0)
			SetFlag(SF_CANTSAVE, 0)
			SetFlag(SF_CANTLOAD, 0)
			
			// システムセーブ取っておく
			SystemSave()
		}
		// GF_TIMEATK_STAGENO が有効な値の場合は、タイムアタックへＧＯ
		else if (FLAG[GF_TIMEATK_MENUCONTROL] == TIMEATK_MENUCTRL_SELECTED &&
				 FLAG[GF_TIMEATK_STAGENO] > TIMEATK_MONS_NULL && FLAG[GF_TIMEATK_STAGENO] < TIMEATK_MONS_MAX)
		{
			// タイムアタックへ

			// システムセーブ取っておく
			SystemSave()
			
			Wait(10)	// メニューのクロスフェードが残っている場合があるので、確実に待たせる為、もう１０フレーム待たせる

			ResetStopFlag(STOPFLAG_TALK)
//			// ↓いろいろバグるのでやめた
//			if (FLAG[GF_TIMEATK_GAMEMODE] != TIMEATK_GAMEMODE_ETANIA){
//				if(!IsPartyIn(PARTY_ADOL)){
//					SetFlag(SF_ADOL_JOINOK,		0)
//				}
//				if(!IsPartyIn(PARTY_LAXIA)){
//					SetFlag(SF_LAXIA_JOINOK,		0)
//				}
//				if(!IsPartyIn(PARTY_SAHAD)){
//					SetFlag(SF_SAHAD_JOINOK,		0)
//				}
//				if(!IsPartyIn(PARTY_HUMMEL)){
//					SetFlag(SF_HUMMEL_JOINOK,		0)
//				}
//				if(!IsPartyIn(PARTY_RICOTTA)){
//					SetFlag(SF_RICOTTA_JOINOK,		0)
//				}
//				if(!IsPartyIn(PARTY_DANA)){
//					SetFlag(SF_DANA_JOINOK,		0)
//				}
//			}

			CallFunc("system:timeatkstart")
			break
		}
		// 終了
		else
		{
			FadeIn(FADE_BLACK, 10)
			WaitFade()

			// システムセーブ取っておく
			SystemSave()
			
			if (FLAG[SF_SYS_TIMEATKMODE])
			{
				// タイトル画面に戻る
				ReturnTitle()
				Wait(10)
			}
			
			break
		}
	}
	ResetStopFlag(STOPFLAG_TALK)
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// タイムアタック開始処理
function "timeatkstart"
{
	// GF_TIMEATK_STAGENO		- ステージＩＤ
	// GF_TIMEATK_GAMERANK		- 難易度
	// GF_TIMEATK_GAMEMODE		- モード (ETIMEATK_GAMEMODE)
	// GF_TIMEATK_MENUCONTROL	- タイムアタックメニュー制御用

	// 一瞬で抜けるけど念の為セットしておく
	SetStopFlag(STOPFLAG_EVENT)
	ResetStopFlag(STOPFLAG_AUTOMESSAGE)		// 自動メッセージ送り解除
	ResetStopFlag(STOPFLAG_SKIPOK)			// 高速スキップ解除

	// タイムアタックスタートしておく
	SetFlag(TF_MENU_SELECT, (FLAG[GF_TIMEATK_STAGENO]))	// 控えておく
	TimeAtkStart((FLAG[GF_TIMEATK_STAGENO]))

	// 通常のタイムアタックか、ボスラッシュの開始時のみに適用する物
	if (!FLAG[SF_TIMEATK_RUSH] || FLAG[TF_MENU_SELECT] == TIMEATK_MONS_BOSSRUSH)
	{
		// エタニアモード時、エタニアモードの設定に切り替える
		if (FLAG[GF_TIMEATK_GAMEMODE] == TIMEATK_GAMEMODE_ETANIA)
		{
			SetFlag(SF_ADOL_JOINOK, 0)
			SetFlag(SF_LAXIA_JOINOK, 0)
			SetFlag(SF_SAHAD_JOINOK, 0)
			SetFlag(SF_HUMMEL_JOINOK, 0)
			SetFlag(SF_RICOTTA_JOINOK, 0)
			SetFlag(SF_DANA_JOINOK,		1)	// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
			SetFlag(SF_DANA2_JOINOK,	1)	// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
			SetFlag(SF_DANA3_JOINOK,	1)	// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
			SetFlag(SF_CHRSWITCH_MODE, 1)	// Zwei方式のキャラチェンジに。
			
			JoinParty(PARTY_DANA2)			// ダーナ２参加			//JOINだけ取得条件による分岐が必要
			JoinParty(PARTY_DANA3)			// ダーナ３参加

			ItemBackup(BACKUP_NORMAL, BACKUP_STACK_ADOL)	// 現在のアイテムをバックアップ＆消去
			CopyStatus("PARTY_DANACOPY", "PARTY_DANA")	// 現在のダーナ―のステータス／装備／スキル設定をバックアップ
			CopyStatus("PARTY_DANA", "PARTY_DANAOLD")	// 過去のダーナのステータス／装備／スキル設定から読み出す
			ItemBackup(BACKUP_RESTORE, BACKUP_STACK_DANA)	// ダーナのアイテムをリストア
		
			// スタイルレベル設定
			SetFlag(SF_DANA_WATERSTYLE_LV, 1)	// 水スタイル
			SetFlag(SF_DANA_EARTHSTYLE_LV, 1)	// 地スタイル
			SetFlag(SF_DANA_LIGHTSTYLE_LV, 1)	// 光スタイル
		}
		
		// 使用アイテムを制限する
			// 食材の破棄
		SetFlag(TF_MENU_SELECT, TA_FOOD_START)
		while(FLAG[TF_MENU_SELECT] <= TA_FOOD_END)
		{
			DeleteItem(FLAG[TF_MENU_SELECT], 999)
			SetFlag(TF_MENU_SELECT, (FLAG[TF_MENU_SELECT] + 1))
		}
			// 料理の破棄
		SetFlag(TF_MENU_SELECT, TA_DISH_START)
		while(FLAG[TF_MENU_SELECT] <= TA_DISH_END)
		{
			DeleteItem(FLAG[TF_MENU_SELECT], 999)
			SetFlag(TF_MENU_SELECT, (FLAG[TF_MENU_SELECT] + 1))
		}
			// 果物の破棄
		SetFlag(TF_MENU_SELECT, TA_FRUIT_START)
		while(FLAG[TF_MENU_SELECT] <= TA_FRUIT_END)
		{
			DeleteItem(FLAG[TF_MENU_SELECT], 999)
			SetFlag(TF_MENU_SELECT, (FLAG[TF_MENU_SELECT] + 1))
		}
			// 薬の破棄
		SetFlag(TF_MENU_SELECT, TA_DRAG_START)
		while(FLAG[TF_MENU_SELECT] <= TA_DRAG_END)
		{
			DeleteItem(FLAG[TF_MENU_SELECT], 999)
			SetFlag(TF_MENU_SELECT, (FLAG[TF_MENU_SELECT] + 1))
		}
			// 虫駆除剤の破棄
		DeleteItem(ICON3D_US_PESTCIDE, 999)	// 虫駆除剤

		// 回復薬を入手させる
		GetItem(ICON3D_US_HEALSOLO_02,		3)	// フルポーションｘ３
		GetItem(ICON3D_US_RESSURECT_01,		3)	// 蘇生薬ｘ３
		GetItem(ICON3D_US_CURE_POISON,		3)	// 毒消しｘ３
		GetItem(ICON3D_US_CURE_DARK,		3)	// 目薬ｘ３
		GetItem(ICON3D_US_CURE_PARALYZE,	3)	// マヒ取りｘ３
		GetItem(ICON3D_US_CURE_FREEZE,		3)	// 解氷ｘ３
		GetItem(ICON3D_US_CURE_FLAME,		3)	// 火消しｘ３
		GetItem(ICON3D_US_CURE_BLOODLOSS,	3)	// 止血ｘ３
		GetItem(ICON3D_US_CURE_ALL,			3)	// 万能薬ｘ３
		
		if (FLAG[SF_TIMEATK_RUSH])
		{
			// タイムアタック専用
			GetItem(ICON3D_US_HEALSOLO_01,		3)	// ヒールポーションｘ３
			GetItem(ICON3D_US_RESSURECT_02,		3)	// 大樹の滴ｘ３
			GetItem(ICON3D_US_RESSURECT_11,		3)	// 月の涙ｘ３
		}
		
		// SPとEXTRAを０にする
		SP_Recover(-9999)
		SetFlag(SF_EXPOWER, 0)
	}

	// 霊薬効果解除
		// MAXHP
	SetChrWork(ADOL,	CWK_SUP_MAXHP,0)
	SetChrWork(LAXIA,	CWK_SUP_MAXHP,0)
	SetChrWork(SAHAD,	CWK_SUP_MAXHP,0)
	SetChrWork(HUMMEL,	CWK_SUP_MAXHP,0)
	SetChrWork(RICOTTA,	CWK_SUP_MAXHP,0)
	SetChrWork(DANA,	CWK_SUP_MAXHP,0)
		// STR
	SetChrWork(ADOL,	CWK_SUP_STR,0)
	SetChrWork(LAXIA,	CWK_SUP_STR,0)
	SetChrWork(SAHAD,	CWK_SUP_STR,0)
	SetChrWork(HUMMEL,	CWK_SUP_STR,0)
	SetChrWork(RICOTTA,	CWK_SUP_STR,0)
	SetChrWork(DANA,	CWK_SUP_STR,0)
		// DEF
	SetChrWork(ADOL,	CWK_SUP_DEF,0)
	SetChrWork(LAXIA,	CWK_SUP_DEF,0)
	SetChrWork(SAHAD,	CWK_SUP_DEF,0)
	SetChrWork(HUMMEL,	CWK_SUP_DEF,0)
	SetChrWork(RICOTTA,	CWK_SUP_DEF,0)
	SetChrWork(DANA,	CWK_SUP_DEF,0)
		// SPMAX
	//SetFlag(SF_SPMAX, 100)
	SetFlag(SF_SPMAX, 200)			// SP最大値

		// 精霊全救助（ダーナ最強武器用）
	SetFlag(GF_TROPHY_ETERNIASPIRIT_01, 1)		// 精霊１ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_02, 1)		// 精霊２ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_03, 1)		// 精霊３ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_04, 1)		// 精霊４ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_05, 1)		// 精霊５ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_06, 1)		// 精霊６ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_07, 1)		// 精霊７ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_08, 1)		// 精霊８ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_09, 1)		// 精霊９ゲット
	SetFlag(GF_TROPHY_ETERNIASPIRIT_10, 1)		// 精霊１０ゲット

	// ボス別の設定へ
	SetFlag(TF_LOADING_TIPS_OFF, 1)
	SetFlag(SF_BOSS_BATTLE, 1)
	SetFlag(SF_DEBUG, 1)		// レベル下げれるようにする
	if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_M0111)		// ビフテリザ (コウモリ)		2人
	{
		// Lv5
		SetLevel(ADOL,		5)
		SetLevel(LAXIA,		5)
		SetLevel(SAHAD,		5)
		SetLevel(HUMMEL,	5)
		SetLevel(RICOTTA,	5)
		SetLevel(DANA,		5)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV05,	1)
		GetItem(TA_WP_LAXIA_LV05,	1)
		GetItem(TA_WP_SAHAD_LV05,	1)
		GetItem(TA_WP_HUMMEL_LV05,	1)
		GetItem(TA_WP_RICOTTA_LV05,	1)
		GetItem(TA_WP_DANA_LV05,	1)

		GetItem(TA_AM_MALE_LV05,	3)
		GetItem(TA_AM_FEMALE_LV05,	3)

		GetItem(TA_AR_LV05,			6)		// この段階の腕防具は無い。GetItem(-1～)は一応動作するのでそのままにしておく
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV05)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV05)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV05)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV05)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV05)
		EquipWeapon(DANA,		TA_WP_DANA_LV05)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV05)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV05)
		EquipArmor(SAHAD,		TA_AM_MALE_LV05)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV05)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV05)
		EquipArmor(DANA,		TA_AM_FEMALE_LV05)

		EquipShield(ADOL,		TA_AR_LV05)
		EquipShield(LAXIA,		TA_AR_LV05)
		EquipShield(SAHAD,		TA_AR_LV05)
		EquipShield(HUMMEL,		TA_AR_LV05)
		EquipShield(RICOTTA,	TA_AR_LV05)
		EquipShield(DANA,		TA_AR_LV05)

		SetFlag( GF_MP7304_KONG, 0 )		// マスターコング戦にしない

		// マップ移動
		LoadArg("map/mp7304/mp7304.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B150)		// アヴァロドラギル (赤い恐竜・砂浜)
	{
		// Lv7
		SetLevel(ADOL,		7)
		SetLevel(LAXIA,		7)
		SetLevel(SAHAD,		7)
		SetLevel(HUMMEL,	7)
		SetLevel(RICOTTA,	7)
		SetLevel(DANA,		7)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV07,	1)
		GetItem(TA_WP_LAXIA_LV07,	1)
		GetItem(TA_WP_SAHAD_LV07,	1)
		GetItem(TA_WP_HUMMEL_LV07,	1)
		GetItem(TA_WP_RICOTTA_LV07,	1)
		GetItem(TA_WP_DANA_LV07,	1)

		GetItem(TA_AM_MALE_LV07,	3)
		GetItem(TA_AM_FEMALE_LV07,	3)

		GetItem(TA_AR_LV07,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV07)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV07)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV07)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV07)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV07)
		EquipWeapon(DANA,		TA_WP_DANA_LV07)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV07)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV07)
		EquipArmor(SAHAD,		TA_AM_MALE_LV07)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV07)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV07)
		EquipArmor(DANA,		TA_AM_FEMALE_LV07)

		EquipShield(ADOL,		TA_AR_LV07)
		EquipShield(LAXIA,		TA_AR_LV07)
		EquipShield(SAHAD,		TA_AR_LV07)
		EquipShield(HUMMEL,		TA_AR_LV07)
		EquipShield(RICOTTA,	TA_AR_LV07)
		EquipShield(DANA,		TA_AR_LV07)

		// フラグ
		SetFlag(GF_MP1103_KIERGAARD, 0)		// キルゴール戦解除

		// マップ移動
		LoadArg("map/mp1103/mp1103.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B100)		// セルペンタス (カメ)
	{
		// Lv13
		SetLevel(ADOL,		13)
		SetLevel(LAXIA,		13)
		SetLevel(SAHAD,		13)
		SetLevel(HUMMEL,	13)
		SetLevel(RICOTTA,	13)
		SetLevel(DANA,		13)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV13,	1)
		GetItem(TA_WP_LAXIA_LV13,	1)
		GetItem(TA_WP_SAHAD_LV13,	1)
		GetItem(TA_WP_HUMMEL_LV13,	1)
		GetItem(TA_WP_RICOTTA_LV13,	1)
		GetItem(TA_WP_DANA_LV13,	1)

		GetItem(TA_AM_MALE_LV13,	3)
		GetItem(TA_AM_FEMALE_LV13,	3)

		GetItem(TA_AR_LV13,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV13)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV13)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV13)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV13)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV13)
		EquipWeapon(DANA,		TA_WP_DANA_LV13)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV13)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV13)
		EquipArmor(SAHAD,		TA_AM_MALE_LV13)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV13)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV13)
		EquipArmor(DANA,		TA_AM_FEMALE_LV13)

		EquipShield(ADOL,		TA_AR_LV13)
		EquipShield(LAXIA,		TA_AR_LV13)
		EquipShield(SAHAD,		TA_AR_LV13)
		EquipShield(HUMMEL,		TA_AR_LV13)
		EquipShield(RICOTTA,	TA_AR_LV13)
		EquipShield(DANA,		TA_AR_LV13)

		// マップ移動
		LoadArg("map/mp1306/mp1306.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B000)		// クラリオン (カメレオン)
	{
		// Lv14
		SetLevel(ADOL,		14)
		SetLevel(LAXIA,		14)
		SetLevel(SAHAD,		14)
		SetLevel(HUMMEL,	14)
		SetLevel(RICOTTA,	14)
		SetLevel(DANA,		14)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV14,	1)
		GetItem(TA_WP_LAXIA_LV14,	1)
		GetItem(TA_WP_SAHAD_LV14,	1)
		GetItem(TA_WP_HUMMEL_LV14,	1)
		GetItem(TA_WP_RICOTTA_LV14,	1)
		GetItem(TA_WP_DANA_LV14,	1)

		GetItem(TA_AM_MALE_LV14,	3)
		GetItem(TA_AM_FEMALE_LV14,	3)

		GetItem(TA_AR_LV14,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV14)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV14)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV14)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV14)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV14)
		EquipWeapon(DANA,		TA_WP_DANA_LV14)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV14)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV14)
		EquipArmor(SAHAD,		TA_AM_MALE_LV14)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV14)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV14)
		EquipArmor(DANA,		TA_AM_FEMALE_LV14)

		EquipShield(ADOL,		TA_AR_LV14)
		EquipShield(LAXIA,		TA_AR_LV14)
		EquipShield(SAHAD,		TA_AR_LV14)
		EquipShield(HUMMEL,		TA_AR_LV14)
		EquipShield(RICOTTA,	TA_AR_LV14)
		EquipShield(DANA,		TA_AR_LV14)

		// マップ移動
		LoadArg("map/mp1308/mp1308.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B101)		// ロンブリウス (ワーム)
	{
		// Lv20
		SetLevel(ADOL,		20)
		SetLevel(LAXIA,		20)
		SetLevel(SAHAD,		20)
		SetLevel(HUMMEL,	20)
		SetLevel(RICOTTA,	20)
		SetLevel(DANA,		20)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV20,	1)
		GetItem(TA_WP_LAXIA_LV20,	1)
		GetItem(TA_WP_SAHAD_LV20,	1)
		GetItem(TA_WP_HUMMEL_LV20,	1)
		GetItem(TA_WP_RICOTTA_LV20,	1)
		GetItem(TA_WP_DANA_LV20,	1)

		GetItem(TA_AM_MALE_LV20,	3)
		GetItem(TA_AM_FEMALE_LV20,	3)

		GetItem(TA_AR_LV20,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV20)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV20)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV20)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV20)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV20)
		EquipWeapon(DANA,		TA_WP_DANA_LV20)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV20)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV20)
		EquipArmor(SAHAD,		TA_AM_MALE_LV20)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV20)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV20)
		EquipArmor(DANA,		TA_AM_FEMALE_LV20)

		EquipShield(ADOL,		TA_AR_LV20)
		EquipShield(LAXIA,		TA_AR_LV20)
		EquipShield(SAHAD,		TA_AR_LV20)
		EquipShield(HUMMEL,		TA_AR_LV20)
		EquipShield(RICOTTA,	TA_AR_LV20)
		EquipShield(DANA,		TA_AR_LV20)

		// マップ移動
		LoadArg("map/mp4306/mp4306.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B001)		// グルガンチュラ (クモ)
	{
		// Lv23
		SetLevel(ADOL,		23)
		SetLevel(LAXIA,		23)
		SetLevel(SAHAD,		23)
		SetLevel(HUMMEL,	23)
		SetLevel(RICOTTA,	23)
		SetLevel(DANA,		23)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV23,	1)
		GetItem(TA_WP_LAXIA_LV23,	1)
		GetItem(TA_WP_SAHAD_LV23,	1)
		GetItem(TA_WP_HUMMEL_LV23,	1)
		GetItem(TA_WP_RICOTTA_LV23,	1)
		GetItem(TA_WP_DANA_LV23,	1)

		GetItem(TA_AM_MALE_LV23,	3)
		GetItem(TA_AM_FEMALE_LV23,	3)

		GetItem(TA_AR_LV23,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV23)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV23)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV23)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV23)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV23)
		EquipWeapon(DANA,		TA_WP_DANA_LV23)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV23)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV23)
		EquipArmor(SAHAD,		TA_AM_MALE_LV23)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV23)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV23)
		EquipArmor(DANA,		TA_AM_FEMALE_LV23)

		EquipShield(ADOL,		TA_AR_LV23)
		EquipShield(LAXIA,		TA_AR_LV23)
		EquipShield(SAHAD,		TA_AR_LV23)
		EquipShield(HUMMEL,		TA_AR_LV23)
		EquipShield(RICOTTA,	TA_AR_LV23)
		EquipShield(DANA,		TA_AR_LV23)

		// マップ移動
		LoadArg("map/mp4309/mp4309.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B102)		// マガマンドラ (巨大植物)
	{
		// Lv26
		SetLevel(ADOL,		26)
		SetLevel(LAXIA,		26)
		SetLevel(SAHAD,		26)
		SetLevel(HUMMEL,	26)
		SetLevel(RICOTTA,	26)
		SetLevel(DANA,		26)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV26,	1)
		GetItem(TA_WP_LAXIA_LV26,	1)
		GetItem(TA_WP_SAHAD_LV26,	1)
		GetItem(TA_WP_HUMMEL_LV26,	1)
		GetItem(TA_WP_RICOTTA_LV26,	1)
		GetItem(TA_WP_DANA_LV26,	1)

		GetItem(TA_AM_MALE_LV26,	3)
		GetItem(TA_AM_FEMALE_LV26,	3)

		GetItem(TA_AR_LV26,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV26)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV26)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV26)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV26)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV26)
		EquipWeapon(DANA,		TA_WP_DANA_LV26)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV26)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV26)
		EquipArmor(SAHAD,		TA_AM_MALE_LV26)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV26)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV26)
		EquipArmor(DANA,		TA_AM_FEMALE_LV26)

		EquipShield(ADOL,		TA_AR_LV26)
		EquipShield(LAXIA,		TA_AR_LV26)
		EquipShield(SAHAD,		TA_AR_LV26)
		EquipShield(HUMMEL,		TA_AR_LV26)
		EquipShield(RICOTTA,	TA_AR_LV26)
		EquipShield(DANA,		TA_AR_LV26)

		// マップ移動
		LoadArg("map/mp2304/mp2304.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B002)		// ラスピスース (カバ)
	{
		// Lv28
		SetLevel(ADOL,		28)
		SetLevel(LAXIA,		28)
		SetLevel(SAHAD,		28)
		SetLevel(HUMMEL,	28)
		SetLevel(RICOTTA,	28)
		SetLevel(DANA,		28)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV28,	1)
		GetItem(TA_WP_LAXIA_LV28,	1)
		GetItem(TA_WP_SAHAD_LV28,	1)
		GetItem(TA_WP_HUMMEL_LV28,	1)
		GetItem(TA_WP_RICOTTA_LV28,	1)
		GetItem(TA_WP_DANA_LV28,	1)

		GetItem(TA_AM_MALE_LV28,	3)
		GetItem(TA_AM_FEMALE_LV28,	3)

		GetItem(TA_AR_LV28,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV28)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV28)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV28)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV28)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV28)
		EquipWeapon(DANA,		TA_WP_DANA_LV28)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV28)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV28)
		EquipArmor(SAHAD,		TA_AM_MALE_LV28)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV28)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV28)
		EquipArmor(DANA,		TA_AM_FEMALE_LV28)

		EquipShield(ADOL,		TA_AR_LV28)
		EquipShield(LAXIA,		TA_AR_LV28)
		EquipShield(SAHAD,		TA_AR_LV28)
		EquipShield(HUMMEL,		TA_AR_LV28)
		EquipShield(RICOTTA,	TA_AR_LV28)
		EquipShield(DANA,		TA_AR_LV28)

		// マップ移動
		LoadArg("map/mp2308/mp2308.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B152)		// キルゴール・ヴァイスマン
	{
		// Lv29
		SetLevel(ADOL,		29)
		SetLevel(LAXIA,		29)
		SetLevel(SAHAD,		29)
		SetLevel(HUMMEL,	29)
		SetLevel(RICOTTA,	29)
		SetLevel(DANA,		29)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV29,	1)
		GetItem(TA_WP_LAXIA_LV29,	1)
		GetItem(TA_WP_SAHAD_LV29,	1)
		GetItem(TA_WP_HUMMEL_LV29,	1)
		GetItem(TA_WP_RICOTTA_LV29,	1)
		GetItem(TA_WP_DANA_LV29,	1)

		GetItem(TA_AM_MALE_LV29,	3)
		GetItem(TA_AM_FEMALE_LV29,	3)

		GetItem(TA_AR_LV29,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV29)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV29)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV29)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV29)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV29)
		EquipWeapon(DANA,		TA_WP_DANA_LV29)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV29)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV29)
		EquipArmor(SAHAD,		TA_AM_MALE_LV29)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV29)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV29)
		EquipArmor(DANA,		TA_AM_FEMALE_LV29)

		EquipShield(ADOL,		TA_AR_LV29)
		EquipShield(LAXIA,		TA_AR_LV29)
		EquipShield(SAHAD,		TA_AR_LV29)
		EquipShield(HUMMEL,		TA_AR_LV29)
		EquipShield(RICOTTA,	TA_AR_LV29)
		EquipShield(DANA,		TA_AR_LV29)

		// フラグ
		SetFlag(GF_MP1103_KIERGAARD, 1)		// キルゴール戦にする

		// マップ移動
		LoadArg("map/mp1103/mp1103.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B154)		// アヴァロドラギル３ (赤い恐竜・ジャンダルム中ボス)
	{
		// Lv32
		SetLevel(ADOL,		32)
		SetLevel(LAXIA,		32)
		SetLevel(SAHAD,		32)
		SetLevel(HUMMEL,	32)
		SetLevel(RICOTTA,	32)
		SetLevel(DANA,		32)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV32,	1)
		GetItem(TA_WP_LAXIA_LV32,	1)
		GetItem(TA_WP_SAHAD_LV32,	1)
		GetItem(TA_WP_HUMMEL_LV32,	1)
		GetItem(TA_WP_RICOTTA_LV32,	1)
		GetItem(TA_WP_DANA_LV32,	1)

		GetItem(TA_AM_MALE_LV32,	3)
		GetItem(TA_AM_FEMALE_LV32,	3)

		GetItem(TA_AR_LV32,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV32)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV32)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV32)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV32)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV32)
		EquipWeapon(DANA,		TA_WP_DANA_LV32)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV32)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV32)
		EquipArmor(SAHAD,		TA_AM_MALE_LV32)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV32)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV32)
		EquipArmor(DANA,		TA_AM_FEMALE_LV32)

		EquipShield(ADOL,		TA_AR_LV32)
		EquipShield(LAXIA,		TA_AR_LV32)
		EquipShield(SAHAD,		TA_AR_LV32)
		EquipShield(HUMMEL,		TA_AR_LV32)
		EquipShield(RICOTTA,	TA_AR_LV32)
		EquipShield(DANA,		TA_AR_LV32)

		// マップ移動
		LoadArg("map/mp4337/mp4337.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B003)		// ギアスバーン (ジャンダルム大ボス)
	{
		// Lv35
		SetLevel(ADOL,		35)
		SetLevel(LAXIA,		35)
		SetLevel(SAHAD,		35)
		SetLevel(HUMMEL,	35)
		SetLevel(RICOTTA,	35)
		SetLevel(DANA,		35)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV35,	1)
		GetItem(TA_WP_LAXIA_LV35,	1)
		GetItem(TA_WP_SAHAD_LV35,	1)
		GetItem(TA_WP_HUMMEL_LV35,	1)
		GetItem(TA_WP_RICOTTA_LV35,	1)
		GetItem(TA_WP_DANA_LV35,	1)

		GetItem(TA_AM_MALE_LV35,	3)
		GetItem(TA_AM_FEMALE_LV35,	3)

		GetItem(TA_AR_LV35,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV35)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV35)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV35)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV35)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV35)
		EquipWeapon(DANA,		TA_WP_DANA_LV35)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV35)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV35)
		EquipArmor(SAHAD,		TA_AM_MALE_LV35)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV35)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV35)
		EquipArmor(DANA,		TA_AM_FEMALE_LV35)

		EquipShield(ADOL,		TA_AR_LV35)
		EquipShield(LAXIA,		TA_AR_LV35)
		EquipShield(SAHAD,		TA_AR_LV35)
		EquipShield(HUMMEL,		TA_AR_LV35)
		EquipShield(RICOTTA,	TA_AR_LV35)
		EquipShield(DANA,		TA_AR_LV35)

		// マップ移動
		LoadArg("map/mp4341/mp4341.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B006)		// ブラキオン (寺院ボス)
	{
		// Lv40
		SetLevel(ADOL,		40)
		SetLevel(LAXIA,		40)
		SetLevel(SAHAD,		40)
		SetLevel(HUMMEL,	40)
		SetLevel(RICOTTA,	40)
		SetLevel(DANA,		40)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV40,	1)
		GetItem(TA_WP_LAXIA_LV40,	1)
		GetItem(TA_WP_SAHAD_LV40,	1)
		GetItem(TA_WP_HUMMEL_LV40,	1)
		GetItem(TA_WP_RICOTTA_LV40,	1)
		GetItem(TA_WP_DANA_LV40,	1)

		GetItem(TA_AM_MALE_LV40,	3)
		GetItem(TA_AM_FEMALE_LV40,	3)

		GetItem(TA_AR_LV40,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV40)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV40)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV40)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV40)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV40)
		EquipWeapon(DANA,		TA_WP_DANA_LV40)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV40)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV40)
		EquipArmor(SAHAD,		TA_AM_MALE_LV40)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV40)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV40)
		EquipArmor(DANA,		TA_AM_FEMALE_LV40)

		EquipShield(ADOL,		TA_AR_LV40)
		EquipShield(LAXIA,		TA_AR_LV40)
		EquipShield(SAHAD,		TA_AR_LV40)
		EquipShield(HUMMEL,		TA_AR_LV40)
		EquipShield(RICOTTA,	TA_AR_LV40)
		EquipShield(DANA,		TA_AR_LV40)

		// マップ移動
		LoadArg("map/mp6410/mp6410.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B104)		// エクスメーテル (ホバリングゴーレム)
	{
		// Lv43
		SetLevel(ADOL,		43)
		SetLevel(LAXIA,		43)
		SetLevel(SAHAD,		43)
		SetLevel(HUMMEL,	43)
		SetLevel(RICOTTA,	43)
		SetLevel(DANA,		43)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV43,	1)
		GetItem(TA_WP_LAXIA_LV43,	1)
		GetItem(TA_WP_SAHAD_LV43,	1)
		GetItem(TA_WP_HUMMEL_LV43,	1)
		GetItem(TA_WP_RICOTTA_LV43,	1)
		GetItem(TA_WP_DANA_LV43,	1)

		GetItem(TA_AM_MALE_LV43,	3)
		GetItem(TA_AM_FEMALE_LV43,	3)

		GetItem(TA_AR_LV43,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV43)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV43)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV43)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV43)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV43)
		EquipWeapon(DANA,		TA_WP_DANA_LV43)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV43)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV43)
		EquipArmor(SAHAD,		TA_AM_MALE_LV43)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV43)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV43)
		EquipArmor(DANA,		TA_AM_FEMALE_LV43)

		EquipShield(ADOL,		TA_AR_LV43)
		EquipShield(LAXIA,		TA_AR_LV43)
		EquipShield(SAHAD,		TA_AR_LV43)
		EquipShield(HUMMEL,		TA_AR_LV43)
		EquipShield(RICOTTA,	TA_AR_LV43)
		EquipShield(DANA,		TA_AR_LV43)

		// マップ移動
		LoadArg("map/mp6325/mp6325.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B004)		// カルヴェロス (壁ドラゴン)
	{
		// Lv45
		SetLevel(ADOL,		45)
		SetLevel(LAXIA,		45)
		SetLevel(SAHAD,		45)
		SetLevel(HUMMEL,	45)
		SetLevel(RICOTTA,	45)
		SetLevel(DANA,		45)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV45,	1)
		GetItem(TA_WP_LAXIA_LV45,	1)
		GetItem(TA_WP_SAHAD_LV45,	1)
		GetItem(TA_WP_HUMMEL_LV45,	1)
		GetItem(TA_WP_RICOTTA_LV45,	1)
		GetItem(TA_WP_DANA_LV45,	1)

		GetItem(TA_AM_MALE_LV45,	3)
		GetItem(TA_AM_FEMALE_LV45,	3)

		GetItem(TA_AR_LV45,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV45)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV45)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV45)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV45)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV45)
		EquipWeapon(DANA,		TA_WP_DANA_LV45)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV45)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV45)
		EquipArmor(SAHAD,		TA_AM_MALE_LV45)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV45)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV45)
		EquipArmor(DANA,		TA_AM_FEMALE_LV45)

		EquipShield(ADOL,		TA_AR_LV45)
		EquipShield(LAXIA,		TA_AR_LV45)
		EquipShield(SAHAD,		TA_AR_LV45)
		EquipShield(HUMMEL,		TA_AR_LV45)
		EquipShield(RICOTTA,	TA_AR_LV45)
		EquipShield(DANA,		TA_AR_LV45)

		// マップ移動
		LoadArg("map/mp6329/mp6329.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B103)		// ピラティスアニマ (幽霊船ボス)
	{
		// Lv48
		SetLevel(ADOL,		48)
		SetLevel(LAXIA,		48)
		SetLevel(SAHAD,		48)
		SetLevel(HUMMEL,	48)
		SetLevel(RICOTTA,	48)
		SetLevel(DANA,		48)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV48,	1)
		GetItem(TA_WP_LAXIA_LV48,	1)
		GetItem(TA_WP_SAHAD_LV48,	1)
		GetItem(TA_WP_HUMMEL_LV48,	1)
		GetItem(TA_WP_RICOTTA_LV48,	1)
		GetItem(TA_WP_DANA_LV48,	1)

		GetItem(TA_AM_MALE_LV48,	3)
		GetItem(TA_AM_FEMALE_LV48,	3)

		GetItem(TA_AR_LV48,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV48)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV48)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV48)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV48)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV48)
		EquipWeapon(DANA,		TA_WP_DANA_LV48)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV48)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV48)
		EquipArmor(SAHAD,		TA_AM_MALE_LV48)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV48)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV48)
		EquipArmor(DANA,		TA_AM_FEMALE_LV48)

		EquipShield(ADOL,		TA_AR_LV48)
		EquipShield(LAXIA,		TA_AR_LV48)
		EquipShield(SAHAD,		TA_AR_LV48)
		EquipShield(HUMMEL,		TA_AR_LV48)
		EquipShield(RICOTTA,	TA_AR_LV48)
		EquipShield(DANA,		TA_AR_LV48)

		// マップ移動
		LoadArg("map/mp0405/mp0405.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B106)		// シエラカントゥス (うなぎ)
	{
		// Lv51
		SetLevel(ADOL,		51)
		SetLevel(LAXIA,		51)
		SetLevel(SAHAD,		51)
		SetLevel(HUMMEL,	51)
		SetLevel(RICOTTA,	51)
		SetLevel(DANA,		51)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV51,	1)
		GetItem(TA_WP_LAXIA_LV51,	1)
		GetItem(TA_WP_SAHAD_LV51,	1)
		GetItem(TA_WP_HUMMEL_LV51,	1)
		GetItem(TA_WP_RICOTTA_LV51,	1)
		GetItem(TA_WP_DANA_LV51,	1)

		GetItem(TA_AM_MALE_LV51,	3)
		GetItem(TA_AM_FEMALE_LV51,	3)

		GetItem(TA_AR_LV51,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV51)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV51)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV51)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV51)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV51)
		EquipWeapon(DANA,		TA_WP_DANA_LV51)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV51)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV51)
		EquipArmor(SAHAD,		TA_AM_MALE_LV51)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV51)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV51)
		EquipArmor(DANA,		TA_AM_FEMALE_LV51)

		EquipShield(ADOL,		TA_AR_LV51)
		EquipShield(LAXIA,		TA_AR_LV51)
		EquipShield(SAHAD,		TA_AR_LV51)
		EquipShield(HUMMEL,		TA_AR_LV51)
		EquipShield(RICOTTA,	TA_AR_LV51)
		EquipShield(DANA,		TA_AR_LV51)

		// マップ移動
		LoadArg("map/mp6366/mp6366.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B007)		// オケアノス
	{
		// Lv53
		SetLevel(ADOL,		53)
		SetLevel(LAXIA,		53)
		SetLevel(SAHAD,		53)
		SetLevel(HUMMEL,	53)
		SetLevel(RICOTTA,	53)
		SetLevel(DANA,		53)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV53,	1)
		GetItem(TA_WP_LAXIA_LV53,	1)
		GetItem(TA_WP_SAHAD_LV53,	1)
		GetItem(TA_WP_HUMMEL_LV53,	1)
		GetItem(TA_WP_RICOTTA_LV53,	1)
		GetItem(TA_WP_DANA_LV53,	1)

		GetItem(TA_AM_MALE_LV53,	3)
		GetItem(TA_AM_FEMALE_LV53,	3)

		GetItem(TA_AR_LV53,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV53)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV53)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV53)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV53)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV53)
		EquipWeapon(DANA,		TA_WP_DANA_LV53)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV53)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV53)
		EquipArmor(SAHAD,		TA_AM_MALE_LV53)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV53)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV53)
		EquipArmor(DANA,		TA_AM_FEMALE_LV53)

		EquipShield(ADOL,		TA_AR_LV53)
		EquipShield(LAXIA,		TA_AR_LV53)
		EquipShield(SAHAD,		TA_AR_LV53)
		EquipShield(HUMMEL,		TA_AR_LV53)
		EquipShield(RICOTTA,	TA_AR_LV53)
		EquipShield(DANA,		TA_AR_LV53)

		// マップ移動
		LoadArg("map/mp6370/mp6370.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B105)		// ドクサ・グリエル (王家の谷中ボス)
	{
		// Lv58
		SetLevel(ADOL,		58)
		SetLevel(LAXIA,		58)
		SetLevel(SAHAD,		58)
		SetLevel(HUMMEL,	58)
		SetLevel(RICOTTA,	58)
		SetLevel(DANA,		58)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV58,	1)
		GetItem(TA_WP_LAXIA_LV58,	1)
		GetItem(TA_WP_SAHAD_LV58,	1)
		GetItem(TA_WP_HUMMEL_LV58,	1)
		GetItem(TA_WP_RICOTTA_LV58,	1)
		GetItem(TA_WP_DANA_LV58,	1)

		GetItem(TA_AM_MALE_LV58,	3)
		GetItem(TA_AM_FEMALE_LV58,	3)

		GetItem(TA_AR_LV58,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV58)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV58)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV58)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV58)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV58)
		EquipWeapon(DANA,		TA_WP_DANA_LV58)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV58)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV58)
		EquipArmor(SAHAD,		TA_AM_MALE_LV58)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV58)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV58)
		EquipArmor(DANA,		TA_AM_FEMALE_LV58)

		EquipShield(ADOL,		TA_AR_LV58)
		EquipShield(LAXIA,		TA_AR_LV58)
		EquipShield(SAHAD,		TA_AR_LV58)
		EquipShield(HUMMEL,		TA_AR_LV58)
		EquipShield(RICOTTA,	TA_AR_LV58)
		EquipShield(DANA,		TA_AR_LV58)

		// マップ移動
		LoadArg("map/mp6345/mp6345.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B005)		// バシレウス (王家の谷大ボス)
	{
		// Lv60
		SetLevel(ADOL,		60)
		SetLevel(LAXIA,		60)
		SetLevel(SAHAD,		60)
		SetLevel(HUMMEL,	60)
		SetLevel(RICOTTA,	60)
		SetLevel(DANA,		60)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV60,	1)
		GetItem(TA_WP_LAXIA_LV60,	1)
		GetItem(TA_WP_SAHAD_LV60,	1)
		GetItem(TA_WP_HUMMEL_LV60,	1)
		GetItem(TA_WP_RICOTTA_LV60,	1)
		GetItem(TA_WP_DANA_LV60,	1)

		GetItem(TA_AM_MALE_LV60,	3)
		GetItem(TA_AM_FEMALE_LV60,	3)

		GetItem(TA_AR_LV60,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV60)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV60)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV60)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV60)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV60)
		EquipWeapon(DANA,		TA_WP_DANA_LV60)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV60)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV60)
		EquipArmor(SAHAD,		TA_AM_MALE_LV60)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV60)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV60)
		EquipArmor(DANA,		TA_AM_FEMALE_LV60)

		EquipShield(ADOL,		TA_AR_LV60)
		EquipShield(LAXIA,		TA_AR_LV60)
		EquipShield(SAHAD,		TA_AR_LV60)
		EquipShield(HUMMEL,		TA_AR_LV60)
		EquipShield(RICOTTA,	TA_AR_LV60)
		EquipShield(DANA,		TA_AR_LV60)

		// マップ移動
		LoadArg("map/mp6349/mp6349.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B012)		// レ・エリュトロン (アドル・ソロボス)	１人
	{
		// Lv61
		SetLevel(ADOL,		61)
		SetLevel(LAXIA,		61)
		SetLevel(SAHAD,		61)
		SetLevel(HUMMEL,	61)
		SetLevel(RICOTTA,	61)
		SetLevel(DANA,		61)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV61,	1)
		GetItem(TA_WP_LAXIA_LV61,	1)
		GetItem(TA_WP_SAHAD_LV61,	1)
		GetItem(TA_WP_HUMMEL_LV61,	1)
		GetItem(TA_WP_RICOTTA_LV61,	1)
		GetItem(TA_WP_DANA_LV61,	1)

		GetItem(TA_AM_MALE_LV61,	3)
		GetItem(TA_AM_FEMALE_LV61,	3)

		GetItem(TA_AR_LV61,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV61)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV61)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV61)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV61)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV61)
		EquipWeapon(DANA,		TA_WP_DANA_LV61)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV61)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV61)
		EquipArmor(SAHAD,		TA_AM_MALE_LV61)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV61)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV61)
		EquipArmor(DANA,		TA_AM_FEMALE_LV61)

		EquipShield(ADOL,		TA_AR_LV61)
		EquipShield(LAXIA,		TA_AR_LV61)
		EquipShield(SAHAD,		TA_AR_LV61)
		EquipShield(HUMMEL,		TA_AR_LV61)
		EquipShield(RICOTTA,	TA_AR_LV61)
		EquipShield(DANA,		TA_AR_LV61)

		// マップ移動
		LoadArg("map/mp6409b/mp6409b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B112)		// アニムス・ヒドゥラ
	{
		// Lv67
		SetLevel(ADOL,		66)
		SetLevel(LAXIA,		66)
		SetLevel(SAHAD,		66)
		SetLevel(HUMMEL,	66)
		SetLevel(RICOTTA,	66)
		SetLevel(DANA,		66)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV63,	1)
		GetItem(TA_WP_LAXIA_LV63,	1)
		GetItem(TA_WP_SAHAD_LV63,	1)
		GetItem(TA_WP_HUMMEL_LV63,	1)
		GetItem(TA_WP_RICOTTA_LV63,	1)
		GetItem(TA_WP_DANA_LV63,	1)

		GetItem(TA_AM_MALE_LV63,	3)
		GetItem(TA_AM_FEMALE_LV63,	3)

		GetItem(TA_AR_LV63,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV63)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV63)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV63)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV63)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV63)
		EquipWeapon(DANA,		TA_WP_DANA_LV63)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV63)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV63)
		EquipArmor(SAHAD,		TA_AM_MALE_LV63)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV63)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV63)
		EquipArmor(DANA,		TA_AM_FEMALE_LV63)

		EquipShield(ADOL,		TA_AR_LV63)
		EquipShield(LAXIA,		TA_AR_LV63)
		EquipShield(SAHAD,		TA_AR_LV63)
		EquipShield(HUMMEL,		TA_AR_LV63)
		EquipShield(RICOTTA,	TA_AR_LV63)
		EquipShield(DANA,		TA_AR_LV63)

		// マップ移動
		LoadArg("map/mp6305b/mp6305b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B110)		// アニムス・ミノス
	{
		// Lv70
		SetLevel(ADOL,		68)
		SetLevel(LAXIA,		68)
		SetLevel(SAHAD,		68)
		SetLevel(HUMMEL,	68)
		SetLevel(RICOTTA,	68)
		SetLevel(DANA,		68)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV65,	1)
		GetItem(TA_WP_LAXIA_LV65,	1)
		GetItem(TA_WP_SAHAD_LV65,	1)
		GetItem(TA_WP_HUMMEL_LV65,	1)
		GetItem(TA_WP_RICOTTA_LV65,	1)
		GetItem(TA_WP_DANA_LV65,	1)

		GetItem(TA_AM_MALE_LV65,	3)
		GetItem(TA_AM_FEMALE_LV65,	3)

		GetItem(TA_AR_LV65,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV65)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV65)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV65)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV65)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV65)
		EquipWeapon(DANA,		TA_WP_DANA_LV65)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV65)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV65)
		EquipArmor(SAHAD,		TA_AM_MALE_LV65)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV65)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV65)
		EquipArmor(DANA,		TA_AM_FEMALE_LV65)

		EquipShield(ADOL,		TA_AR_LV65)
		EquipShield(LAXIA,		TA_AR_LV65)
		EquipShield(SAHAD,		TA_AR_LV65)
		EquipShield(HUMMEL,		TA_AR_LV65)
		EquipShield(RICOTTA,	TA_AR_LV65)
		EquipShield(DANA,		TA_AR_LV65)

		// マップ移動
		LoadArg("map/mp6306b/mp6306b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B111)		// アニムス・ネストール
	{
		// Lv73
		SetLevel(ADOL,		70)
		SetLevel(LAXIA,		70)
		SetLevel(SAHAD,		70)
		SetLevel(HUMMEL,	70)
		SetLevel(RICOTTA,	70)
		SetLevel(DANA,		70)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV67,	1)
		GetItem(TA_WP_LAXIA_LV67,	1)
		GetItem(TA_WP_SAHAD_LV67,	1)
		GetItem(TA_WP_HUMMEL_LV67,	1)
		GetItem(TA_WP_RICOTTA_LV67,	1)
		GetItem(TA_WP_DANA_LV67,	1)

		GetItem(TA_AM_MALE_LV67,	3)
		GetItem(TA_AM_FEMALE_LV67,	3)

		GetItem(TA_AR_LV67,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV67)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV67)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV67)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV67)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV67)
		EquipWeapon(DANA,		TA_WP_DANA_LV67)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV67)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV67)
		EquipArmor(SAHAD,		TA_AM_MALE_LV67)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV67)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV67)
		EquipArmor(DANA,		TA_AM_FEMALE_LV67)

		EquipShield(ADOL,		TA_AR_LV67)
		EquipShield(LAXIA,		TA_AR_LV67)
		EquipShield(SAHAD,		TA_AR_LV67)
		EquipShield(HUMMEL,		TA_AR_LV67)
		EquipShield(RICOTTA,	TA_AR_LV67)
		EquipShield(DANA,		TA_AR_LV67)

		// マップ移動
		LoadArg("map/mp6307b/mp6307b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B008)		// アニムス・ウーラ
	{
		// Lv76
		SetLevel(ADOL,		72)
		SetLevel(LAXIA,		72)
		SetLevel(SAHAD,		72)
		SetLevel(HUMMEL,	72)
		SetLevel(RICOTTA,	72)
		SetLevel(DANA,		72)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV69,	1)
		GetItem(TA_WP_LAXIA_LV69,	1)
		GetItem(TA_WP_SAHAD_LV69,	1)
		GetItem(TA_WP_HUMMEL_LV69,	1)
		GetItem(TA_WP_RICOTTA_LV69,	1)
		GetItem(TA_WP_DANA_LV69,	1)

		GetItem(TA_AM_MALE_LV69,	3)
		GetItem(TA_AM_FEMALE_LV69,	3)

		GetItem(TA_AR_LV69,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV69)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV69)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV69)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV69)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV69)
		EquipWeapon(DANA,		TA_WP_DANA_LV69)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV69)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV69)
		EquipArmor(SAHAD,		TA_AM_MALE_LV69)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV69)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV69)
		EquipArmor(DANA,		TA_AM_FEMALE_LV69)

		EquipShield(ADOL,		TA_AR_LV69)
		EquipShield(LAXIA,		TA_AR_LV69)
		EquipShield(SAHAD,		TA_AR_LV69)
		EquipShield(HUMMEL,		TA_AR_LV69)
		EquipShield(RICOTTA,	TA_AR_LV69)
		EquipShield(DANA,		TA_AR_LV69)

		// マップ移動
		LoadArg("map/mp6308b/mp6308b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B020_1)	// テオス・デ・エンドログラム１
	{
		// Lv79
		SetLevel(ADOL,		75)
		SetLevel(LAXIA,		75)
		SetLevel(SAHAD,		75)
		SetLevel(HUMMEL,	75)
		SetLevel(RICOTTA,	75)
		SetLevel(DANA,		75)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV71,	1)
		GetItem(TA_WP_LAXIA_LV71,	1)
		GetItem(TA_WP_SAHAD_LV71,	1)
		GetItem(TA_WP_HUMMEL_LV71,	1)
		GetItem(TA_WP_RICOTTA_LV71,	1)
		GetItem(TA_WP_DANA_LV71,	1)

		GetItem(TA_AM_MALE_LV71,	3)
		GetItem(TA_AM_FEMALE_LV71,	3)

		GetItem(TA_AR_LV71,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV71)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV71)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV71)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV71)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV71)
		EquipWeapon(DANA,		TA_WP_DANA_LV71)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV71)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV71)
		EquipArmor(SAHAD,		TA_AM_MALE_LV71)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV71)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV71)
		EquipArmor(DANA,		TA_AM_FEMALE_LV71)

		EquipShield(ADOL,		TA_AR_LV71)
		EquipShield(LAXIA,		TA_AR_LV71)
		EquipShield(SAHAD,		TA_AR_LV71)
		EquipShield(HUMMEL,		TA_AR_LV71)
		EquipShield(RICOTTA,	TA_AR_LV71)
		EquipShield(DANA,		TA_AR_LV71)

		// フラグ
		SetFlag(GF_MP6310B_ENDROGRAM_STEP, 0)	// 第一段階・触手戦

		// マップ移動
		LoadArg("map/mp6310b/mp6310b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B020_2)	// テオス・デ・エンドログラム２
	{
		// Lv79
		SetLevel(ADOL,		75)
		SetLevel(LAXIA,		75)
		SetLevel(SAHAD,		75)
		SetLevel(HUMMEL,	75)
		SetLevel(RICOTTA,	75)
		SetLevel(DANA,		75)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV71,	1)
		GetItem(TA_WP_LAXIA_LV71,	1)
		GetItem(TA_WP_SAHAD_LV71,	1)
		GetItem(TA_WP_HUMMEL_LV71,	1)
		GetItem(TA_WP_RICOTTA_LV71,	1)
		GetItem(TA_WP_DANA_LV71,	1)

		GetItem(TA_AM_MALE_LV71,	3)
		GetItem(TA_AM_FEMALE_LV71,	3)

		GetItem(TA_AR_LV71,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV71)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV71)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV71)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV71)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV71)
		EquipWeapon(DANA,		TA_WP_DANA_LV71)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV71)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV71)
		EquipArmor(SAHAD,		TA_AM_MALE_LV71)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV71)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV71)
		EquipArmor(DANA,		TA_AM_FEMALE_LV71)

		EquipShield(ADOL,		TA_AR_LV71)
		EquipShield(LAXIA,		TA_AR_LV71)
		EquipShield(SAHAD,		TA_AR_LV71)
		EquipShield(HUMMEL,		TA_AR_LV71)
		EquipShield(RICOTTA,	TA_AR_LV71)
		EquipShield(DANA,		TA_AR_LV71)

		// フラグ
		SetFlag(GF_MP6310B_ENDROGRAM_STEP, 1)	// 第二段階・コア＆オプション戦

		// マップ移動
		LoadArg("map/mp6310b/mp6310b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B020_3)	// テオス・デ・エンドログラム３
	{
		// Lv79
		SetLevel(ADOL,		75)
		SetLevel(LAXIA,		75)
		SetLevel(SAHAD,		75)
		SetLevel(HUMMEL,	75)
		SetLevel(RICOTTA,	75)
		SetLevel(DANA,		75)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV71,	1)
		GetItem(TA_WP_LAXIA_LV71,	1)
		GetItem(TA_WP_SAHAD_LV71,	1)
		GetItem(TA_WP_HUMMEL_LV71,	1)
		GetItem(TA_WP_RICOTTA_LV71,	1)
		GetItem(TA_WP_DANA_LV71,	1)

		GetItem(TA_AM_MALE_LV71,	3)
		GetItem(TA_AM_FEMALE_LV71,	3)

		GetItem(TA_AR_LV71,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV71)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV71)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV71)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV71)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV71)
		EquipWeapon(DANA,		TA_WP_DANA_LV71)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV71)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV71)
		EquipArmor(SAHAD,		TA_AM_MALE_LV71)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV71)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV71)
		EquipArmor(DANA,		TA_AM_FEMALE_LV71)

		EquipShield(ADOL,		TA_AR_LV71)
		EquipShield(LAXIA,		TA_AR_LV71)
		EquipShield(SAHAD,		TA_AR_LV71)
		EquipShield(HUMMEL,		TA_AR_LV71)
		EquipShield(RICOTTA,	TA_AR_LV71)
		EquipShield(DANA,		TA_AR_LV71)

		// フラグ
		SetFlag(GF_MP6310B_ENDROGRAM_STEP, 2)	// 第三段階・胸戦

		// マップ移動
		LoadArg("map/mp6310b/mp6310b.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B009)		// 《はじまりの命》前半
	{
		// Lv80
		SetLevel(ADOL,		76)
		SetLevel(LAXIA,		76)
		SetLevel(SAHAD,		76)
		SetLevel(HUMMEL,	76)
		SetLevel(RICOTTA,	76)
		SetLevel(DANA,		76)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV72,	1)
		GetItem(TA_WP_LAXIA_LV72,	1)
		GetItem(TA_WP_SAHAD_LV72,	1)
		GetItem(TA_WP_HUMMEL_LV72,	1)
		GetItem(TA_WP_RICOTTA_LV72,	1)
		GetItem(TA_WP_DANA_LV72,	1)

		GetItem(TA_AM_MALE_LV72,	3)
		GetItem(TA_AM_FEMALE_LV72,	3)

		GetItem(TA_AR_LV72,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV72)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV72)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV72)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV72)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV72)
		EquipWeapon(DANA,		TA_WP_DANA_LV72)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV72)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV72)
		EquipArmor(SAHAD,		TA_AM_MALE_LV72)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV72)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV72)
		EquipArmor(DANA,		TA_AM_FEMALE_LV72)

		EquipShield(ADOL,		TA_AR_LV72)
		EquipShield(LAXIA,		TA_AR_LV72)
		EquipShield(SAHAD,		TA_AR_LV72)
		EquipShield(HUMMEL,		TA_AR_LV72)
		EquipShield(RICOTTA,	TA_AR_LV72)
		EquipShield(DANA,		TA_AR_LV72)

		// フラグ
		SetFlag(GF_MP8323_2NDBATTLE, 0)

		// マップ移動
		LoadArg("map/mp8323/mp8323.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B010)		// 《はじまりの命》後半
	{
		// Lv80
		SetLevel(ADOL,		76)
		SetLevel(LAXIA,		76)
		SetLevel(SAHAD,		76)
		SetLevel(HUMMEL,	76)
		SetLevel(RICOTTA,	76)
		SetLevel(DANA,		76)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV72,	1)
		GetItem(TA_WP_LAXIA_LV72,	1)
		GetItem(TA_WP_SAHAD_LV72,	1)
		GetItem(TA_WP_HUMMEL_LV72,	1)
		GetItem(TA_WP_RICOTTA_LV72,	1)
		GetItem(TA_WP_DANA_LV72,	1)

		GetItem(TA_AM_MALE_LV72,	3)
		GetItem(TA_AM_FEMALE_LV72,	3)

		GetItem(TA_AR_LV72,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV72)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV72)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV72)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV72)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV72)
		EquipWeapon(DANA,		TA_WP_DANA_LV72)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV72)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV72)
		EquipArmor(SAHAD,		TA_AM_MALE_LV72)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV72)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV72)
		EquipArmor(DANA,		TA_AM_FEMALE_LV72)

		EquipShield(ADOL,		TA_AR_LV72)
		EquipShield(LAXIA,		TA_AR_LV72)
		EquipShield(SAHAD,		TA_AR_LV72)
		EquipShield(HUMMEL,		TA_AR_LV72)
		EquipShield(RICOTTA,	TA_AR_LV72)
		EquipShield(DANA,		TA_AR_LV72)

		// フラグ
		SetFlag(GF_MP8323_2NDBATTLE, 1)

		// マップ移動
		LoadArg("map/mp8323/mp8323.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B155)		// シルヴィア
	{
		// Lv60
		SetLevel(ADOL,		60)
		SetLevel(LAXIA,		60)
		SetLevel(SAHAD,		60)
		SetLevel(HUMMEL,	60)
		SetLevel(RICOTTA,	60)
		SetLevel(DANA,		60)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV60,	1)
		GetItem(TA_WP_LAXIA_LV60,	1)
		GetItem(TA_WP_SAHAD_LV60,	1)
		GetItem(TA_WP_HUMMEL_LV60,	1)
		GetItem(TA_WP_RICOTTA_LV60,	1)
		GetItem(TA_WP_DANA_LV60,	1)

		GetItem(TA_AM_MALE_LV60,	3)
		GetItem(TA_AM_FEMALE_LV60,	3)

		GetItem(TA_AR_LV60,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV60)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV60)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV60)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV60)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV60)
		EquipWeapon(DANA,		TA_WP_DANA_LV60)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV60)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV60)
		EquipArmor(SAHAD,		TA_AM_MALE_LV60)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV60)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV60)
		EquipArmor(DANA,		TA_AM_FEMALE_LV60)

		EquipShield(ADOL,		TA_AR_LV60)
		EquipShield(LAXIA,		TA_AR_LV60)
		EquipShield(SAHAD,		TA_AR_LV60)
		EquipShield(HUMMEL,		TA_AR_LV60)
		EquipShield(RICOTTA,	TA_AR_LV60)
		EquipShield(DANA,		TA_AR_LV60)

		// マップ移動
		LoadArg("map/mp1213/mp1213.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B151)		// スキル猿
	{
		// Lv70
		SetLevel(ADOL,		70)
		SetLevel(LAXIA,		70)
		SetLevel(SAHAD,		70)
		SetLevel(HUMMEL,	70)
		SetLevel(RICOTTA,	70)
		SetLevel(DANA,		70)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV70,	1)
		GetItem(TA_WP_LAXIA_LV70,	1)
		GetItem(TA_WP_SAHAD_LV70,	1)
		GetItem(TA_WP_HUMMEL_LV70,	1)
		GetItem(TA_WP_RICOTTA_LV70,	1)
		GetItem(TA_WP_DANA_LV70,	1)

		GetItem(TA_AM_MALE_LV70,	3)
		GetItem(TA_AM_FEMALE_LV70,	3)

		GetItem(TA_AR_LV70,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV70)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV70)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV70)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV70)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV70)
		EquipWeapon(DANA,		TA_WP_DANA_LV70)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV70)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV70)
		EquipArmor(SAHAD,		TA_AM_MALE_LV70)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV70)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV70)
		EquipArmor(DANA,		TA_AM_FEMALE_LV70)

		EquipShield(ADOL,		TA_AR_LV70)
		EquipShield(LAXIA,		TA_AR_LV70)
		EquipShield(SAHAD,		TA_AR_LV70)
		EquipShield(HUMMEL,		TA_AR_LV70)
		EquipShield(RICOTTA,	TA_AR_LV70)
		EquipShield(DANA,		TA_AR_LV70)

		SetFlag( GF_MP7304_KONG, 1 )		// マスターコング戦にする
		SetFlag( GF_QS400_KONG_LV, 6 )		// マスターコングのキャラモード（6=本気）
		
		// マップ移動
		LoadArg("map/mp7304/mp7304.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B153)		// メフォラシュム (隠居ボス)
	{
		// Lv80
		SetLevel(ADOL,		75)
		SetLevel(LAXIA,		75)
		SetLevel(SAHAD,		75)
		SetLevel(HUMMEL,	75)
		SetLevel(RICOTTA,	75)
		SetLevel(DANA,		75)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV72,	1)
		GetItem(TA_WP_LAXIA_LV72,	1)
		GetItem(TA_WP_SAHAD_LV72,	1)
		GetItem(TA_WP_HUMMEL_LV72,	1)
		GetItem(TA_WP_RICOTTA_LV72,	1)
		GetItem(TA_WP_DANA_LV72,	1)

		GetItem(TA_AM_MALE_LV72,	3)
		GetItem(TA_AM_FEMALE_LV72,	3)

		GetItem(TA_AR_LV72,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV72)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV72)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV72)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV72)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV72)
		EquipWeapon(DANA,		TA_WP_DANA_LV72)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV72)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV72)
		EquipArmor(SAHAD,		TA_AM_MALE_LV72)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV72)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV72)
		EquipArmor(DANA,		TA_AM_FEMALE_LV72)

		EquipShield(ADOL,		TA_AR_LV72)
		EquipShield(LAXIA,		TA_AR_LV72)
		EquipShield(SAHAD,		TA_AR_LV72)
		EquipShield(HUMMEL,		TA_AR_LV72)
		EquipShield(RICOTTA,	TA_AR_LV72)
		EquipShield(DANA,		TA_AR_LV72)

		// マップ移動
		LoadArg("map/mp6413/mp6413.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B170)		// メライドゥマ (二週目専用最強ボス)
	{
		// Lv99
		SetLevel(ADOL,		99)
		SetLevel(LAXIA,		99)
		SetLevel(SAHAD,		99)
		SetLevel(HUMMEL,	99)
		SetLevel(RICOTTA,	99)
		SetLevel(DANA,		99)

		// 武器・防具装備
		GetItem(TA_WP_ADOL_LV72,	1)
		GetItem(TA_WP_LAXIA_LV72,	1)
		GetItem(TA_WP_SAHAD_LV72,	1)
		GetItem(TA_WP_HUMMEL_LV72,	1)
		GetItem(TA_WP_RICOTTA_LV72,	1)
		GetItem(TA_WP_DANA_LV72,	1)

		GetItem(TA_AM_MALE_LV72,	3)
		GetItem(TA_AM_FEMALE_LV72,	3)

		GetItem(TA_AR_LV72,			6)		
		
		EquipWeapon(ADOL,		TA_WP_ADOL_LV72)
		EquipWeapon(LAXIA,		TA_WP_LAXIA_LV72)
		EquipWeapon(SAHAD,		TA_WP_SAHAD_LV72)
		EquipWeapon(HUMMEL,		TA_WP_HUMMEL_LV72)
		EquipWeapon(RICOTTA,	TA_WP_RICOTTA_LV72)
		EquipWeapon(DANA,		TA_WP_DANA_LV72)
		
		EquipArmor(ADOL,		TA_AM_MALE_LV72)
		EquipArmor(LAXIA,		TA_AM_FEMALE_LV72)
		EquipArmor(SAHAD,		TA_AM_MALE_LV72)
		EquipArmor(HUMMEL,		TA_AM_MALE_LV72)
		EquipArmor(RICOTTA,		TA_AM_FEMALE_LV72)
		EquipArmor(DANA,		TA_AM_FEMALE_LV72)

		EquipShield(ADOL,		TA_AR_LV72)
		EquipShield(LAXIA,		TA_AR_LV72)
		EquipShield(SAHAD,		TA_AR_LV72)
		EquipShield(HUMMEL,		TA_AR_LV72)
		EquipShield(RICOTTA,	TA_AR_LV72)
		EquipShield(DANA,		TA_AR_LV72)

		// マップ移動
		LoadArg("map/mp6569/mp6569.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B161)		// ダーナ編：第一階層中ボス	１人
	{
		// Lv46
		SetLevel(DANA, 46)
		SetLevel(DANA2, 46)
		SetLevel(DANA3, 46)
		
		SetFlag(SF_PAST_MODE, 1)	// 過去編
		SetFlag(SF_CANTLEARN_SKILL, 1)	// スキル習得禁止

		SetFlag(SF_ADOL_JOINOK,		0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_LAXIA_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_SAHAD_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_HUMMEL_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_RICOTTA_JOINOK,	0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

		SetFlag(SF_CHRSWITCH_MODE, 1)	// Zwei方式のキャラチェンジに。

		// 武器・防具装備
		GetItem(TA_ET_WP_DANA_LV46,		1)
		GetItem(TA_ET_AM_FEMALE_LV46,	1)
		GetItem(TA_ET_AR_LV46,			1)
		EquipWeapon(DANA,		TA_ET_WP_DANA_LV46)
		EquipArmor(DANA,		TA_ET_AM_FEMALE_LV46)
		EquipShield(DANA,		TA_ET_AR_LV46)

		// マップ移動
		LoadArg("map/mp6519m/mp6519m.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B162)		// ダーナ編：第二階層中ボス	１人
	{
		// Lv49
		SetLevel(DANA, 49)
		SetLevel(DANA2, 49)
		SetLevel(DANA3, 49)
		
		SetFlag(SF_PAST_MODE, 1)	// 過去編
		SetFlag(SF_CANTLEARN_SKILL, 1)	// スキル習得禁止

		SetFlag(SF_ADOL_JOINOK,		0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_LAXIA_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_SAHAD_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_HUMMEL_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_RICOTTA_JOINOK,	0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

		SetFlag(SF_CHRSWITCH_MODE, 1)	// Zwei方式のキャラチェンジに。

		// 武器・防具装備
		GetItem(TA_ET_WP_DANA_LV49,		1)
		GetItem(TA_ET_AM_FEMALE_LV49,	1)
		GetItem(TA_ET_AR_LV49,			1)
		EquipWeapon(DANA,		TA_ET_WP_DANA_LV49)
		EquipArmor(DANA,		TA_ET_AM_FEMALE_LV49)
		EquipShield(DANA,		TA_ET_AR_LV49)

		// マップ移動
		LoadArg("map/mp6529m/mp6529m.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B163)		// ダーナ編：第三階層中ボス	１人
	{
		// Lv52
		SetLevel(DANA, 52)
		SetLevel(DANA2, 52)
		SetLevel(DANA3, 52)
		
		SetFlag(SF_PAST_MODE, 1)	// 過去編
		SetFlag(SF_CANTLEARN_SKILL, 1)	// スキル習得禁止

		SetFlag(SF_ADOL_JOINOK,		0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_LAXIA_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_SAHAD_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_HUMMEL_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_RICOTTA_JOINOK,	0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

		SetFlag(SF_CHRSWITCH_MODE, 1)	// Zwei方式のキャラチェンジに。

		// 武器・防具装備
		GetItem(TA_ET_WP_DANA_LV52,		1)
		GetItem(TA_ET_AM_FEMALE_LV52,	1)
		GetItem(TA_ET_AR_LV52,			1)
		EquipWeapon(DANA,		TA_ET_WP_DANA_LV52)
		EquipArmor(DANA,		TA_ET_AM_FEMALE_LV52)
		EquipShield(DANA,		TA_ET_AR_LV52)

		// マップ移動
		LoadArg("map/mp6539m/mp6539m.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B011)		// ダーナ編：レ・キュアノス (ダーナ・ソロボス)	１人
	{
		// Lv53
		SetLevel(DANA, 53)
		SetLevel(DANA2, 53)
		SetLevel(DANA3, 53)
		
		SetFlag(SF_PAST_MODE, 1)	// 過去編
		SetFlag(SF_CANTLEARN_SKILL, 1)	// スキル習得禁止

		SetFlag(SF_ADOL_JOINOK,		0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_LAXIA_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_SAHAD_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_HUMMEL_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_RICOTTA_JOINOK,	0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

		SetFlag(SF_CHRSWITCH_MODE, 1)	// Zwei方式のキャラチェンジに。
		
		// 武器・防具装備
		GetItem(TA_ET_WP_DANA_LV53,		1)
		GetItem(TA_ET_AM_FEMALE_LV53,	1)
		GetItem(TA_ET_AR_LV53,			1)
		EquipWeapon(DANA,		TA_ET_WP_DANA_LV53)
		EquipArmor(DANA,		TA_ET_AM_FEMALE_LV53)
		EquipShield(DANA,		TA_ET_AR_LV53)

		// マップ移動
		LoadArg("map/mp6204m/mp6204m.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B164)		// ダーナ編：第四階層中ボス	１人
	{
		// Lv56
		SetLevel(DANA, 56)
		SetLevel(DANA2, 56)
		SetLevel(DANA3, 56)
		
		SetFlag(SF_PAST_MODE, 1)	// 過去編
		SetFlag(SF_CANTLEARN_SKILL, 1)	// スキル習得禁止

		SetFlag(SF_ADOL_JOINOK,		0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_LAXIA_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_SAHAD_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_HUMMEL_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_RICOTTA_JOINOK,	0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		
		// 武器・防具装備
		GetItem(TA_ET_WP_DANA_LV56,		1)
		GetItem(TA_ET_AM_FEMALE_LV56,	1)
		GetItem(TA_ET_AR_LV56,			1)
		EquipWeapon(DANA,		TA_ET_WP_DANA_LV56)
		EquipArmor(DANA,		TA_ET_AM_FEMALE_LV56)
		EquipShield(DANA,		TA_ET_AR_LV56)

		// マップ移動
		LoadArg("map/mp6549m/mp6549m.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B165)		// ダーナ編：第五階層中ボス	１人
	{
		// Lv62
		SetLevel(DANA, 62)
		SetLevel(DANA2, 62)
		SetLevel(DANA3, 62)
		
		SetFlag(SF_PAST_MODE, 1)	// 過去編
		SetFlag(SF_CANTLEARN_SKILL, 1)	// スキル習得禁止

		SetFlag(SF_ADOL_JOINOK,		0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_LAXIA_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_SAHAD_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_HUMMEL_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_RICOTTA_JOINOK,	0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

		SetFlag(SF_CHRSWITCH_MODE, 1)	// Zwei方式のキャラチェンジに。
		
		// 武器・防具装備
		GetItem(TA_ET_WP_DANA_LV62,		1)
		GetItem(TA_ET_AM_FEMALE_LV62,	1)
		GetItem(TA_ET_AR_LV62,			1)
		EquipWeapon(DANA,		TA_ET_WP_DANA_LV62)
		EquipArmor(DANA,		TA_ET_AM_FEMALE_LV62)
		EquipShield(DANA,		TA_ET_AR_LV62)

		// マップ移動
		LoadArg("map/mp6559m/mp6559m.arg")
	}
	else if (FLAG[GF_TIMEATK_STAGENO] == TIMEATK_MONS_B030)		// ダーナ編：イオ	１人
	{
		// Lv65
		SetLevel(DANA, 65)
		SetLevel(DANA2, 65)
		SetLevel(DANA3, 65)
		
		SetFlag(SF_PAST_MODE, 1)	// 過去編
		SetFlag(SF_CANTLEARN_SKILL, 1)	// スキル習得禁止

		SetFlag(SF_ADOL_JOINOK,		0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_LAXIA_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_SAHAD_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_HUMMEL_JOINOK,	0)			// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）
		SetFlag(SF_RICOTTA_JOINOK,	0)		// パーティー加入可能！（０－加入不可　１－入れ替え自由　２－強制）

		SetFlag(SF_CHRSWITCH_MODE, 1)	// Zwei方式のキャラチェンジに。
		
		// 武器・防具装備
		GetItem(TA_ET_WP_DANA_LV70,		1)
		GetItem(TA_ET_AM_FEMALE_LV70,	1)
		GetItem(TA_ET_AR_LV70,			1)
		EquipWeapon(DANA,		TA_ET_WP_DANA_LV70)
		EquipArmor(DANA,		TA_ET_AM_FEMALE_LV70)
		EquipShield(DANA,		TA_ET_AR_LV70)

		// マップ移動
		LoadArg("map/mp6569m/mp6569m.arg")
	}
	SetFlag(SF_DEBUG, 0)		// ここまでレベル下げれる

	// 一応リセットしておく
	ResetStopFlag(STOPFLAG_EVENT)
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ギャラリー水晶調べた
function "gallerymenu_lp"
{
	SetStopFlag(STOPFLAG_TALK)

	//if( !FLAG[GF_SUBEV_FIRST_TIMEATK] )
	//{
	//	//▼初めて黒い水晶石を調べたメッセージ
    //
	//	// テキスト（色替え）
	//	TalkPopup(UNDEF, 0, 3, SYSTEM_PPOSX, SYSTEM_PPOSY, 0) {
	//		"#7C見慣れない漆黒の水晶石がある。\p"
	//		"#7C触れるとなぜか、激戦の記憶が"
	//		"#7C呼び覚まされるようだ……"
	//	}
	//	WaitPrompt()
	//	WaitCloseWindow()
	//	
	//	SetFlag( GF_SUBEV_FIRST_TIMEATK, 1 )			// 初めて黒い水晶石を調べたメッセージ
	//}
		
	FadeOut(FADE_BLACK,10)
	WaitFade()

	// メニュー呼び出しへ
	SetFlag(GF_GALLERY_EVENT_RETURN, EGALLERY_EV_NONE)		// 格納フラグ初期化
	EventCue("system:gallerymenu")
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ｷﾞｬﾗﾘｰメニュー呼び出し
function "gallerymenu"
{
	SetStopFlag(STOPFLAG_TALK)

	FadeOut(FADE_BLACK,0)
	//StopBGM(45)	//◆仮　専用BGMがある場合は消してください
	SetWork( WK_BGM , BGM_GALLERY )

	GalleryMenuOpen(GF_GALLERY_EVENT_RETURN)
	WaitMenu(0)

	// ギャラリームービーID が有効
	if (FLAG[GF_GALLERY_EVENT_RETURN] >= EGALLERY_EV_MAX && FLAG[GF_GALLERY_EVENT_RETURN] < EGALLERY_MOVIE_END)
	{
		// ムービーギャラリーへ
		Wait(5)// クロスフェードはやっていないが念のため

		ResetStopFlag(STOPFLAG_TALK)

		CallFunc("system:gallerystart2")
		EventCue("system:gallerymenu")
	}
	// ギャラリーイベントID が有効
	else if (FLAG[GF_GALLERY_EVENT_RETURN] > EGALLERY_EV_NONE && FLAG[GF_GALLERY_EVENT_RETURN] < EGALLERY_EV_MAX)
	{
		// イベントギャラリーへ
		Wait(5)// クロスフェードはやっていないが念のため

		ResetStopFlag(STOPFLAG_TALK)

		CallFunc("system:gallerystart")	
	}
	else
	{
//		FadeIn(FADE_BLACK, 10)
		ReturnTitle()
		Wait(10)
	}
	
	ResetStopFlag(STOPFLAG_TALK)
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// イベントギャラリー開始処理
function "gallerystart"
{
	// 一瞬で抜けるけど念の為セットしておく
	SetStopFlag(STOPFLAG_EVENT)

	// ここでRAMセーブ取る
	SetFlag(TF_MENU_SELECT, (FLAG[GF_GALLERY_EVENT_RETURN]))	// 控えておく
	GalleryEvStart(0)

	SetFlag(SF_2NDSTART,1)		//２周目判定フラグ：チュートリアルを飛ばす

	//ダーナ編①②
	if(( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_03_01 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_03_03 )
	|| ( FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_01 )
	|| ( FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_04 )
	|| ( FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_07 )
	|| ( FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_14 )
	|| ( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_05_09 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_05_10 ))
	{
		SetFlag(SF_PAST_MODE,1)	//ダーナ紋章制御　紋章なし
		SetPartyMember(PARTY_DANA , -1 , -1)
		SetFlag(SF_ADOL_JOINOK, 0)
		SetFlag(SF_LAXIA_JOINOK, 0)
		SetFlag(SF_SAHAD_JOINOK, 0)
		SetFlag(SF_HUMMEL_JOINOK, 0)
		SetFlag(SF_RICOTTA_JOINOK, 0)
		SetFlag(SF_DANA_JOINOK, 1)
	}
	else if(( FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_02 )
		||  ( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_06_08 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_06_12 ))
	{
		SetFlag(SF_PAST_MODE,0)	//ダーナ紋章制御　紋章あり
		SetPartyMember(PARTY_DANA , -1 , -1)
		SetFlag(SF_ADOL_JOINOK, 0)
		SetFlag(SF_LAXIA_JOINOK, 0)
		SetFlag(SF_SAHAD_JOINOK, 0)
		SetFlag(SF_HUMMEL_JOINOK, 0)
		SetFlag(SF_RICOTTA_JOINOK, 0)
		SetFlag(SF_DANA_JOINOK, 1)
	}
	//現代編
	else
	{
		SetFlag(SF_PAST_MODE,0)
		SetPartyMember(PARTY_ADOL , -1 , -1)
		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_LAXIA_JOINOK, 0)
		SetFlag(SF_SAHAD_JOINOK, 0)
		SetFlag(SF_HUMMEL_JOINOK, 0)
		SetFlag(SF_RICOTTA_JOINOK, 0)
		SetFlag(SF_DANA_JOINOK, 0)
	}

	//漂流者表示
	if( FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_06 )
	{
		SetFlag(GF_SUBEV_JOIN_AUSTEN,		1)		// オースティンと合流した
		SetFlag(GF_SUBEV_JOIN_KASHU,		1)		// カシューと合流した
		SetFlag(GF_SUBEV_JOIN_NIA,			1)		// シスター・ニアと合流した
		SetFlag(GF_SUBEV_JOIN_SILVIA,		1)		// シルヴィアと合流した
		SetFlag(GF_SUBEV_JOIN_ED,			1)		// エドと合流した	
		SetFlag(GF_SUBEV_JOIN_MIRALDA,		1)		// ミラルダと合流した
		SetFlag(GF_SUBEV_JOIN_REJA,			1)		// レーヤと合流した
	}
	else if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_EL_01 )
	{
		SetFlag(GF_SUBEV_JOIN_AUSTEN,		1)		// オースティンと合流した
		SetFlag(GF_SUBEV_LOOK_KASHU1,		1)		// カシューの合流イベント①を見た
		SetFlag(GF_SUBEV_JOIN_KASHU,		1)		// カシューと合流した
		SetFlag(GF_SUBEV_JOIN_GRISELDA,		1)		// グリゼルダと合流した
		SetFlag(GF_SUBEV_LOOK_NIA1,			1)		// シスター・ニアの合流イベント①を見た
		SetFlag(GF_SUBEV_JOIN_NIA,			1)		// シスター・ニアと合流した
		SetFlag(GF_SUBEV_LOOK_SILVIA1,		1)		// シルヴィアの合流イベント①を見た
		SetFlag(GF_SUBEV_LOOK_SILVIA2,		1)		// シルヴィアの合流イベント②を見た
		SetFlag(GF_SUBEV_JOIN_SILVIA,		1)		// シルヴィアと合流した
		SetFlag(GF_SUBEV_JOIN_ED,			1)		// エドと合流した	
		SetFlag(GF_SUBEV_JOIN_FRANZ,		1)		// フランツと合流した
		SetFlag(GF_SUBEV_JOIN_MIRALDA,		1)		// ミラルダと合流した
		SetFlag(GF_SUBEV_LOOK_REJA1,		1)		// レーヤの合流イベント①を見た
		SetFlag(GF_SUBEV_JOIN_REJA,			1)		// レーヤと合流した
		SetFlag(GF_SUBEV_JOIN_CURRAN2,		1)		// カーラン卿が改めて合流した
	}

	//アドルの武器・服装
	if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_PL_01 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_01_04)	//一部まで
	{
		EquipCostume(ADOL, -1, EQC_MAIN, EQC_MODE_EVFORCE)		// 強制はしない
		EquipCostume(ADOL, ICON3D_COS_ADOL_00, EQC_MAIN, EQC_MODE_EVDEFAULT)	// イベントとしては船員服を着て欲しい

		if( FLAG[TF_MENU_SELECT] == EGALLERY_EV_01_02 )
		{
			GetItem(ICON3D_WP_ADOL_009, 1)
			EquipWeapon(ADOL,		ICON3D_WP_ADOL_009		)			//錆びた剣
		}
		if( FLAG[TF_MENU_SELECT] == EGALLERY_EV_01_03 || FLAG[TF_MENU_SELECT] == EGALLERY_EV_01_04 )
		{
			GetItem(ICON3D_WP_ADOL_000, 1)
			EquipWeapon(ADOL,		ICON3D_WP_ADOL_000		)			//ショートソード
		}
	}
	else if( FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_01)	//カトリーン出会い前
	{
		GetItem(ICON3D_WP_ADOL_000, 1)
		EquipWeapon(ADOL,		ICON3D_WP_ADOL_000		)			//ショートソード
	}
	else if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_02_02 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_03_06)	//カトリーン出会った後～リコッタ出会うまで
	{
		GetItem(ICON3D_WP_ADOL_001, 1)
		EquipWeapon(ADOL,		ICON3D_WP_ADOL_001		)			//ロングソード
		GetItem(ICON3D_WP_LAXIA_001, 1)
		EquipWeapon(LAXIA,		ICON3D_WP_LAXIA_001		)
		GetItem(ICON3D_WP_SAHAD_001, 1)
		EquipWeapon(SAHAD,		ICON3D_WP_SAHAD_001		)

	}	
	else if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_03_07 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_05_04)	//ヒイロカネ武器獲得
	{
		GetItem(ICON3D_WP_ADOL_003, 1)
		EquipWeapon(ADOL,		ICON3D_WP_ADOL_003		)			//リベラシオン
		GetItem(ICON3D_WP_LAXIA_003, 1)
		EquipWeapon(LAXIA,		ICON3D_WP_LAXIA_003		)	
		GetItem(ICON3D_WP_SAHAD_003, 1)
		EquipWeapon(SAHAD,		ICON3D_WP_SAHAD_003		)	
		GetItem(ICON3D_WP_RICOTTA_001, 1)
		EquipWeapon(RICOTTA,		ICON3D_WP_RICOTTA_001	)	
		GetItem(ICON3D_WP_HUMMEL_002, 1)
		EquipWeapon(HUMMEL,		ICON3D_WP_HUMMEL_002		)	
		GetItem(ICON3D_WP_DANA_000, 1)
		EquipWeapon(DANA,		ICON3D_WP_DANA_000		)	

	}	
	else if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_05_05 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_05_14)	//5部中
	{
		GetItem(ICON3D_WP_ADOL_005, 1)
		EquipWeapon(ADOL,		ICON3D_WP_ADOL_005		)			//ヴォーパルブレイド
		GetItem(ICON3D_WP_LAXIA_005, 1)
		EquipWeapon(LAXIA,		ICON3D_WP_LAXIA_005		)	
		GetItem(ICON3D_WP_SAHAD_005, 1)
		EquipWeapon(SAHAD,		ICON3D_WP_SAHAD_005		)	
		GetItem(ICON3D_WP_RICOTTA_003, 1)
		EquipWeapon(RICOTTA,		ICON3D_WP_RICOTTA_003	)	
		GetItem(ICON3D_WP_HUMMEL_004, 1)
		EquipWeapon(HUMMEL,		ICON3D_WP_HUMMEL_004		)	
		GetItem(ICON3D_WP_DANA_001, 1)
		EquipWeapon(DANA,		ICON3D_WP_DANA_001		)	

		if(FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_10 )
		{
			GetItem(ICON3D_WP_DANA_000, 1)
			EquipWeapon(DANA,		ICON3D_WP_DANA_000		)	
		}
	}	
	else if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_06_01 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_06_04)	//6部中
	{
		GetItem(ICON3D_WP_ADOL_007, 1)
		EquipWeapon(ADOL,		ICON3D_WP_ADOL_007		)			//ハイペリオン
		GetItem(ICON3D_WP_LAXIA_007, 1)
		EquipWeapon(LAXIA,		ICON3D_WP_LAXIA_007		)	
		GetItem(ICON3D_WP_SAHAD_007, 1)
		EquipWeapon(SAHAD,		ICON3D_WP_SAHAD_007		)	
		GetItem(ICON3D_WP_RICOTTA_005, 1)
		EquipWeapon(RICOTTA,		ICON3D_WP_RICOTTA_005	)	
		GetItem(ICON3D_WP_HUMMEL_006, 1)
		EquipWeapon(HUMMEL,		ICON3D_WP_HUMMEL_006		)	
		GetItem(ICON3D_WP_DANA_003, 1)
		EquipWeapon(DANA,		ICON3D_WP_DANA_003		)	
	}	

	else if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_06_05 && FLAG[TF_MENU_SELECT] <= EGALLERY_EV_06_07)	//ミストルティン入手後
	{
		GetItem(ICON3D_WP_ADOL_008,1)
		EquipWeapon(ADOL,ICON3D_WP_ADOL_008	)					//ミストルティン
		GetItem(ICON3D_WP_LAXIA_007, 1)
		EquipWeapon(LAXIA,		ICON3D_WP_LAXIA_007		)	
		GetItem(ICON3D_WP_SAHAD_007, 1)
		EquipWeapon(SAHAD,		ICON3D_WP_SAHAD_007		)	
		GetItem(ICON3D_WP_RICOTTA_005, 1)
		EquipWeapon(RICOTTA,		ICON3D_WP_RICOTTA_005	)	
		GetItem(ICON3D_WP_HUMMEL_006, 1)
		EquipWeapon(HUMMEL,		ICON3D_WP_HUMMEL_006		)	
		GetItem(ICON3D_WP_DANA_003, 1)
		EquipWeapon(DANA,		ICON3D_WP_DANA_003		)	
	}
	else
	{
		GetItem(ICON3D_WP_ADOL_007, 1)
		EquipWeapon(ADOL,		ICON3D_WP_ADOL_007		)			//ハイペリオン

		if( FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_23 )			//ダーナの親愛イベントのみ
		{
			GetItem(ICON3D_WP_ADOL_008, 1)
			EquipWeapon(ADOL,		ICON3D_WP_ADOL_008		)			//ミストルティン
		}
		GetItem(ICON3D_WP_LAXIA_007, 1)
		EquipWeapon(LAXIA,		ICON3D_WP_LAXIA_007		)	
		GetItem(ICON3D_WP_SAHAD_007, 1)
		EquipWeapon(SAHAD,		ICON3D_WP_SAHAD_007		)	
		GetItem(ICON3D_WP_RICOTTA_005, 1)
		EquipWeapon(RICOTTA,		ICON3D_WP_RICOTTA_005	)	
		GetItem(ICON3D_WP_HUMMEL_006, 1)
		EquipWeapon(HUMMEL,		ICON3D_WP_HUMMEL_006		)	
		GetItem(ICON3D_WP_DANA_003, 1)
		EquipWeapon(DANA,		ICON3D_WP_DANA_003		)	

		if( FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_10 )
		{
			GetItem(ICON3D_WP_DANA_005, 1)
			EquipWeapon("DANA", ICON3D_WP_DANA_005)		// 霊環セレスディア	
		}
	}

	//村発展度（親愛イベント用）
	if( FLAG[TF_MENU_SELECT] >= EGALLERY_EV_LIKE_01 )
	{
		SetFlag(GF_CAMP_BED_LV,2)
		SetFlag(GF_CAMP_TAILOR_LV,2)
		SetFlag(GF_CAMP_ROOM_LV,3)
		SetFlag(GF_CAMP_VILLAGE_LV,6)
		SetFlag(GF_CAMP_SHIPYARD_LV,9)
		SetFlag(GF_CAMP_VILLAGE_LV,7)
		SetFlag(GF_CAMP_SHIPYARD_LV,8)
		SetFlag(GF_CAMP_VILLAGE_LV,7)

		SetFlag(GF_CAMP_FARM_LV,3)
		SetFlag(GF_CAMP_FARMFENCE_LV,3)
		SetFlag(GF_CAMP_GRAVE_LV,1)

		SetFlag(GF_SUBEV_JOIN_AUSTEN,		1)		// オースティンと合流した
		SetFlag(GF_SUBEV_LOOK_KASHU1,		1)		// カシューの合流イベント①を見た
		SetFlag(GF_SUBEV_JOIN_KASHU,		1)		// カシューと合流した
		SetFlag(GF_SUBEV_JOIN_GRISELDA,		1)		// グリゼルダと合流した
		SetFlag(GF_SUBEV_LOOK_NIA1,			1)		// シスター・ニアの合流イベント①を見た
		SetFlag(GF_SUBEV_JOIN_NIA,			1)		// シスター・ニアと合流した
		SetFlag(GF_SUBEV_LOOK_SILVIA1,		1)		// シルヴィアの合流イベント①を見た
		SetFlag(GF_SUBEV_LOOK_SILVIA2,		1)		// シルヴィアの合流イベント②を見た
		SetFlag(GF_SUBEV_JOIN_SILVIA,		1)		// シルヴィアと合流した
		SetFlag(GF_SUBEV_JOIN_ED,			1)		// エドと合流した	
		SetFlag(GF_SUBEV_JOIN_FRANZ,		1)		// フランツと合流した
		SetFlag(GF_SUBEV_JOIN_MIRALDA,		1)		// ミラルダと合流した
		SetFlag(GF_SUBEV_LOOK_REJA1,		1)		// レーヤの合流イベント①を見た
		SetFlag(GF_SUBEV_JOIN_REJA,			1)		// レーヤと合流した
		SetFlag(GF_SUBEV_JOIN_CURRAN2,		1)		// カーラン卿が改めて合流した

		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)
	}

	SetFlag(SF_EVENT_ON,1)
	SetFlag(SF_BOSS_BATTLE, 0)
	SetFlag(GF_EVENT_CTL, 0)
	SetFlag(TF_LOADING_TIPS_OFF, 1)		//連続再生用

	// ▼プロローグ
	if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_PL_01)		// M00S001:アドル＆ドギ登場
	{
		LoadArg("map/mp0011/mp0011.arg")
		EventCue("mp0011:EV_M00S001")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_PL_02)		// M00S010:バルバロス登場
	{
		LoadArg("map/mp0016/mp0016.arg")
		EventCue("mp0016:EV_M00S010")
		SetWork( WK_BGM , BGM_EVENT_003 )
		SetFlag(SF_NOCHANGEBGM, 1)
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_PL_03)		// M00S050:巨大な触手と戦闘する
	{

		LoadArg("map/mp0011b/mp0011b.arg")
		EventCue("mp0011b:EV_M00S050")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_PL_04)		// M00S060:ロンバルディアが沈没する
	{
		GetItem(ICON3D_WP_ADOL_011,1)	//イシオスブレード
		EquipWeapon(ADOL,ICON3D_WP_ADOL_011	)	//イシオスブレード装備		

		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()

		LoadArg("map/mp0011b/mp0011b.arg")
		EventCue("mp0011b:EV_M00S060")
	}
	// ▼第一部
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_01_01)		// M01S000:セイレン島に漂着する
	{
		LoadArg("map/mp1110/mp1110.arg")
		EventCue("mp1110:EV_M01S000")
	}	
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_01_02)		// M01S030:ラクシャに遭遇する
	{
		LoadArg("map/mp1101/mp1101.arg")
		EventCue("mp1101:EV_M01S030")
	}	
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_01_03)		// M01S180:古代種と遭遇
	{
		LoadArg("map/mp1103/mp1103.arg")
		EventCue("mp1103:EV_M01S180")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)
	}	
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_01_04)		// M01S181:サハド抱きつく
	{
		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()

		LoadArg("map/mp1103/mp1103.arg")
		EventCue("mp1103:EV_M01S181")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)

	}	
	// ▼第二部
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_01)		// M02S101:はじめて野営をする２
	{
		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_LAXIA_JOINOK, 1)
		SetFlag(SF_SAHAD_JOINOK, 1)

		LoadArg("map/mp1105t2/mp1105t2.arg")
		EventCue("mp1105:EV_M02S101")
	}	
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_02)		// M02S260:ヒュンメルと出会う
	{
		LoadArg("map/mp1120t1/mp1120t1.arg")
		EventCue("mp1120:EV_M02S260")
	}	
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_03)		// M02S271:mp1121で野営する２
	{

		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_LAXIA_JOINOK, 1)
		SetFlag(SF_SAHAD_JOINOK, 1)
		
		LoadArg("map/mp1121t2/mp1121t2.arg")
		EventCue("mp1121:EV_M02S271")
	}	
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_04)		// M02S320:ヒュンメルが合流する
	{
		LoadArg("map/mp1108/mp1108.arg")
		EventCue("mp1108:EV_M02S320")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_05)		// M02S331:侵蝕谷前の野営２
	{
		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_LAXIA_JOINOK, 1)
		SetFlag(SF_SAHAD_JOINOK, 1)
		SetFlag(SF_HUMMEL_JOINOK, 1)

		LoadArg("map/mp4102t2/mp4102t2.arg")
		EventCue("mp4102t2:EV_M02S331")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_06)		// M02S361:密林前の野営２
	{
		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_LAXIA_JOINOK, 1)
		SetFlag(SF_SAHAD_JOINOK, 1)
		SetFlag(SF_HUMMEL_JOINOK, 1)

		LoadArg("map/mp2103t2/mp2103t2.arg")
		EventCue("mp2103:EV_M02S361")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_07)		// M02S490:ラクシャと二人きりで話す
	{
		SetFlag(GF_CAMP_VILLAGE_LV,4)

		LoadArg("map/mp1201t2/mp1201t2.arg")
		EventCue("mp1201:EV_M02S490")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_08)		// M02S560:カーラン卿が死亡する
	{

		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()

		LoadArg("map/mp1134/mp1134.arg")
		EventCue("mp1134:EV_M02S560")

	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_09)		// M02S650:バルバロスが致命傷を負う
	{

		SetPartyMember(PARTY_ADOL , PARTY_SAHAD , -1)
		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_SAHAD_JOINOK, 1)

		LoadArg("map/mp1111/mp1111.arg")
		EventCue("mp1111:EV_M02S650")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_10)		// M02S670:キルゴールが死亡
	{

		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()
		
		LoadArg("map/mp1103/mp1103.arg")
		EventCue("mp1103:EV_M02S670")
		
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_02_11)		// M02S680:バルバロスが命を落とす
	{
		LoadArg("map/mp1111/mp1111.arg")
		EventCue("mp1111:EV_M02S680")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)		
	}
	// ▼第三部
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_01)		// M03S010:ダーナ① 植樹祭の説明を受ける
	{
		LoadArg("map/mp6410m/mp6410m.arg")
		EventCue("mp6410m:EV_M03S010")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_02)		// M03S031:ダーナ① 植樹の儀２
	{
		LoadArg("map/mp3111m/mp3111m.arg")
		EventCue("mp3111m:EV_M03S031")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_03)		// M03S111:ダーナ② サライとの別れ２
	{
		LoadArg("map/mp6402m/mp6402m.arg")
		EventCue("mp6402m:EV_M03S111")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_04)		// M03S150:ジャンダルムで大型古代種に遭遇
	{
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)

		LoadArg("map/mp4337/mp4337.arg")
		EventCue("mp4337:EV_M03S150")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_05)		// M03S151:リコッタが助太刀に入る
	{
		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()

		LoadArg("map/mp4337/mp4337.arg")
		EventCue("mp4337:EV_M03S151")

		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)

	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_06)		// M03S160:リコッタの話を聞く
	{
		LoadArg("map/mp4202/mp4202.arg")
		EventCue("mp4202:EV_M03S160")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_07)		// M03S250:初めて古代種を打倒する
	{
		LoadArg("map/mp1215/mp1215.arg")
		EventCue("mp1215:EV_M03S250")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_08)		// M03S270:翼竜型古代種登場
	{
		LoadArg("map/mp4341/mp4341.arg")
		EventCue("mp4341:EV_M03S270")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)

	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_03_09)		// M03S290:ジャンダルムの頂上に到着する
	{
		LoadArg("map/mp4107/mp4107.arg")
		EventCue("mp4107:EV_M03S290")
	}
	// ▼第四部
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_01)		// M04S060:ダーナ③ 新女王サライへの謁見
	{
		LoadArg("map/mp6222m/mp6222m.arg")
		EventCue("mp6222m:EV_M04S060")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_02)		// M04S080:リコッタが行方不明になる
	{
		LoadArg("map/mp5102/mp5102.arg")
		EventCue("mp5102:EV_M04S080")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_03)		// M04S121:王都前で野営する
	{
		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_LAXIA_JOINOK, 1)
		SetFlag(SF_SAHAD_JOINOK, 1)
		SetFlag(SF_HUMMEL_JOINOK, 1)
		SetFlag(SF_RICOTTA_JOINOK, 1)

		LoadArg("map/mp6101t1/mp6101t1.arg")
		EventCue("mp6101:EV_M04S121")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_04)		// M04S132:過去Ⅰ 初めて水晶石前に植樹
	{
		LoadArg("map/mp6101m/mp6101m.arg")
		EventCue("mp6101m:EV_M04S132")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_05)		// M04S170:橋の上でタナトスに出会う
	{
		LoadArg("map/mp6204/mp6204.arg")
		EventCue("mp6204:EV_M04S170")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_06)		// M04S260:ダーナを発見する
	{

		SetFlag(GF_04MP6409_LOOK_1ST_CUT, 0)	//ダーナイベント初回判定をリセット
		LoadArg("map/mp6409/mp6409.arg")
		EventCue("mp6409:EV_M04S260")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_04_07)		// 地下聖堂でモノリスを調べる
	{
		SetFlag(GF_PAST_EPISODE_2_GO_SOUTHGATE,1)
		SetFlag(GF_SUBEV_PAST_02_BOSS,1)

		LoadArg("map/mp6519m/mp6519m.arg")
		EventCue("mp6519m:SubEV_Past_MonoLithB1")
	}

	
	// ▼第五部
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_01)		// M05S010:ダーナが迎撃戦に参加する
	{
		LoadArg("map/mp1215/mp1215.arg")
		EventCue("mp1215:EV_M05S010")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_02)		// M05S130:ダーナがモノリスを起動する
	{
		LoadArg("map/mp6330/mp6330.arg")
		EventCue("mp6330:EV_M05S130")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_03)		// M05S147:エレフセリア号が出航する
	{
		SetFlag(GF_05MP1201_GOTO_GHOSTHIP,1)	//幽霊船を調査することになる
		SetFlag(GF_05MP7411_READ_NOTE1,1)		// ▼[M05S146][リードの航海日誌①を読む]
		SetFlag(GF_05MP7411_SAIL_GHOSTSHIP,0)	// ▽[M05S147][エレフセリア号が出航する]
		SetFlag(GF_05MP0405_READ_REED,0)		// ▼[M05S172][キャプテン・リードと別れる２]

		LoadArg("map/mp7411/mp7411.arg")
		EventCue("mp7411:EV_M05S147")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_04)		// M05S171:キャプテン・リードと別れる
	{
		LoadArg("map/mp7411/mp7411.arg")
		EventCue("mp7411:EV_M05S171")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_05)		// M05S230:消滅した王宮が復活する
	{
		LoadArg("map/mp6204/mp6204.arg")
		EventCue("mp6204:EV_M05S230")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_06)		// M05S280:オケアノス討伐戦を開始する
	{
		SetFlag(GF_05MP1201_OCEANUS_STANDBY,1)
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)

		LoadArg("map/mp6115v1/mp6115v1.arg")
		EventCue("mp6115v1:EV_M05S280")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_07)		// M05S293:オケアノスに勝利する
	{
		SetFlag(GF_05MP1201_OCEANUS_STANDBY,1)

		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()
		
		LoadArg("map/mp6370/mp6370.arg")
		EventCue("mp6370:EV_M05S293")

		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)

	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_08)		// M05S310:高台でダーナと話す
	{
		LoadArg("map/mp1201t2/mp1201t2.arg")
		EventCue("mp1201:EV_M05S310")
		SetWork( WK_BGM , BGM_EVENT_005 )
		SetFlag(SF_NOCHANGEBGM, 1)
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_09)		// M05S320:過去Ⅳ－２　星の落下を予知する
	{
		LoadArg("map/mp6409m/mp6409m.arg")
		EventCue("mp6409m:EV_M05S320")

	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_10)		// M05S341:過去Ⅳ－２　謎の竜種との戦闘後
	{

		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()
		
		LoadArg("map/mp6204m/mp6204m.arg")
		EventCue("mp6204m:EV_M05S341")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_11)		// M05S381:ダーナに追いつく２
	{
		LoadArg("map/mp6105/mp6105.arg")
		EventCue("mp6105:EV_M05S381")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_12)		// M05S421:墓所前で野営する
	{

		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_LAXIA_JOINOK, 1)
		SetFlag(SF_SAHAD_JOINOK, 1)
		SetFlag(SF_HUMMEL_JOINOK, 1)
		SetFlag(SF_RICOTTA_JOINOK, 1)
		SetFlag(SF_ADOL_JOINOK, 1)
		SetFlag(SF_DANA_JOINOK, 1)

		LoadArg("map/mp6108t2/mp6108t2.arg")
		EventCue("mp6108:EV_M05S421")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_13)		// M05S460:壁画の間にたどり着く
	{
		LoadArg("map/mp6351/mp6351.arg")
		EventCue("mp6351:EV_M05S460")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_05_14)		// イオがダーナに別れを告げる
	{
		SetFlag(GF_SUBEV_PAST_BOSS_B4,1)
	
		LoadArg("map/mp6549m/mp6549m.arg")
		EventCue("mp6549m:SubEV_Past_MonoLithB4")
	}
	
	// ▼第六部
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_01)		// M06S044:山門前で護り人たちに遭遇する２
	{
		LoadArg("map/mp6409v1/mp6409v1.arg")
		EventCue("mp6409v1:EV_M06S044")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_02)		// M06S070:過去Ⅵ　ダーナが自分を封印する
	{
		LoadArg("map/mp6409m1/mp6409m1.arg")
		EventCue("mp6409m1:EV_M06S070")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_03)		// M06S203:サライが想念を取り戻す
	{
		LoadArg("map/mp6308/mp6308.arg")
		EventCue("mp6308:EV_M06S203")
		SetWork( WK_BGM , BGM_EVENT_013 )
		SetFlag(SF_NOCHANGEBGM, 1)

	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_04)		// M06S210:想剣ミストルティンを入手する
	{

		SetFlag(GF_06MP6305_TALK_HYDRA,1)
		SetFlag(GF_06MP6306_TALK_MINOS,1)
		SetFlag(GF_06MP6307_TALK_NESTOR,1)
		SetFlag(GF_06MP6308_TALK_SARAI,1)
		LoadArg("map/mp6350v1/mp6350v1.arg")
		EventCue("mp6350:EV_M06S210")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_05)		// M06S230:《選択の間》への扉を開く
	{
		SetFlag(GF_06MP6301_OPEN_STAIRS,1)			
		SetFlag(GF_06MP6301_OPEN_HEAVENS,1)
		SetFlag(GF_06MP6301_OPEN_INSECT,1)
		SetFlag(GF_06MP6301_RETURN_CENTER,1)
		SetFlag(GF_MP630x_SMALLBOSS_09,1)
		SetFlag(GF_MP630x_SMALLBOSS_08,1)
		SetFlag(GF_MP630x_SMALLBOSS_07,1)
		SetFlag(GF_MP630x_SMALLBOSS_06,1)
		SetFlag(GF_MP630x_SMALLBOSS_05,1)
		SetFlag(GF_MP630x_SMALLBOSS_04,1)
		SetFlag(GF_MP630x_SMALLBOSS_03,1)
		SetFlag(GF_MP630x_SMALLBOSS_02,1)
		SetFlag(GF_MP630x_SMALLBOSS_01,1)
		SetFlag(GF_MP630x_SMALLBOSS_00,1)
		SetFlag(GF_06MP6301_OPEN_BOSSROOM,1)
		
		LoadArg("map/mp6301/mp6301.arg")
		EventCue("mp6301:EV_M06S230")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_06)		// M06S240:ﾃｵｽ･ﾃﾞ･ｴﾝﾄﾞﾛｸﾞﾗﾑとの戦い
	{
		LoadArg("map/mp6310b/mp6310b.arg")
		EventCue("mp6310b:EV_M06S240")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_07)		// M06S241:ﾃｵｽ･ﾃﾞ･ｴﾝﾄﾞﾛｸﾞﾗﾑとの戦い２
	{

		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()
		
		LoadArg("map/mp6310b/mp6310b.arg")
		EventCue("mp6310b:EV_M06S241")
		SetWork( WK_BGM , BGM_Nothing )
		SetFlag(SF_NOCHANGEBGM, 1)

	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_08)
	{
		SetFlag(GF_PAST_EPISODE_7_ENDEPISODE,1)
		
		LoadArg("map/mp6201m2/mp6201m2.arg")
		EventCue("mp6201m2:SubEV_Past_07_Main010")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_09)
	{
		SetFlag(GF_PAST_EPISODE_7_ENDEPISODE,1)

		LoadArg("map/mp6222m2/mp6222m2.arg")
		EventCue("mp6222m2:SubEV_Past_07_Main021")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_10)
	{
		SetFlag(GF_PAST_EPISODE_7_ENDEPISODE,1)
		
		LoadArg("map/mp6569m/mp6569m.arg")
		EventCue("mp6569m:SubEV_Past_07_Main060")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_11)
	{
		SetFlag(GF_PAST_EPISODE_7_ENDEPISODE,1)
		
		LoadArg("map/mp6569m/mp6569m.arg")
		EventCue("mp6569m:SubEV_Past_07_Main070")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_06_12)
	{
		SetFlag(GF_PAST_EPISODE_7_ENDEPISODE,1)
		
		LoadArg("map/mp6201m2/mp6201m2.arg")
		EventCue("mp6201m2:SubEV_Past_07_Main071")
	}
	
	// ▼エピローグ
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_EL_01)		// M07S000:漂流村でアドルが目を覚ます
	{
		SetFlag(GF_CAMP_BED_LV,2)
		SetFlag(GF_CAMP_TAILOR_LV,2)
		SetFlag(GF_CAMP_ROOM_LV,3)
		SetFlag(GF_CAMP_VILLAGE_LV,6)
		SetFlag(GF_MP1202_NOW,1)		//屋内に直接飛ぶ場合
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:EV_M07S000")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_EL_02)		// M07S010:ＥＤⅠ 寺院跡を訪れる＆脱出
	{
		SetFlag(GF_CAMP_SHIPYARD_LV,9)
		SetFlag(GF_CAMP_VILLAGE_LV,7)
		LoadArg("map/mp6409v2/mp6409v2.arg")
		EventCue("mp6409v2:EV_M07S010")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_EL_03)		// M07S040:ＥＤⅡ 大地神マイアとの邂逅
	{
		SetFlag(GF_CAMP_SHIPYARD_LV,9)
		SetFlag(GF_CAMP_VILLAGE_LV,7)
		LoadArg("map/mp6409v2/mp6409v2.arg")
		EventCue("mp6409v2:EV_M07S070")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_EL_04)		// M07S040:ＥＤⅢ 大地神マイアとの邂逅
	{
		SetFlag(GF_CAMP_SHIPYARD_LV,9)
		SetFlag(GF_TRUE_END,1)
		LoadArg("map/mp6409v2/mp6409v2.arg")
		EventCue("mp6409v2:EV_M07S070")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_EL_05)		// M07S100:ＥＤⅢ 《はじまりの深淵》突破
	{

		// 擬似フェードアウト表示
		Portrait_Load(1, "system/black.itp" )		//擬似フェードアウト用
		Portrait_Create(1, 0, 0, 0, 0, 1920,1080, 1.0f, 0x00ffffff, 0x00000000)

		FadeIn(FADE_BLACK,0)
		WaitFade()

		FadeOut(FADE_WHITE,7)
		WaitFade()

		LoadArg("map/mp6409v2/mp6409v2.arg")
		EventCue("mp6409v2:EV_M07S100")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_EL_06)		// M07S121:ＥＤⅢ セイレン島を脱出する
	{
		SetFlag(GF_CAMP_SHIPYARD_LV,9)
		SetFlag(GF_CAMP_VILLAGE_LV,7)
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:EV_M07S121")
	}
	// ▼親愛イベント
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_01)		// Sinai_Dogi
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Dogi")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_02)		// Sinai_Hummel
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Hummel")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_03)		// Sinai_Miralda
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Miralda")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_04)		// Sinai_Paro
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Paro")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_05)		// Sinai_Licht
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Licht")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_06)		// Sinai_Alison
	{
		SetFlag(GF_MP1202_NOW,1)		//屋内に直接飛ぶ場合
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Alison")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_07)		// Sinai_Curran
	{
		SetFlag(GF_MP1202_NOW,1)		//屋内に直接飛ぶ場合
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Curran")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_08)		// Sinai_Thanatos
	{
		SetFlag(GF_MP1202_NOW,1)		//屋内に直接飛ぶ場合
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Thanatos")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_09)		// Sinai_Ricotta
	{
		SetFlag(GF_MP1202_NOW,1)		//屋内に直接飛ぶ場合
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Ricotta")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_10)		// Sinai_Laxia
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Laxia")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_11)		// Sinai_Silvia
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Silvia")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_12)		// Sinai_Franz
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Franz")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_13)		// Sinai_Kashu
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Kashu")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_14)		// Sinai_Sahad
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Sahad")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_15)		// Sinai_Nia
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Nia")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_16)		// Sinai_Reja
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Reja")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_17)		// Sinai_Aaron
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Aaron")
	}
	
	//EGALLERY_EV_LIKE_18 エドは欠番	
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_19)		// Sinai_Austen
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Austen")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_20)		// Sinai_Katrin
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Katrin")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_21)		// Sinai_Kuina
	{
		LoadArg("map/mp1131/mp1131.arg")
		EventCue("mp1131:Sinai_Kuina")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_22)		// Sinai_Griselda
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Griselda")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_23)		// Sinai_Dana
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Dana")
	}
	else if (FLAG[TF_MENU_SELECT] == EGALLERY_EV_LIKE_24)		// Sinai_Dina
	{
		LoadArg("map/mp1201/mp1201.arg")
		EventCue("mp1201:Sinai_Dina")
	}
		
	// 一応リセットしておく
	ResetStopFlag(STOPFLAG_EVENT)
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ムービーギャラリー開始処理
function "gallerystart2"
{
	// 一瞬で抜けるけど念の為セットしておく
	SetStopFlag(STOPFLAG_EVENT)

	while(1)
	{
		// ここでRAMセーブ取る
		SetFlag(TF_MENU_SELECT, (FLAG[GF_GALLERY_EVENT_RETURN]))	// 控えておく
		GalleryEvStart(1)
		
		// ▼ オープニング
		if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_01)
		{
			Movie("movie/op.mp4", 0, 1, BGM_OPENING, 1, -1)
			WaitMovie()
		}
		//▼ 植樹祭の予知
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_02)
		{
			PlayBGM(BGM_EVENT_013, 0)
		 	Movie("movie/ins01.mp4", 0, 0, -1, 2, SE_Y491)
		 	WaitMovie()
			StopBGM(20)
		}
		//▼ 灰色の予知
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_03)
		{
			FadeBGM(100,0)
			PlayBGM(BGM_EVENT_013, 0)
		 	Movie("movie/ins02.mp4", 0, 0, -1, 1, SE_Y492)

		 	WaitMovie()
			StopBGM(20)
		}
		//▼ 王都理力障壁展開
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_04)
		{
			PlayBGM(BGM_EVENT_014, 0)
			Movie("movie/ins03.mp4", 0, 0, -1, 2, SE_Y493)
			WaitMovie()
			StopBGM(20)
		}
		//▼ 隕石群の飛来
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_05)
		{
			//FadeBGM(100,0)
			PlayBGM(BGM_EVENT_014, 0)
			Movie("movie/ins04.mp4", 0, 0, -1, 2, SE_Y494)
			WaitMovie()
			StopBGM(20)
		}
		//▼ 理力障壁決壊
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_06)
		{
			PlayBGM(BGM_EVENT_011, 0)
			Movie("movie/ins05.mp4", 0, 0, -1, 2, SE_Y495)
			WaitMovie()		
			StopBGM(20)
		}
		//▼ ラクリモサの消滅
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_07)
		{
			PlayBGM(BGM_DUNGEON_503, 0)
			Movie("movie/ins06.mp4", 0, 0, -1, 2, SE_Y496)
			WaitMovie()	
			StopBGM(20)
		}
		//▼ 通常エンディングロール
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_08)
		{
			PlayBGM(BGM_EVENT_016, 0)
			Movie("movie/ed.mp4", 0, 0, -1, 1, -1)
			WaitMovie()	
			StopBGM(20)
		}
		//▼ 真エンディングロール
		else if (FLAG[TF_MENU_SELECT] == EGALLERY_MOVIE_09)
		{
			Movie("movie/ed2.mp4", 0, 1, BGM_ENDING, 1, -1)
			WaitMovie()
		}
		else
		{
			break
		}

		Wait(20)//余韻
		GalleryEvEnd(1)
		
		// 次の再生が無ければ抜ける
		if( (FLAG[GF_GALLERY_EVENT_RETURN]) == (FLAG[TF_MENU_SELECT]) )
		{
			break
		}
	}

	// 一応リセットしておく
	ResetStopFlag(STOPFLAG_EVENT)
}

//////////////////////////////////////////////////////////////////////
//■プログラムから呼び出すアクティブボイス
//////////////////////////////////////////////////////////////////////
// 風を発生させる敵に近づいたら
function "act_1805"
{
	if (!FLAG[GF_AVOICE_1805])
	{
//		ActiveVoiceStop(ACTIVEVOICESTOP_WINDOWOFF)	// いつ再生するかわからないので、既存のアクティブボイスを停止はしないようにする
		ActiveVoiceStart(EACT_EVID_1805, 1, 0)		// 風を発生させる敵に近づいたら
	}
}

